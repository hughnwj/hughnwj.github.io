<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>10.Agent实战技能之LangChain全面剖析</title>
      <link href="/2025/03/24/10.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BLangChain%E5%85%A8%E9%9D%A2%E5%89%96%E6%9E%90/"/>
      <url>/2025/03/24/10.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BLangChain%E5%85%A8%E9%9D%A2%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="1-LangChain总体架构"><a href="#1-LangChain总体架构" class="headerlink" title="1. LangChain总体架构"></a>1. LangChain总体架构</h1><h2 id="1-1-什么是-LangChain"><a href="#1-1-什么是-LangChain" class="headerlink" title="1.1 什么是 LangChain"></a>1.1 什么是 LangChain</h2><p>LangChain 是一个框架，帮助开发者使用语言模型来构建应用程序。它提供了一系列的工具和组件，让开发者可以方便地创建和管理大模型应用程序。</p><p>LangChain 主要特点包括：</p><ul><li>**模型封装 (Model Wrappers)**：支持主流大模型（如 OpenAI、Hugging Face 等），统一接口调用，屏蔽底层复杂性。</li><li>**链式调用 (Chains)**：将多个步骤串联成“链”，比如先调用搜索引擎获取信息，再让大模型总结，最后生成结构化输出。</li><li>**记忆功能 (Memory)**：支持对话记忆，保持上下文，适合聊天机器人、个人助手等应用。</li><li>**数据检索与处理 (Retrieval &amp; Document Loaders)**：结合外部知识库（如 FAISS、Chroma、Pinecone），让大模型查找最新数据，突破“训练时间前”的限制。</li><li>**工具与代理 (Tools &amp; Agents)**：支持大模型自主调用 API、运行代码、搜索网络、执行数学计算等，提升任务完成能力。</li></ul><h3 id="1-1-1-LangChain-的定位"><a href="#1-1-1-LangChain-的定位" class="headerlink" title="1.1.1 LangChain 的定位"></a>1.1.1 LangChain 的定位</h3><blockquote><p>LangChain 之于大模型，类似 Spring 之于 Java，Django 之于 Python</p></blockquote><h3 id="1-1-2-LangChain-的优势"><a href="#1-1-2-LangChain-的优势" class="headerlink" title="1.1.2 LangChain 的优势"></a>1.1.2 LangChain 的优势</h3><ul><li><strong>降低学习成本</strong>：封装复杂功能，提供灵活的组件组合方式，减少开发者理解大模型底层原理的压力。</li><li><strong>组件化设计</strong>：可以按需组合不同功能模块，适应多种应用场景。</li><li><strong>生态活跃</strong>：持续更新迭代，社区提供丰富插件和示例。</li></ul><h3 id="1-1-3-官方资源"><a href="#1-1-3-官方资源" class="headerlink" title="1.1.3 官方资源"></a>1.1.3 官方资源</h3><ul><li>GitHub 地址: <a href="https://github.com/langchain-ai/langchain">https://github.com/langchain-ai/langchain</a></li><li>官网地址: <a href="https://www.langchain.com/langchain">https://www.langchain.com/langchain</a></li></ul><h2 id="1-2-LangChain总体架构设计"><a href="#1-2-LangChain总体架构设计" class="headerlink" title="1.2 LangChain总体架构设计"></a>1.2 LangChain总体架构设计</h2><p><img src="/images/10.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BLangChain%E5%85%A8%E9%9D%A2%E5%89%96%E6%9E%90/image-20250324152125388.png" alt="image-20250324152125388"></p><h3 id="1-2-1-LangChain"><a href="#1-2-1-LangChain" class="headerlink" title="1.2.1 LangChain"></a>1.2.1 LangChain</h3><ul><li><strong>Model I&#x2F;O</strong>: 提供与大语言模型（LLM）交互的接口，包括文本输入输出、嵌入生成等核心功能。</li><li><strong>Chain</strong>: 将多个调用组合成链式流程，实现复杂任务处理。</li><li><strong>Agent</strong>: 基于LLM的智能体，能够动态决定调用哪些工具，如何解析响应，完成任务。</li><li><strong>Memory</strong>: 支持多轮对话的记忆能力，能保留上下文，提升交互表现。</li></ul><h3 id="1-2-2-LangSmith"><a href="#1-2-2-LangSmith" class="headerlink" title="1.2.2 LangSmith"></a>1.2.2 LangSmith</h3><p>LangSmith 是用于追踪和评估语言模型应用和智能代理表现的工具， 帮助开发者从原型阶段到生产阶段更好地监控、调试和优化流程。</p><p><strong>核心功能</strong>:</p><ul><li>数据记录与回溯，分析每一步执行结果</li><li>性能评估与指标统计</li><li>调试支持，发现异常路径</li><li>可视化流程分析</li></ul><h3 id="1-2-3-LangServe"><a href="#1-2-3-LangServe" class="headerlink" title="1.2.3 LangServe"></a>1.2.3 LangServe</h3><p>LangServe 提供了将 LangChain 中的 Chains、Agents 部署为 REST API 的能力， 方便应用通过网络调用模型服务。</p><p><strong>特点</strong>:</p><ul><li>支持快速封装和发布 API</li><li>灵活配置输入输出格式</li><li>适配多种后端框架</li><li>支持扩展与自定义路由</li></ul><h3 id="1-2-4-LangGraph"><a href="#1-2-4-LangGraph" class="headerlink" title="1.2.4 LangGraph"></a>1.2.4 LangGraph</h3><p>LangGraph 是一种图式工作流编排工具，可以协调多个 Chains、Agents、Tools 完成更复杂的任务， 包括支持循环调用、条件分支等高级流程控制。</p><p><strong>核心特性</strong>:</p><ul><li><strong>节点与边</strong>：将任务拆解为节点，节点间通过边连接，定义执行顺序</li><li><strong>动态路径</strong>：允许根据中间结果调整执行路径</li><li><strong>循环与迭代</strong>：支持重复调用，直到满足条件</li><li><strong>故障恢复</strong>：支持异常路径处理，确保流程鲁棒性</li></ul><h3 id="1-2-5-LCEL-语言"><a href="#1-2-5-LCEL-语言" class="headerlink" title="1.2.5 LCEL 语言"></a>1.2.5 LCEL 语言</h3><p>LCEL（LangChain Expression Language）是 LangChain 提供的一种表达式语言， 用于高效地定义和组合 Chains、Agents、Tools，简化复杂工作流的配置与管理。</p><p><strong>特点</strong>:</p><ul><li>直观简洁，易读易写</li><li>支持变量传递和条件逻辑</li><li>可嵌套与重用，提高开发效率</li></ul><h2 id="1-3-LangChain核心API模块"><a href="#1-3-LangChain核心API模块" class="headerlink" title="1.3 LangChain核心API模块"></a>1.3 LangChain核心API模块</h2><h3 id="1-3-1-模块介绍"><a href="#1-3-1-模块介绍" class="headerlink" title="1.3.1 模块介绍"></a>1.3.1 模块介绍</h3><h4 id="1-Model-I-O"><a href="#1-Model-I-O" class="headerlink" title="1. Model I&#x2F;O"></a>1. Model I&#x2F;O</h4><p>Model I&#x2F;O（输入输出）模块负责与大语言模型（LLM）交互，包括文本生成、对话理解等。主要组件包括：</p><ul><li><strong>Prompt</strong>：定义输入的提示词，支持动态模板。</li><li><strong>LLM</strong>：调用不同模型（如OpenAI、Hugging Face等）。</li><li><strong>Output Parsers</strong>：解析模型输出为结构化数据。</li></ul><h4 id="2-Retrieval"><a href="#2-Retrieval" class="headerlink" title="2. Retrieval"></a>2. Retrieval</h4><p>检索模块用于从外部数据源（如文档、数据库）中提取信息，结合LLM回答问题。主要组件包括：</p><ul><li><strong>Vector Stores</strong>：将文本转为向量存储，支持相似度搜索。</li><li><strong>Retrievers</strong>：提供多种检索策略，如关键字匹配、向量搜索等。</li></ul><h4 id="3-Chains"><a href="#3-Chains" class="headerlink" title="3. Chains"></a>3. Chains</h4><p>Chain模块将多个步骤串联起来，实现复杂的任务流程。例如：</p><ul><li><strong>Simple Chains</strong>：输入经过多个模型或工具逐步处理。</li><li><strong>Sequential Chains</strong>：按顺序执行每个步骤。</li><li><strong>Router Chains</strong>：根据输入动态选择不同路径。</li></ul><h4 id="4-Memory"><a href="#4-Memory" class="headerlink" title="4. Memory"></a>4. Memory</h4><p>Memory模块用于存储对话历史和上下文，提升多轮对话的连贯性。常见的内存类型有：</p><ul><li><strong>ConversationBufferMemory</strong>：保存完整对话历史。</li><li><strong>ConversationSummaryMemory</strong>：提取对话摘要，减少存储量。</li><li><strong>VectorStoreRetrieverMemory</strong>：结合检索存储上下文。</li></ul><h4 id="5-Agents"><a href="#5-Agents" class="headerlink" title="5. Agents"></a>5. Agents</h4><p>Agent模块实现了智能体系统，允许LLM动态调用工具、规划任务。核心概念包括：</p><ul><li><strong>Tools</strong>：定义可用工具，如搜索、计算、API调用。</li><li><strong>Agent Executor</strong>：控制执行流程，决定何时调用哪个工具。</li><li><strong>Agent Types</strong>：支持多种代理类型，如React、Self-Ask等。</li></ul><h4 id="6-Callbacks"><a href="#6-Callbacks" class="headerlink" title="6. Callbacks"></a>6. Callbacks</h4><p>Callbacks模块提供了事件回调机制，允许在执行过程中插入自定义逻辑，比如：</p><ul><li><strong>Logging</strong>：记录每个步骤的输入输出。</li><li><strong>Streaming</strong>：实时输出生成结果。</li><li><strong>Custom Hooks</strong>：添加自定义行为，如监控、调试等。</li></ul><h3 id="1-3-2-RAG架构"><a href="#1-3-2-RAG架构" class="headerlink" title="1.3.2 RAG架构"></a>1.3.2 RAG架构</h3><p><img src="/images/10.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BLangChain%E5%85%A8%E9%9D%A2%E5%89%96%E6%9E%90/image-20250324153940446.png" alt="image-20250324153940446"></p><h3 id="1-3-3-Agent架构"><a href="#1-3-3-Agent架构" class="headerlink" title="1.3.3 Agent架构"></a>1.3.3 Agent架构</h3><p><img src="/images/10.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BLangChain%E5%85%A8%E9%9D%A2%E5%89%96%E6%9E%90/image-20250324184728776.png" alt="image-20250324184728776"></p><h1 id="2-Model-I-O"><a href="#2-Model-I-O" class="headerlink" title="2. Model I&#x2F;O"></a>2. Model I&#x2F;O</h1><h2 id="2-1-Model-I-O介绍"><a href="#2-1-Model-I-O介绍" class="headerlink" title="2.1 Model I&#x2F;O介绍"></a>2.1 Model I&#x2F;O介绍</h2><p><img src="/images/10.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BLangChain%E5%85%A8%E9%9D%A2%E5%89%96%E6%9E%90/image-20250325004344317.png" alt="image-20250325004344317"></p><p>&emsp;&emsp;LangChain的Model I&#x2F;O模块提供了标准的、可扩展的接口实现与大语言模型的外部集成。所谓的Model I&#x2F;O，包括模型输入(Prompts)、 模型输出 (OutPuts )和模型本身(Models)。</p><blockquote><p>&emsp;&emsp;LangChain表达式语言(LCEL) 是一种声明式方法，可以轻松地将链组合在一起。你可以理解为就是类似shell里面管道符的开发方式。<br>$$<br>Prompt | Model| Output<br>$$</p></blockquote><h2 id="2-2-模型输入-Prompts"><a href="#2-2-模型输入-Prompts" class="headerlink" title="2.2 模型输入(Prompts)"></a>2.2 模型输入(Prompts)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage, SystemMessage</span><br><span class="line">messages = [SystemMessage(content=<span class="string">&quot;你是一位乐于助人的智能小助手&quot;</span>),</span><br><span class="line">            HumanMessage(content=<span class="string">&quot;你好，请你介绍一下你自己&quot;</span>),]</span><br><span class="line">            </span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line">chat = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,api_key=openai.api_key ,base_url=openai.api_base)</span><br></pre></td></tr></table></figure><ol><li>invoke 处理单条输入<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chat.invoke(messages)</span><br></pre></td></tr></table></figure></li><li>batch 处理批量输入<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">messages1 = [SystemMessage(content=<span class="string">&quot;你是一位乐于助人的智能小助手&quot;</span>),</span><br><span class="line"> HumanMessage(content=<span class="string">&quot;请帮我介绍一下什么是机器学习&quot;</span>),]</span><br><span class="line">messages2 = [SystemMessage(content=<span class="string">&quot;你是一位乐于助人的智能小助手&quot;</span>),</span><br><span class="line"> HumanMessage(content=<span class="string">&quot;请帮我介绍一下什么是AIGC&quot;</span>),]</span><br><span class="line">messages3 = [SystemMessage(content=<span class="string">&quot;你是一位乐于助人的智能小助手&quot;</span>),</span><br><span class="line"> HumanMessage(content=<span class="string">&quot;请帮我介绍一下什么是大模型技术&quot;</span>),]</span><br><span class="line">reponse = chat.batch([messages1,</span><br><span class="line">            messages2,</span><br><span class="line">            messages3,])</span><br></pre></td></tr></table></figure></li><li>stream 流式响应<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> chat.stream(messages):</span><br><span class="line">    <span class="built_in">print</span>(chunk.content, end=<span class="string">&quot;&quot;</span>, flush=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li>异步<br>&emsp;&emsp;<code>llm.invoke(...)</code>本质上是一个同步调用。在这种情况下，程序会在调用返回结果之前停止执行任何后续代码。这意味着如果<code>invoke</code>操作耗时较长，它会导致程序暂时挂起，直到操作完成。同步执行的特点：每个操作依次执行，直到当前操作完成后才开始下一个操作，从而导致总的执行时间是各个操作时间的总和。而异步调用，允许程序在等待某些操作完成时继续执行其他任务，而不是阻塞等待。这在处理I&#x2F;O操作（如网络请求、文件读写等）时特别有用，可以显著提高程序的效率和响应性。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">messages1 = [SystemMessage(content=<span class="string">&quot;你是一位乐于助人的智能小助手&quot;</span>),</span><br><span class="line"> HumanMessage(content=<span class="string">&quot;请帮我介绍一下什么是机器学习&quot;</span>),]</span><br><span class="line">reponse = <span class="keyword">await</span> chat.ainvoke(messages1)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>LangChain作为一个应用开发框架，需要集成各种不同的大模型，如上述OpenAI的GPT系列模型调用示例，通过Message数据输入规范，定义不同的role，即system、user和assistant来区分对话过程，但对于其他大模型，并不意味这一定会遵守这种输入输出及角色的定义，所以LangChain的做法是，因为Chat Model基于消息而不是原始文本，LangChain目前就抽象出来的消息类型有 AIMessage 、 HumanMessage 、 SystemMessage 、 FunctionMessage 和 ChatMessage ，但大多时候我们只需要处理 HumanMessage 、 AIMessage 和 SystemMessage，即：</p><ul><li>SystemMessage ：用于启动 AI 行为，作为输入消息序列中的第一个传入。</li><li>HumanMessage ：表示来自与聊天模型交互的人的消息。</li><li>AIMessage ：表示来自聊天模型的消息。这可以是文本，也可以是调用工具的请求。</li></ul></blockquote><h2 id="2-3-Prompt-Template"><a href="#2-3-Prompt-Template" class="headerlink" title="2.3 Prompt Template"></a>2.3 Prompt Template</h2><h3 id="2-3-1-使用str-format语言构建模版"><a href="#2-3-1-使用str-format语言构建模版" class="headerlink" title="2.3.1 使用str.format语言构建模版"></a>2.3.1 使用str.format语言构建模版</h3><p>&emsp;&emsp;在LangChain的默认设置下， <code>PromptTemplate</code> 使用 Python 的 <code>str.format()</code> 方法进行模板化。<br>&emsp;&emsp;Python的<code>str.format()</code>方法是一种字符串格式化的手段，允许我们在字符串中插入变量。使用这种方法，可以创建包含占位符的字符串模板，占位符由花括号{}标识。调用format()方法时，可以传入一个或多个参数，这些参数将被顺序替换进占位符中。str.format()提供了灵活的方式来构造字符串，支持多种格式化选项，包括数字格式化、对齐、填充、宽度设置等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单示例，直接替换</span></span><br><span class="line">greeting = <span class="string">&quot;Hello, &#123;&#125;!&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Alice&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(greeting)</span><br><span class="line"><span class="comment"># 输出: Hello, Alice!</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用位置参数</span></span><br><span class="line">info = <span class="string">&quot;Name: &#123;0&#125;, Age: &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"><span class="comment"># 输出: Name: Bob, Age: 30</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用关键字参数</span></span><br><span class="line">info = <span class="string">&quot;Name: &#123;name&#125;, Age: &#123;age&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;Charlie&quot;</span>, age=<span class="number">25</span>)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"><span class="comment"># 输出: Name: Charlie, Age: 25</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用字典解包</span></span><br><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;David&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">40</span>&#125;</span><br><span class="line">info = <span class="string">&quot;Name: &#123;name&#125;, Age: &#123;age&#125;&quot;</span>.<span class="built_in">format</span>(**person)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"><span class="comment"># 输出: Name: David, Age: 40</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"></span><br><span class="line">prompt_template = PromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;请给我一个关于&#123;topic&#125;的&#123;type&#125;解释。&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">prompt= prompt_template.<span class="built_in">format</span>(<span class="built_in">type</span>=<span class="string">&quot;详细&quot;</span>, topic=<span class="string">&quot;量子力学&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from langchain_core.prompts import ChatPromptTemplate</span><br><span class="line"></span><br><span class="line">chat_template = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        (&quot;system&quot;, &quot;你是一个有帮助的AI机器人，你的名字是&#123;name&#125;。&quot;),</span><br><span class="line">        (&quot;human&quot;, &quot;你好，最近怎么样？&quot;),</span><br><span class="line">        (&quot;ai&quot;, &quot;我很好，谢谢！&quot;),</span><br><span class="line">        (&quot;human&quot;, &quot;&#123;user_input&#125;&quot;),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">messages = chat_template.format_messages(name=&quot;小明&quot;, user_input=&quot;你叫什么名字？&quot;)</span><br><span class="line"></span><br><span class="line"># messages</span><br><span class="line"># [SystemMessage(content=&#x27;你是一个有帮助的AI机器人，你的名字是小明。&#x27;),</span><br><span class="line"># HumanMessage(content=&#x27;你好，最近怎么样？&#x27;),</span><br><span class="line"># AIMessage(content=&#x27;我很好，谢谢！&#x27;),</span><br><span class="line"># HumanMessage(content=&#x27;你叫什么名字？&#x27;)]</span><br></pre></td></tr></table></figure><h3 id="2-3-2-构造Few-Shot模版"><a href="#2-3-2-构造Few-Shot模版" class="headerlink" title="2.3.2 构造Few-Shot模版"></a>2.3.2 构造Few-Shot模版</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> (</span><br><span class="line">    ChatPromptTemplate,</span><br><span class="line">    FewShotChatMessagePromptTemplate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">examples = [</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;罗杰有五个网球，他又买了两盒网球，每盒有3个网球，请问他现在总共有多少个网球？&quot;</span>, </span><br><span class="line">     <span class="string">&quot;output&quot;</span>: <span class="string">&quot;罗杰一开始有五个网球，又购买了两盒网球，每盒3个，共购买了6个网球，因此现在总共由5+6=11个网球。因此答案是11。&quot;</span>&#125;,</span><br><span class="line">    </span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;食堂总共有23个苹果，如果他们用掉20个苹果，然后又买了6个苹果，请问现在食堂总共有多少个苹果？&quot;</span>, </span><br><span class="line">     <span class="string">&quot;output&quot;</span>: <span class="string">&quot;食堂最初有23个苹果，用掉20个，然后又买了6个，总共有23-20+6=9个苹果，答案是9。&quot;</span>&#125;,</span><br><span class="line">    </span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;杂耍者可以杂耍16个球。其中一半的球是高尔夫球，其中一半的高尔夫球是蓝色的。请问总共有多少个蓝色高尔夫球？&quot;</span>, </span><br><span class="line">     <span class="string">&quot;output&quot;</span>: <span class="string">&quot;总共有16个球，其中一半是高尔夫球，也就是8个，其中一半是蓝色的，也就是4个，答案是4个。&quot;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a prompt template used to format each individual example.</span></span><br><span class="line">example_prompt = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;ai&quot;</span>, <span class="string">&quot;&#123;output&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">few_shot_prompt = FewShotChatMessagePromptTemplate(</span><br><span class="line">    example_prompt=example_prompt,</span><br><span class="line">    examples=examples,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">final_prompt = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        few_shot_prompt,</span><br><span class="line">        (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">chain = final_prompt | chat</span><br><span class="line"></span><br><span class="line">response = chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;艾米需要4分钟才能爬到滑梯顶部，她花了1分钟才滑下来，水滑梯将在15分钟后关闭，请问在关闭之前她能滑多少次？&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-3-3-示例选择器"><a href="#2-3-3-示例选择器" class="headerlink" title="2.3.3 示例选择器"></a>2.3.3 示例选择器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts.few_shot <span class="keyword">import</span> FewShotChatMessagePromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"></span><br><span class="line">examples = [</span><br><span class="line">    <span class="comment"># 数学推理</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;question&quot;</span>: <span class="string">&quot;小明的妈妈给了他10块钱去买文具，如果一支笔3块钱，小明最多能买几支笔？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>: <span class="string">&quot;小明有10块钱，每支笔3块钱，所以他最多能买3支笔，因为3*3=9，剩下1块钱不够再买一支笔。因此答案是3支。&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;question&quot;</span>: <span class="string">&quot;一个篮球队有12名球员，如果教练想分成两个小组进行训练，每组需要有多少人？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>: <span class="string">&quot;篮球队总共有12名球员，分成两个小组，每组有12/2=6名球员。因此每组需要有6人。&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 逻辑推理</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;question&quot;</span>: <span class="string">&quot;如果所有的猫都怕水，而Tom是一只猫，请问Tom怕水吗？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>: <span class="string">&quot;根据题意，所有的猫都怕水，因此作为一只猫的Tom也会怕水。所以答案是肯定的，Tom怕水。&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;question&quot;</span>: <span class="string">&quot;在夏天，如果白天温度高于30度，夜晚就会很凉爽。今天白天温度是32度，请问今晚会凉爽吗？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>: <span class="string">&quot;根据题意，只要白天温度高于30度，夜晚就会很凉爽。今天白天的温度是32度，超过了30度，因此今晚会凉爽。&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 常识问题</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;question&quot;</span>: <span class="string">&quot;地球绕太阳转一圈需要多久？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>: <span class="string">&quot;地球绕太阳转一圈大约需要365天，也就是一年的时间。&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;question&quot;</span>: <span class="string">&quot;水的沸点是多少摄氏度？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>: <span class="string">&quot;水的沸点是100摄氏度。&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 文化常识</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;question&quot;</span>: <span class="string">&quot;中国的首都是哪里？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>: <span class="string">&quot;中国的首都是北京。&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;question&quot;</span>: <span class="string">&quot;世界上最长的河流是哪一条？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>: <span class="string">&quot;世界上最长的河流是尼罗河。&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">example_prompt = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;question&#125;&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;ai&quot;</span>, <span class="string">&quot;&#123;answer&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">few_shot_prompt = FewShotChatMessagePromptTemplate(</span><br><span class="line">    example_prompt=example_prompt,</span><br><span class="line">    examples=examples,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">final_prompt = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是一个无所不能的人，无论什么问题都可以回答。&quot;</span>),</span><br><span class="line">        few_shot_prompt,</span><br><span class="line">        (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">chain = final_prompt | chat</span><br><span class="line"></span><br><span class="line">chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;世界上最高的山峰是哪一座&quot;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上述过程，其实就对应了我们之前提到的问题，针对“世界上最高的山峰是哪一座？”这类问题，实际上只需输入与文化常识相关的提示就足够了。而如果要实现这一功能，就需要借助LangChain中的<code>example_selector</code>模块。在该模块中，有如下两个参数需要关注：</p><ul><li>example_selector ：负责为给定输入选择少数样本（以及它们返回的顺序）。它们实现了 BaseExampleSelector 接口。一个常见的例子是向量存储支持的 SemanticSimilarityExampleSelector</li><li>example_prompt ：通过其 format_messages 方法将每个示例转换为 1 条或多条消息。一个常见的示例是将每个示例转换为一条人工消息和一条人工智能消息响应，或者一条人工消息后跟一条函数调用消息。</li></ul><p>到目前为止，LangChain已经定义了以下四种示例选择器，每种都有其独特的选择机制：</p><ul><li><p><strong>Similarity</strong>：基于输入与示例之间的语义相似度来选择示例。这种方法通过比较语义内容的接近程度来确定最相关的示例。</p></li><li><p><strong>MMR (Maximum Margin Relevance)：</strong>根据输入与示例之间的最大边际相关性来挑选示例。这种方法旨在平衡相关性和多样性，通过选择既相关又能提供新信息的示例。</p></li><li><p><strong>Length</strong>：依据指定长度内能够容纳的示例数量来进行选择。这个方法简单直接，特别适用于需要控制输出长度的场景。</p></li><li><p><strong>Ngram</strong>：通过计算输入与示例之间的n-gram重叠来选择示例。这种方法重视文本表面的匹配度，适用于需要精确文本匹配的情境。</p></li></ul><ol><li><strong>SemanticSimilarityExampleSelector示例选择器</strong></li></ol><p>&emsp;&emsp;LangChain已经内置了多个预定义的示例选择器，每种选择器都有其特定的功能和适用场景。在这个案例中，我们先以<code>SemanticSimilarityExampleSelector</code>为例进行探索。这个选择器的目的是在给定的示例集合中选出与输入在语义上最接近的示例。主要的实现步骤如下：</p><ol><li><p><strong>向量化表示</strong>：首先，输入文本和示例集中的每个示例都会被转换成向量化的表示。通过Embedding模型将文本转换成高维空间中的点，其中语义上相似的文本会被映射到空间中相近的位置。</p></li><li><p><strong>计算语义相似度</strong>：一旦得到了输入和示例的向量化表示，下一步是计算输入与每个示例之间的语义相似度。通过计算向量之间的距离来实现，常见的度量方式包括余弦相似度、欧氏距离等。</p></li><li><p><strong>选择最相似的示例</strong>：基于计算出的相似度，选择一个或多个与输入最相似的示例。这个选择过程可以是简单地选取相似度最高的示例，或者根据相似度分布采取更复杂的策略，例如选择相似度高于某个阈值的所有示例。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">! pip install chromadb</span><br></pre></td></tr></table></figure><blockquote><p>Chroma的目标是帮助用户更加便捷地构建大模型应用，更加轻松的将知识（knowledge）、事实（facts）和技能（skills）等我们现实世界中的文档整合进大模型中。</p><p>Chroma提供的工具：</p><ul><li>存储文档数据和它们的元数据：store embeddings and their metadata</li><li>嵌入：embed documents and queries</li><li>搜索： search embeddings</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> SemanticSimilarityExampleSelector</span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> Chroma</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"></span><br><span class="line">to_vectorize = [<span class="string">&quot; &quot;</span>.join(example.values()) <span class="keyword">for</span> example <span class="keyword">in</span> examples]</span><br><span class="line"></span><br><span class="line">embeddings = OpenAIEmbeddings(model=<span class="string">&quot;text-embedding-ada-002&quot;</span>,api_key=openai.api_key ,base_url=openai.api_base)</span><br><span class="line">vectorstore = Chroma.from_texts(to_vectorize, embeddings, metadatas=examples)</span><br><span class="line"></span><br><span class="line">example_selector = SemanticSimilarityExampleSelector(</span><br><span class="line">    vectorstore=vectorstore,</span><br><span class="line">    k=<span class="number">2</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">example_selector.select_examples(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;内蒙古的省会是哪里&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#123;&#x27;answer&#x27;: &#x27;中国的首都是北京。&#x27;, &#x27;question&#x27;: &#x27;中国的首都是哪里？&#x27;&#125;,</span></span><br><span class="line"><span class="comment"># &#123;&#x27;answer&#x27;: &#x27;世界上最长的河流是尼罗河。&#x27;, &#x27;question&#x27;: &#x27;世界上最长的河流是哪一条？&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line">example_selector = SemanticSimilarityExampleSelector(</span><br><span class="line">    vectorstore=vectorstore,</span><br><span class="line">    k=<span class="number">2</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">example_selector.select_examples(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;罗杰有五个网球，他又买了两盒网球，每盒有3个网球，请问他现在总共有多少个网球？&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#123;&#x27;answer&#x27;: &#x27;小明有10块钱，每支笔3块钱，所以他最多能买3支笔，因为3*3=9，剩下1块钱不够再买一支笔。因此答案是3支。&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;question&#x27;: &#x27;小明的妈妈给了他10块钱去买文具，如果一支笔3块钱，小明最多能买几支笔？&#x27;&#125;,</span></span><br><span class="line"><span class="comment"># &#123;&#x27;answer&#x27;: &#x27;篮球队总共有12名球员，分成两个小组，每组有12/2=6名球员。因此每组需要有6人。&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;question&#x27;: &#x27;一个篮球队有12名球员，如果教练想分成两个小组进行训练，每组需要有多少人？&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> (</span><br><span class="line">    ChatPromptTemplate,</span><br><span class="line">    FewShotChatMessagePromptTemplate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 FewShotChatMessagePromptTemplate 对象</span></span><br><span class="line">few_shot_prompt = FewShotChatMessagePromptTemplate(</span><br><span class="line">    input_variables=[<span class="string">&quot;input&quot;</span>],           <span class="comment"># 定义输入变量的列表</span></span><br><span class="line">    example_selector=example_selector,   <span class="comment"># 使用动态的示例选择器</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义每一轮对话的格式化文本</span></span><br><span class="line">    example_prompt=ChatPromptTemplate.from_messages(   </span><br><span class="line">        [(<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;question&#125;&quot;</span>), (<span class="string">&quot;ai&quot;</span>, <span class="string">&quot;&#123;answer&#125;&quot;</span>)]</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(few_shot_prompt.<span class="built_in">format</span>(<span class="built_in">input</span>=<span class="string">&quot;罗杰有五个网球，他又买了两盒网球，每盒有3个网球，请问他现在总共有多少个网球？&quot;</span>))</span><br><span class="line"><span class="comment"># Human: 小明的妈妈给了他10块钱去买文具，如果一支笔3块钱，小明最多能买几支笔？</span></span><br><span class="line"><span class="comment"># AI: 小明有10块钱，每支笔3块钱，所以他最多能买3支笔，因为3*3=9，剩下1块钱不够再买一支笔。因此答案是3支。</span></span><br><span class="line"><span class="comment"># Human: 一个篮球队有12名球员，如果教练想分成两个小组进行训练，每组需要有多少人？</span></span><br><span class="line"><span class="comment"># AI: 篮球队总共有12名球员，分成两个小组，每组有12/2=6名球员。因此每组需要有6人。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(few_shot_prompt.<span class="built_in">format</span>(<span class="built_in">input</span>=<span class="string">&quot;月亮每天什么时候出现&quot;</span>))</span><br><span class="line"><span class="comment"># Human: 地球绕太阳转一圈需要多久？</span></span><br><span class="line"><span class="comment"># AI: 地球绕太阳转一圈大约需要365天，也就是一年的时间。</span></span><br><span class="line"><span class="comment"># Human: 在夏天，如果白天温度高于30度，夜晚就会很凉爽。今天白天温度是32度，请问今晚会凉爽吗？</span></span><br><span class="line"><span class="comment"># AI: 根据题意，只要白天温度高于30度，夜晚就会很凉爽。今天白天的温度是32度，超过了30度，因此今晚会凉爽。</span></span><br><span class="line"></span><br><span class="line">final_prompt = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是一个无所不能的人，无论什么问题都可以回答。&quot;</span>),</span><br><span class="line">        few_shot_prompt,</span><br><span class="line">        (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">chain = final_prompt | chat</span><br><span class="line"></span><br><span class="line">chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;月亮每天什么时候出现&quot;</span>&#125;)</span><br><span class="line">chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;内蒙的省会是哪座城市？&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>自定义示例选择器</strong></li></ol><p>&emsp;&emsp;LangChain的<code>ExampleSelector</code>模块封装了一系列较为通用的示例选择器，例如我们上一小节使用的<code>SemanticSimilarityExampleSelector</code>，它能够基于语义相似度来选择最相关示例的，已经能够满足多数提示示例使用场景的需求。然而，现实中根据不同的业务需求，可能会遇到这些通用选择器无法完全满足特定需求的情况。</p><p>&emsp;&emsp;在LangChain中，<code>Example Selector</code>的基本接口定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaseExampleSelector</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用于选择要包含在提示中的示例的接口。&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_examples</span>(<span class="params">self, input_variables: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">dict</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据输入选择使用哪些示例。&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_example</span>(<span class="params">self, example: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="type">Any</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向存储中添加新的示例。&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p> ABC，全称为“Abstract Base Class”（抽象基类），是Python中abc模块的一部分。在 Python 中，抽象基类用于定义其他类必须遵循的基本接口或蓝图，但不能直接实例化。其主要目的是为了提供一种形式化的方式来定义和检查子类的接口。抽象基类中，可以定义抽象方法，它没有实现（也就是说，它没有方法体）。任何继承该抽象基类的子类都必须提供这些抽象方法的实现。</p></blockquote><p>&emsp;&emsp;从上述基本接口来看，它需要定义的唯一方法是 <code>select_examples</code> 方法，其接受输入变量，然后返回示例列表。如何选择这些示例取决于每个具体的实现，也就是我们自定义的逻辑。</p><p>&emsp;&emsp;为了演示示例选择器的自定义过程，我们设计这样一个简单的场景：聊天机器人的回答选择器。在这个场景中，聊天机器人需要根据用户的输入从一个预设的回答库中选择最合适的回答。这个预设库包含了多个输入-回答对，机器人的任务是找到与用户输入在长度上最接近的问题，然后返回相应的预设回答。通过这种方法来可以帮助机器人处理未知或罕见的用户输入，通过匹配相近长度的问题来给出一个看似合适的回答，增加用户满意度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">examples = [</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好吗？&quot;</span>, <span class="string">&quot;output&quot;</span>: <span class="string">&quot;我很好，谢谢！你呢？&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你是谁？&quot;</span>, <span class="string">&quot;output&quot;</span>: <span class="string">&quot;我是一个聊天机器人。&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你能做什么？&quot;</span>, <span class="string">&quot;output&quot;</span>: <span class="string">&quot;我可以回答简单的问题，比如现在的时间或天气。&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;现在几点了？&quot;</span>, <span class="string">&quot;output&quot;</span>: <span class="string">&quot;抱歉，我无法提供实时信息。&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你喜欢音乐吗？&quot;</span>, <span class="string">&quot;output&quot;</span>: <span class="string">&quot;我不能听音乐，但我可以帮你找到音乐信息。&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;告诉我一些关于中国的事情。&quot;</span>, <span class="string">&quot;output&quot;</span>: <span class="string">&quot;中国是一个拥有悠久历史和丰富文化的国家。&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;最近有什么好玩的电影吗？&quot;</span>, <span class="string">&quot;output&quot;</span>: <span class="string">&quot;我不太清楚当前的电影信息，但我推荐你查看电影推荐网站。&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你能帮我学习编程吗？&quot;</span>, <span class="string">&quot;output&quot;</span>: <span class="string">&quot;当然，我可以提供一些学习资源和编程练习。&quot;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.example_selectors.base <span class="keyword">import</span> BaseExampleSelector</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatbotExampleSelector</span>(<span class="title class_ inherited__">BaseExampleSelector</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, examples</span>):</span><br><span class="line">        <span class="comment"># examples是一个列表，包含多个字典，每个字典都有&#x27;input&#x27;和&#x27;output&#x27;键</span></span><br><span class="line">        <span class="variable language_">self</span>.examples = examples</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_example</span>(<span class="params">self, example</span>):</span><br><span class="line">        <span class="comment"># 向examples列表添加一个输入-输出对</span></span><br><span class="line">        <span class="variable language_">self</span>.examples.append(example)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_examples</span>(<span class="params">self, input_variables</span>):</span><br><span class="line">        <span class="comment"># 此方法找到与用户输入长度最接近的示例，并返回相应的输出</span></span><br><span class="line">        new_word = input_variables[<span class="string">&quot;input&quot;</span>]</span><br><span class="line">        new_word_length = <span class="built_in">len</span>(new_word)</span><br><span class="line"></span><br><span class="line">        best_match = <span class="literal">None</span></span><br><span class="line">        <span class="comment">## 声明一个无穷大的变量</span></span><br><span class="line">        smallest_diff = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> example <span class="keyword">in</span> <span class="variable language_">self</span>.examples:</span><br><span class="line">            current_diff = <span class="built_in">abs</span>(<span class="built_in">len</span>(example[<span class="string">&quot;input&quot;</span>]) - new_word_length)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> current_diff &lt; smallest_diff:</span><br><span class="line">                smallest_diff = current_diff</span><br><span class="line">                best_match = example</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果找到了最佳匹配项，返回相应的输出；否则，返回None</span></span><br><span class="line">        <span class="keyword">return</span> [best_match] <span class="keyword">if</span> best_match <span class="keyword">else</span> []</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">example_selector = ChatbotExampleSelector(examples)</span><br><span class="line"></span><br><span class="line">example_selector.select_examples(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好呀。&quot;</span>&#125;)</span><br><span class="line"><span class="comment"># [&#123;&#x27;input&#x27;: &#x27;你好吗？&#x27;, &#x27;output&#x27;: &#x27;我很好，谢谢！你呢？&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line">example_selector.select_examples(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;我特别的喜欢打篮球&quot;</span>&#125;)</span><br><span class="line"><span class="comment"># [&#123;&#x27;input&#x27;: &#x27;你能帮我学习编程吗？&#x27;, &#x27;output&#x27;: &#x27;当然，我可以提供一些学习资源和编程练习。&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line">example_selector.select_examples(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;今天的天气很好，能推荐一个好玩的去处吗？&quot;</span>&#125;)</span><br><span class="line"><span class="comment"># [&#123;&#x27;input&#x27;: &#x27;告诉我一些关于中国的事情。&#x27;, &#x27;output&#x27;: &#x27;中国是一个拥有悠久历史和丰富文化的国家。&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line">example_selector.select_examples(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;今天的天气很好，非常适合春游，能帮我推荐一个适合全家人出游的好去处吗？&quot;</span>&#125;)</span><br><span class="line"><span class="comment"># [&#123;&#x27;input&#x27;: &#x27;告诉我一些关于中国的事情。&#x27;, &#x27;output&#x27;: &#x27;中国是一个拥有悠久历史和丰富文化的国家。&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line">example_selector.add_example(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;春天到了，大家都喜欢出去春游，但是很多地方并不是很好，请问有推荐码？&quot;</span>, <span class="string">&quot;output&quot;</span>: <span class="string">&quot;如果你喜欢春天春游的话，你可以去一些国家公园，景色非常好。&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">example_selector.select_examples(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;今天的天气很好，非常适合春游，能帮我推荐一个适合全家人出游的好去处吗？&quot;</span>&#125;)</span><br><span class="line"><span class="comment"># [&#123;&#x27;input&#x27;: &#x27;春天到了，大家都喜欢出去春游，但是很多地方并不是很好，请问有推荐码？&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;output&#x27;: &#x27;如果你喜欢春天春游的话，你可以去一些国家公园，景色非常好。&#x27;&#125;]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> (</span><br><span class="line">    ChatPromptTemplate,</span><br><span class="line">    FewShotChatMessagePromptTemplate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 FewShotChatMessagePromptTemplate 对象</span></span><br><span class="line">few_shot_prompt = FewShotChatMessagePromptTemplate(</span><br><span class="line">    input_variables=[<span class="string">&quot;input&quot;</span>],           <span class="comment"># 定义输入变量的列表</span></span><br><span class="line">    example_selector=example_selector,   <span class="comment"># 使用动态的示例选择器</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义每一轮对话的格式化文本</span></span><br><span class="line">    example_prompt=ChatPromptTemplate.from_messages(   </span><br><span class="line">        [(<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>), (<span class="string">&quot;ai&quot;</span>, <span class="string">&quot;&#123;output&#125;&quot;</span>)]</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">final_prompt = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是一个无所不能的人，无论什么问题都可以回答。&quot;</span>),</span><br><span class="line">        few_shot_prompt,</span><br><span class="line">        (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">chain = final_prompt | chat</span><br><span class="line"></span><br><span class="line">chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好呀&quot;</span>&#125;)</span><br><span class="line">chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你是谁？&quot;</span>&#125;)</span><br><span class="line">chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;今天的天气很好，非常适合春游，能帮我推荐一个适合全家人出游的好去处吗？&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-4-Output-Parsers"><a href="#2-4-Output-Parsers" class="headerlink" title="2.4 Output Parsers"></a>2.4 Output Parsers</h2><p>&emsp;&emsp;Output Parsers，即输出解析器，这个概念非常好理解，就是负责获取大模型的输出并将其转换为更合适的格式。这在应用开发中及其重要。在大多数复杂应用场景中，处理逻辑往往环环相扣，执行某项业务逻辑可能需要多次调用大模型，其中上一次的调用结果将被用于指导下一次调用的逻辑。在这种情况下，结构化的信息会比纯文本又有价值，同时这也是输出解析器的价值所在。</p><p>&emsp;&emsp;LangChain构造的输出解释器必须实现两个主要方法：</p><ul><li>Get format instructions：该方法会返回一个字符串，其中包含有关如何格式化语言模型输出的指令。</li><li>Parse：该方法会接收字符串，并将其解析为某种结构</li></ul><p>&emsp;&emsp;目前已经支持的解析格式已经包括Json、Xml、Csv以及OpenAI的Tools和Functions等多种格式，具体可看：<a href="https://python.langchain.com/docs/modules/model_io/output_parsers/">https://python.langchain.com/docs/modules/model_io/output_parsers/</a></p><ol><li>JSON parser</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.output_parsers <span class="keyword">import</span> JsonOutputParser</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_core.pydantic_v1 <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your desired data structure.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Joke</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    setup: <span class="built_in">str</span> = Field(description=<span class="string">&quot;question to set up a joke&quot;</span>)</span><br><span class="line">    punchline: <span class="built_in">str</span> = Field(description=<span class="string">&quot;answer to resolve the joke&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># And a query intented to prompt a language model to populate the data structure.</span></span><br><span class="line">joke_query = <span class="string">&quot;Tell me a joke.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up a parser + inject instructions into the prompt template.</span></span><br><span class="line">parser = JsonOutputParser(pydantic_object=Joke)</span><br><span class="line"></span><br><span class="line">prompt = PromptTemplate(</span><br><span class="line">    template=<span class="string">&quot;Answer the user query.\n&#123;format_instructions&#125;\n&#123;query&#125;\n&quot;</span>,</span><br><span class="line">    input_variables=[<span class="string">&quot;query&quot;</span>],</span><br><span class="line">    partial_variables=&#123;<span class="string">&quot;format_instructions&quot;</span>: parser.get_format_instructions()&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">chain = prompt | chat | parser</span><br><span class="line"></span><br><span class="line">chain.invoke(&#123;<span class="string">&quot;query&quot;</span>: joke_query&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-5-LangChain调用私有模型"><a href="#2-5-LangChain调用私有模型" class="headerlink" title="2.5 LangChain调用私有模型"></a>2.5 LangChain调用私有模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.chat_models <span class="keyword">import</span> ChatOllama</span><br><span class="line">ollama_llm = ChatOllama(model=<span class="string">&quot;qwen:0.5b-chat&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">messages = [</span><br><span class="line">    HumanMessage(</span><br><span class="line">        content=<span class="string">&quot;你好，请你介绍一下你自己&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">]</span><br><span class="line">chat_model_response = ollama_llm.invoke(messages)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.prompts.chat <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建模版</span></span><br><span class="line">template = <span class="string">&quot;你是一个有用的助手，可以将&#123;input_language&#125;翻译成&#123;output_language&#125;。&quot;</span></span><br><span class="line">human_template = <span class="string">&quot;&#123;text&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成对话形式的聊天信息格式</span></span><br><span class="line">chat_prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, template),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, human_template),</span><br><span class="line">])</span><br><span class="line"><span class="number">2.</span></span><br><span class="line">messages = chat_prompt.format_messages(input_language=<span class="string">&quot;中文&quot;</span>, output_language=<span class="string">&quot;英语&quot;</span>, text=<span class="string">&quot;我爱编程&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_community.chat_models <span class="keyword">import</span> ChatOllama</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化Ollama启动的模型</span></span><br><span class="line">ollama_llm = ChatOllama(model=<span class="string">&quot;qwen:0.5b-chat&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行推理</span></span><br><span class="line">result = ollama_llm.invoke(messages)</span><br><span class="line"><span class="built_in">print</span>(result.content)</span><br></pre></td></tr></table></figure><h2 id="2-6-LangChain调用外部函数"><a href="#2-6-LangChain调用外部函数" class="headerlink" title="2.6 LangChain调用外部函数"></a>2.6 LangChain调用外部函数</h2><h3 id="2-6-1-构建外部函数"><a href="#2-6-1-构建外部函数" class="headerlink" title="2.6.1 构建外部函数"></a>2.6.1 构建外部函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.tools <span class="keyword">import</span> BaseTool, StructuredTool, tool</span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">loc</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查询即时天气函数</span></span><br><span class="line"><span class="string">    :param loc: 必要参数，字符串类型，用于表示查询天气的具体城市名称，\</span></span><br><span class="line"><span class="string">    注意，中国的城市需要用对应城市的英文名称代替，例如如果需要查询北京市天气，则loc参数需要输入&#x27;Beijing&#x27;；</span></span><br><span class="line"><span class="string">    :return：OpenWeather API查询即时天气的结果，具体URL请求地址为：https://api.openweathermap.org/data/2.5/weather\</span></span><br><span class="line"><span class="string">    返回结果对象类型为解析之后的JSON格式对象，并用字符串形式进行表示，其中包含了全部重要的天气信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Step 1.构建请求</span></span><br><span class="line">    url = <span class="string">&quot;https://api.openweathermap.org/data/2.5/weather&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2.设置查询参数</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;q&quot;</span>: loc,               </span><br><span class="line">        <span class="string">&quot;appid&quot;</span>: <span class="string">&quot;your_appid&quot;</span>,    <span class="comment"># 输入API key</span></span><br><span class="line">        <span class="string">&quot;units&quot;</span>: <span class="string">&quot;metric&quot;</span>,            <span class="comment"># 使用摄氏度而不是华氏度</span></span><br><span class="line">        <span class="string">&quot;lang&quot;</span>:<span class="string">&quot;zh_cn&quot;</span>                <span class="comment"># 输出语言为简体中文</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3.发送GET请求</span></span><br><span class="line">    response = requests.get(url, params=params)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 4.解析响应</span></span><br><span class="line">    data = response.json()</span><br><span class="line">    <span class="keyword">return</span> json.dumps(data)</span><br><span class="line"></span><br><span class="line">get_weather.invoke(&#123;<span class="string">&quot;loc&quot;</span>: <span class="string">&quot;Beijing&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如上所示，使用<code>@tool</code>装饰器可以直接将<code>get_weather</code>函数转换成工具，这个工具可以用来执行调用，并处理返回的结果。同时，可以支持一些内部方法的调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">llm_with_tools = chat.bind_tools([get_weather])</span><br><span class="line">llm_with_tools.invoke(<span class="string">&quot;北京的天气怎么样？&quot;</span>)</span><br><span class="line">llm_with_tools.kwargs[<span class="string">&quot;tools&quot;</span>]</span><br><span class="line"><span class="comment"># [&#123;&#x27;type&#x27;: &#x27;function&#x27;,</span></span><br><span class="line"><span class="comment">#   &#x27;function&#x27;: &#123;&#x27;name&#x27;: &#x27;get_weather&#x27;,</span></span><br><span class="line"><span class="comment">#    &#x27;description&#x27;: &quot;查询即时天气函数\n:param loc: 必要参数，字符串类型，用于表示查询天气的具体城市名称，    注意，中国的城# 市需要用对应城市的英文名称代替，例如如果需要查询北京市天气，则loc参数需要输入&#x27;Beijing&#x27;；\n:return：OpenWeather API查询即时天气的结果，具体URL请求地址为：https://api.openweathermap.org/data/2.5/weather    返回结果对象类型为解析之后的JSON格式对象，并用字符串形式进行表示，其中包含了全部重要的天气信息&quot;,</span></span><br><span class="line"><span class="comment">#    &#x27;parameters&#x27;: &#123;&#x27;properties&#x27;: &#123;&#x27;loc&#x27;: &#123;&#125;&#125;,</span></span><br><span class="line"><span class="comment">#     &#x27;required&#x27;: [&#x27;loc&#x27;],</span></span><br><span class="line"><span class="comment">#     &#x27;type&#x27;: &#x27;object&#x27;&#125;&#125;&#125;]</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从输出上看，返回的数据中存在一个<code>additional_kwargs</code> 属性，这个属性在LangChain中是用来传递有关Messages的附加信息，主要用于特定于提供者而非通用的输入参数，在这里可能明显看到就是OpenAI 的 function_call 信息 。而上述两行代码，其本质上实现的就是我们在上面手动实现的第一轮对话过程：即接受输入的Prompt，提取关键词并正确识别需要调用的外部函数的这个过程。</p><p>&emsp;&emsp;在识别出基于输入Prompt的具体外部函数执行需求后，下一步是执行该函数并获取其数据输出。实现这一过程，将再次用到输出解析器（Output Parsers）。我们在上一课中已经介绍了输出解析器，它是一个用于解析大模型的输出并将其转换成更适用的格式的模块。</p><h3 id="2-6-2-通过LangChain构建Funcation-Calling-Chain"><a href="#2-6-2-通过LangChain构建Funcation-Calling-Chain" class="headerlink" title="2.6.2 通过LangChain构建Funcation Calling Chain"></a>2.6.2 通过LangChain构建Funcation Calling Chain</h3><p>&emsp;&emsp;那么对于Function Calling的结果应该如何解析，在上面手动实现的过程我们已经给大家介绍过了，LangChain对这一过程进行了抽象，与我们手动实现的基本逻辑保持一致。这一部分在LangChain的架构中被归类为Output Parser模块。由于已进行封装，这意味着我们可以在LangChain框架内直接调用此功能。</p><p>&emsp;&emsp;<code>JsonOutputKeyToolsParser</code>继承了<code>JsonOutputToolsParser</code>类构建工具调用模型，它会将 OpenAI 函数调用响应转换为 {“type”: “TOOL_NAME”, “args”: {…}} 字典列表调用和调用它们的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.output_parsers <span class="keyword">import</span> JsonOutputKeyToolsParser</span><br><span class="line">chain = llm_with_tools | JsonOutputKeyToolsParser(key_name=<span class="string">&#x27;get_weather&#x27;</span>, first_tool_only=<span class="literal">True</span>)</span><br><span class="line">chain.invoke(<span class="string">&quot;杭州的天气怎么样？&quot;</span>)</span><br><span class="line"><span class="comment"># &#123;&#x27;loc&#x27;: &#x27;Hangzhou&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过仅两行代码，就已经实现了根据输入（Prompt）正确匹配传入参数的功能。如果想实际调用该工具，只需将其传递给工具即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chain = llm_with_tools | JsonOutputKeyToolsParser(key_name=<span class="string">&#x27;get_weather&#x27;</span>, first_tool_only=<span class="literal">True</span>) | get_weather</span><br><span class="line">chain.invoke(<span class="string">&quot;北京现在的天气怎么样？&quot;</span>)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过这个流程，我们可以根据输入实时查询OpenWeather的API，并获取最终的查询结果。如果想进一步得到最终的回复，实现的逻辑应当是将返回的信息添加到Messages中，利用这些提示数据引导模型生成最终的回复。具体转化为代码的逻辑如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"></span><br><span class="line">chat_template = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;天气信息来源于OpenWeather API：https://api.openweathermap.org/data/2.5/weather&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;这是实时的天气数据：&#123;weather_data&#125;&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;user_input&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">chain = llm_with_tools | JsonOutputKeyToolsParser(key_name=<span class="string">&#x27;get_weather&#x27;</span>, first_tool_only=<span class="literal">True</span>) | get_weather</span><br><span class="line">weather_data = chain.invoke(<span class="string">&quot;今天杭州的天气好吗？&quot;</span>)</span><br><span class="line">messages = chat_template.format_messages(weather_data=weather_data, user_input=<span class="string">&quot;今天杭州的天气好吗？&quot;</span>)</span><br><span class="line">response = chat.invoke(messages)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;所谓自定义输出解析器想要达到的效果是：通过该解析器，将大模型输出构造为自定义格式。我们在上一步使用的LangChain预置的<code>JsonOutputKeyToolsParser</code>，该解析器返回的是OpenWeather API返回的Json数据，其形式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AIMessage</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">final_resonse</span>(<span class="params">ai_message: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    </span><br><span class="line">    data = json.loads(ai_message)</span><br><span class="line">   </span><br><span class="line">    chat_template = ChatPromptTemplate.from_messages(</span><br><span class="line">        [</span><br><span class="line">            (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;这是实时的&#123;city&#125;的天气数据，信息来源于OpenWeather API：https://api.openweathermap.org/data/2.5/weather, 详细的数据是：&#123;detail&#125;&quot;</span>,),</span><br><span class="line">            (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;请你解析该数据，以自然语言的形式回复&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成messages</span></span><br><span class="line">    messages = chat_template.format_messages(city=data[<span class="string">&quot;name&quot;</span>], detail=data)</span><br><span class="line"></span><br><span class="line">    openai_chat = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,api_key=openai.api_key ,base_url=openai.api_base)</span><br><span class="line">    response = openai_chat.invoke(messages)</span><br><span class="line">    <span class="keyword">return</span> response.content</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chain = llm_with_tools | JsonOutputKeyToolsParser(key_name=<span class="string">&#x27;get_weather&#x27;</span>, first_tool_only=<span class="literal">True</span>) | get_weather | final_resonse</span><br><span class="line">final_reponse = chain.invoke(<span class="string">&quot;北京现在的天气怎么样？&quot;</span>)</span><br><span class="line">final_reponse.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-6-3-LangChain调用开源模型的Funcation-calling"><a href="#2-6-3-LangChain调用开源模型的Funcation-calling" class="headerlink" title="2.6.3 LangChain调用开源模型的Funcation calling"></a>2.6.3 LangChain调用开源模型的Funcation calling</h3><p>&emsp;&emsp;首先我们需要明确的是，OpenAI的GPT系列模型在很大程度上影响了大模型技术发展的开发范式和标准。所以无论是Qwen、ChatGLM等模型，它们的使用方法和函数调用逻辑基本遵循OpenAI定义的规范，没有太大差异。也正是这种一致性，现在大部分的开源项目才能够通过一个较为通用的接口来接入和使用不同的模型。这种兼容性和模型间的相似性之间存在直接联系。LangChain也不例外。</p><blockquote><p>Ollama Functions：<a href="https://python.langchain.com/docs/integrations/chat/ollama_functions">https://python.langchain.com/docs/integrations/chat/ollama_functions</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    model = model.bind(</span><br><span class="line">    functions=[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_current_weather&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Get the current weather in a given location&quot;</span>,</span><br><span class="line">            <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;The city and state, &quot;</span> <span class="string">&quot;e.g. San Francisco, CA&quot;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;unit&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;enum&quot;</span>: [<span class="string">&quot;celsius&quot;</span>, <span class="string">&quot;fahrenheit&quot;</span>],</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;location&quot;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    function_call=&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_current_weather&quot;</span>&#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">! pip install langchain_experimental</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_experimental.llms.ollama_functions <span class="keyword">import</span> OllamaFunctions</span><br><span class="line">model = OllamaFunctions(</span><br><span class="line">    model=<span class="string">&quot;qwen:7b-chat&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">loc</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查询即时天气函数</span></span><br><span class="line"><span class="string">    :param loc: 必要参数，字符串类型，用于表示查询天气的具体城市名称，\</span></span><br><span class="line"><span class="string">    注意，中国的城市需要用对应城市的英文名称代替，例如如果需要查询北京市天气，则loc参数需要输入&#x27;Beijing&#x27;；</span></span><br><span class="line"><span class="string">    :return：OpenWeather API查询即时天气的结果，具体URL请求地址为：https://api.openweathermap.org/data/2.5/weather\</span></span><br><span class="line"><span class="string">    返回结果对象类型为解析之后的JSON格式对象，并用字符串形式进行表示，其中包含了全部重要的天气信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Step 1.构建请求</span></span><br><span class="line">    url = <span class="string">&quot;https://api.openweathermap.org/data/2.5/weather&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2.设置查询参数</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;q&quot;</span>: loc,               </span><br><span class="line">        <span class="string">&quot;appid&quot;</span>: open_weather_key,    <span class="comment"># 输入API key</span></span><br><span class="line">        <span class="string">&quot;units&quot;</span>: <span class="string">&quot;metric&quot;</span>,            <span class="comment"># 使用摄氏度而不是华氏度</span></span><br><span class="line">        <span class="string">&quot;lang&quot;</span>:<span class="string">&quot;zh_cn&quot;</span>                <span class="comment"># 输出语言为简体中文</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3.发送GET请求</span></span><br><span class="line">    response = requests.get(url, params=params)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 4.解析响应</span></span><br><span class="line">    data = response.json()</span><br><span class="line">    <span class="keyword">return</span> json.dumps(data)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>convert_to_openai_function</code>的功能是将外部函数转化成Json Schema的表示，使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.utils.function_calling <span class="keyword">import</span> convert_to_openai_function</span><br><span class="line">get_weather_json_schema = convert_to_openai_function(get_weather)</span><br><span class="line">functions_list = [get_weather_json_schema]</span><br><span class="line">model = model.bind(</span><br><span class="line">    functions = functions_list,</span><br><span class="line">    function_call=&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_weather&quot;</span>&#125;,</span><br><span class="line">)</span><br><span class="line">model.invoke(<span class="string">&quot;查询一下北京的天气&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.output_parsers.openai_functions <span class="keyword">import</span> JsonKeyOutputFunctionsParser</span><br><span class="line"><span class="comment"># 根据输入，调用指定的工具，并得到数据</span></span><br><span class="line">chain = model | JsonKeyOutputFunctionsParser(key_name=<span class="string">&#x27;loc&#x27;</span>, first_tool_only=<span class="literal">True</span>) | get_weather</span><br><span class="line">weather_data = chain.invoke(<span class="string">&quot;上海现在什么天气？&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(weather_data)</span><br></pre></td></tr></table></figure><p>完整流程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AIMessage</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_community.chat_models <span class="keyword">import</span> ChatOllama</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">final_resonse</span>(<span class="params">ai_message: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    </span><br><span class="line">    data = json.loads(ai_message)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">   </span><br><span class="line">    chat_template = ChatPromptTemplate.from_messages(</span><br><span class="line">        [</span><br><span class="line">            (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;这是实时的&#123;city&#125;的天气数据，信息来源于OpenWeather API：https://api.openweathermap.org/data/2.5/weather, 详细的数据是：&#123;detail&#125;&quot;</span>,),</span><br><span class="line">            (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;请你解析该数据，以自然语言的形式回复&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成messages</span></span><br><span class="line">    messages = chat_template.format_messages(city=data[<span class="string">&quot;name&quot;</span>], detail=data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化Ollama启动的模型</span></span><br><span class="line">    ollama_llm = ChatOllama(model=<span class="string">&quot;qwen:7b-chat&quot;</span>)</span><br><span class="line">    response = ollama_llm.invoke(messages)</span><br><span class="line">    <span class="keyword">return</span> response.content</span><br><span class="line">    </span><br><span class="line">model = model.bind(</span><br><span class="line">    functions = functions_list,</span><br><span class="line">    function_call=&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_weather&quot;</span>&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">chain = model | JsonKeyOutputFunctionsParser(key_name=<span class="string">&#x27;loc&#x27;</span>, first_tool_only=<span class="literal">True</span>) | get_weather | final_resonse</span><br><span class="line">final_reponse = chain.invoke(<span class="string">&quot;上海现在什么天气？&quot;</span>)</span><br><span class="line">final_reponse.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="3-Chains-1"><a href="#3-Chains-1" class="headerlink" title="3. Chains"></a>3. Chains</h1><h2 id="3-1-Chains的设计理念"><a href="#3-1-Chains的设计理念" class="headerlink" title="3.1 Chains的设计理念"></a>3.1 Chains的设计理念</h2><p>“Chain”即“链”，也就是将大模型与其他组件连接成链，借此构建AI工程应用。</p><h2 id="3-2-基于LCEC语言构建的Chains的类型"><a href="#3-2-基于LCEC语言构建的Chains的类型" class="headerlink" title="3.2 基于LCEC语言构建的Chains的类型"></a>3.2 基于LCEC语言构建的Chains的类型</h2><p>create_stuff_documents_chain<br>create_openai_fn_runnable<br>create_structured_output_runnable<br>load_query_constructor_runnable<br>create_sql_query_chain<br>create_history_aware_retriever<br>create_retrieval_chain</p><h3 id="3-2-1-create-sql-query-chain"><a href="#3-2-1-create-sql-query-chain" class="headerlink" title="3.2.1 create_sql_query_chain"></a>3.2.1 create_sql_query_chain</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install -U langchain langchain-community langchain-openai</span></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> create_sql_query_chain</span><br><span class="line"><span class="keyword">from</span> langchain_community.utilities <span class="keyword">import</span> SQLDatabase</span><br><span class="line"></span><br><span class="line">db = SQLDatabase.from_uri(<span class="string">&quot;sqlite:///Chinook.db&quot;</span>)</span><br><span class="line">llm = ChatOpenAI(model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, temperature=<span class="number">0</span>)</span><br><span class="line">chain = create_sql_query_chain(llm, db)</span><br><span class="line">response = chain.invoke(&#123;<span class="string">&quot;question&quot;</span>: <span class="string">&quot;How many employees are there&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-2-2-create-openai-fn-runnable"><a href="#3-2-2-create-openai-fn-runnable" class="headerlink" title="3.2.2 create_openai_fn_runnable"></a>3.2.2 create_openai_fn_runnable</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"><span class="keyword">from</span> langchain.chains.structured_output <span class="keyword">import</span> create_openai_fn_runnable</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个记录人的信息的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RecordPerson</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;记录关于一个人的一些识别信息。&quot;&quot;&quot;</span></span><br><span class="line">    name: <span class="built_in">str</span> = Field(..., description=<span class="string">&quot;这个人的名字&quot;</span>)</span><br><span class="line">    age: <span class="built_in">int</span> = Field(..., description=<span class="string">&quot;这个人的年龄&quot;</span>)</span><br><span class="line">    fav_food: <span class="type">Optional</span>[<span class="built_in">str</span>] = Field(<span class="literal">None</span>, description=<span class="string">&quot;这个人最喜欢的食物&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个记录狗的信息的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RecordDog</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;记录关于一只狗的一些识别信息。&quot;&quot;&quot;</span></span><br><span class="line">    name: <span class="built_in">str</span> = Field(..., description=<span class="string">&quot;这只狗的名字&quot;</span>)</span><br><span class="line">    color: <span class="built_in">str</span> = Field(..., description=<span class="string">&quot;这只狗的颜色&quot;</span>)</span><br><span class="line">    fav_food: <span class="type">Optional</span>[<span class="built_in">str</span>] = Field(<span class="literal">None</span>, description=<span class="string">&quot;这只狗最喜欢的食物&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 OpenAI API 密钥和 API 地址</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base=<span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 LLM</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建解析链并解析输入文本</span></span><br><span class="line">chain = create_openai_fn_runnable([RecordPerson, RecordDog], llm)</span><br><span class="line"><span class="built_in">print</span>(chain.invoke(<span class="string">&quot;哈里是一只胖乎乎的棕色比格犬，非常喜欢吃鸡肉。&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(chain.invoke(<span class="string">&quot;我有一个朋友，今年19岁，名字叫王大美&quot;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过上面两个例子，我们可以看到，当输入与狗相关的Prompt时（哈里是一只胖乎乎的棕色比格犬，非常喜欢吃鸡肉。），该流程会执行<code>RecordDog</code>类的功能逻辑，自动记录狗的名字和颜色。相反，若输入涉及人的信息（我有一个朋友，今年19岁，名字叫王大美），则<code>RecordPerson</code>类的逻辑将被执行，实现对人的信息的自动记录。实现对不同输入的自动识别和相应外部函数的匹配逻辑。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AIMessage</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_core.utils.function_calling <span class="keyword">import</span> convert_to_openai_function</span><br><span class="line"><span class="keyword">from</span> langchain.chains.structured_output <span class="keyword">import</span> create_openai_fn_runnable</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenWeather API 密钥（请替换为你的实际 API Key）</span></span><br><span class="line">open_weather_key = <span class="string">&quot;your_appid&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">loc: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查询即时天气</span></span><br><span class="line"><span class="string">    :param loc: 需要查询天气的城市名称（国际城市名需使用英文），如 &#x27;Beijing&#x27; 表示北京。</span></span><br><span class="line"><span class="string">    :return: 解析后的 OpenWeather API 天气数据（JSON 字符串格式）。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    url = <span class="string">&quot;https://api.openweathermap.org/data/2.5/weather&quot;</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;q&quot;</span>: loc,</span><br><span class="line">        <span class="string">&quot;appid&quot;</span>: open_weather_key,</span><br><span class="line">        <span class="string">&quot;units&quot;</span>: <span class="string">&quot;metric&quot;</span>,  <span class="comment"># 摄氏度</span></span><br><span class="line">        <span class="string">&quot;lang&quot;</span>: <span class="string">&quot;zh_cn&quot;</span>  <span class="comment"># 语言为简体中文</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, params=params)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(response.json())</span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_stock_info</span>(<span class="params">company_name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取股票信息</span></span><br><span class="line"><span class="string">    :param company_name: 需要查询股票的公司名称。</span></span><br><span class="line"><span class="string">    :return: 返回该公司股票的简要信息。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;company_name&#125;</span> 的股票今天走势非常好！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义工具列表</span></span><br><span class="line">functions = [get_weather, get_stock_info]</span><br><span class="line">openai_functions = [convert_to_openai_function(f) <span class="keyword">for</span> f <span class="keyword">in</span> functions]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 LLM</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base=<span class="string">&quot;your_api_base&quot;</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 OpenAI 可调用函数的链</span></span><br><span class="line">chain = create_openai_fn_runnable(functions, llm)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用查询天气的示例</span></span><br><span class="line"><span class="built_in">print</span>(chain.invoke(<span class="string">&quot;北京今天的天气怎么样？&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(chain.invoke(<span class="string">&quot;上海今天天气怎么样？&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用查询股票信息的示例</span></span><br><span class="line"><span class="built_in">print</span>(chain.invoke(<span class="string">&quot;亚马逊公司的今天股票如何？&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理 AI 返回消息的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">final_response</span>(<span class="params">ai_message: AIMessage</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    解析 AI 消息，选择对应的工具进行调用。</span></span><br><span class="line"><span class="string">    :param ai_message: AI 返回的消息。</span></span><br><span class="line"><span class="string">    :return: 调用相应工具并返回结果。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    tool_map = &#123;tool.name: tool <span class="keyword">for</span> tool <span class="keyword">in</span> functions&#125;  <span class="comment"># 构建工具名称映射</span></span><br><span class="line">    chosen_tool = tool_map[ai_message[<span class="string">&quot;name&quot;</span>]]  <span class="comment"># 选择工具</span></span><br><span class="line">    <span class="keyword">return</span> itemgetter(<span class="string">&quot;arguments&quot;</span>) | chosen_tool  <span class="comment"># 执行并返回结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结构化 LLM 调用</span></span><br><span class="line">structured_llm = create_openai_fn_runnable(functions, llm) | final_response</span><br><span class="line"><span class="built_in">print</span>(structured_llm.invoke(<span class="string">&quot;亚马逊公司的今天股票如何？&quot;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>itemgetter(&quot;arguments&quot;)</code>会解析经过<code>create_openai_fn_runnable([get_weather, multiply], llm)</code>输出的结果，识别到StructuredTool列表，而后如果再通过 | + 具体函数名称的方式，即可实现执行具体函数内部逻辑的功能。比如我们传入 <code>get_weather</code>，就是执行 <code>get_weather</code>函数去查询实时的天气。</p></blockquote><h2 id="3-3-传统的Chain"><a href="#3-3-传统的Chain" class="headerlink" title="3.3 传统的Chain"></a>3.3 传统的Chain</h2><table><thead><tr><th>参数名</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>callback_manager</td><td>Optional[BaseCallbackManager]</td><td>None</td><td>否</td><td>【已弃用】请改用<code>callbacks</code>。</td></tr><tr><td>callbacks</td><td>Callbacks</td><td>None</td><td>否</td><td>可选的回调处理器列表或回调管理器。在调用链的生命周期中的不同阶段被调用，从<code>on_chain_start</code>开始，到<code>on_chain_end</code>或<code>on_chain_error</code>结束。自定义链可以选择调用额外的回调方法。详见回调文档。</td></tr><tr><td>llm</td><td>Union[Runnable[LanguageModelInput, str], Runnable[LanguageModelInput, BaseMessage]]</td><td>-</td><td>是</td><td>要调用的语言模型。</td></tr><tr><td>llm_kwargs</td><td>dict</td><td>-</td><td>否</td><td>语言模型的关键字参数字典。</td></tr><tr><td>memory</td><td>Optional[BaseMemory]</td><td>None</td><td>否</td><td>可选的记忆对象。默认为None。记忆是一个在每个链的开始和结束时被调用的类。开始时，记忆加载变量并在链中传递。结束时，它保存任何返回的变量。有许多不同类型的内存，请查看内存文档获取完整目录。</td></tr><tr><td>metadata</td><td>Optional[Dict[str, Any]]</td><td>None</td><td>否</td><td>与链相关联的可选元数据。默认为None。这些元数据将与调用此链的每次调用相关联，并作为参数传递给<code>callbacks</code>中定义的处理程序。您可以使用这些来识别链的特定实例及其用例。</td></tr><tr><td>output_parser</td><td>BaseLLMOutputParser</td><td>-</td><td>否</td><td>要使用的输出解析器。默认为StrOutputParser。</td></tr><tr><td>prompt</td><td>BasePromptTemplate</td><td>-</td><td>是</td><td>要使用的提示对象。</td></tr><tr><td>return_final_only</td><td>bool</td><td>True</td><td>否</td><td>是否只返回最终解析结果。默认为True。如果为False，将返回关于生成的额外信息。</td></tr><tr><td>tags</td><td>Optional[List[str]]</td><td>None</td><td>否</td><td>与链相关联的可选标签列表。默认为None。这些标签将与调用此链的每次调用相关联，并作为参数传递给<code>callbacks</code>中定义的处理程序。您可以使用这些来识别链的特定实例及其用例。</td></tr><tr><td>verbose</td><td>bool</td><td>False</td><td>否</td><td>是否以详细模式运行。在详细模式下，一些中间日志将被打印到控制台。默认使用全局详细设置，可通过<code>langchain.globals.get_verbose()</code>访问。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_core.output_parsers.transform <span class="keyword">import</span> BaseTransformOutputParser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 LLM（请确保 API Key 已正确配置）</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base=<span class="string">&quot;your_api_base&quot;</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建聊天提示模板</span></span><br><span class="line">chat_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;给我讲一个 &#123;adjective&#125; 笑话&quot;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 LLMChain 并调用模型</span></span><br><span class="line">llm_chain = LLMChain(llm=llm, prompt=chat_template, verbose=<span class="literal">True</span>)</span><br><span class="line">response = llm_chain.invoke(&#123;<span class="string">&quot;adjective&quot;</span>: <span class="string">&quot;上班的&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义输出解析器，将字符串解析为 JSON 对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrToJsonOutputParser</span>(<span class="title class_ inherited__">BaseTransformOutputParser</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解析字符串为 JSON 格式的输出解析器。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, text: <span class="built_in">str</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;description&quot;</span>: text&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结合解析器的 LLMChain</span></span><br><span class="line">llm_chain = LLMChain(</span><br><span class="line">    llm=llm,</span><br><span class="line">    prompt=chat_template,</span><br><span class="line">    output_parser=StrToJsonOutputParser(),</span><br><span class="line">    verbose=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line">response = llm_chain.invoke(&#123;<span class="string">&quot;adjective&quot;</span>: <span class="string">&quot;上班的&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 system 角色的聊天模板</span></span><br><span class="line">chat_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是一位 &#123;area&#125; 领域具备丰富经验的高端技术人才&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;给我讲一个 &#123;adjective&#125; 笑话&quot;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并调用包含 system 角色的 LLMChain</span></span><br><span class="line">llm_chain = LLMChain(llm=llm, prompt=chat_template, verbose=<span class="literal">True</span>)</span><br><span class="line">response = llm_chain.invoke(&#123;<span class="string">&quot;area&quot;</span>: <span class="string">&quot;互联网&quot;</span>, <span class="string">&quot;adjective&quot;</span>: <span class="string">&quot;上班的&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><h2 id="3-4-SequentialChain"><a href="#3-4-SequentialChain" class="headerlink" title="3.4 SequentialChain"></a>3.4 SequentialChain</h2><p>&emsp;&emsp;SequentialChain，即顺序链。实现的是将一个模块的输出作为另一个模块的输入，允许用户连接多个链并将它们组合成执行特定场景的流水线（Pipeline），主要实现了两种：</p><ul><li>SimpleSequentialChain：最简单顺序链，可以实现单输入 - &gt; 输出的过程，其前一个模块的输出是下一个模块的输入；<br>                                    API:<a href="https://api.python.langchain.com/en/latest/chains/langchain.chains.sequential.SimpleSequentialChain.html#langchain.chains.sequential.SimpleSequentialChain">https://api.python.langchain.com/en/latest/chains/langchain.chains.sequential.SimpleSequentialChain.html#langchain.chains.sequential.SimpleSequentialChain</a></li><li>SequentialChain：最通用的顺序链，允许多个输入&#x2F;输出；<br>API:<a href="https://api.python.langchain.com/en/latest/chains/langchain.chains.sequential.SequentialChain.html#langchain.chains.sequential.SequentialChain">https://api.python.langchain.com/en/latest/chains/langchain.chains.sequential.SequentialChain.html#langchain.chains.sequential.SequentialChain</a></li></ul><h3 id="3-4-1-SimpleSequentialChain"><a href="#3-4-1-SimpleSequentialChain" class="headerlink" title="3.4.1 SimpleSequentialChain"></a>3.4.1 SimpleSequentialChain</h3><p><img src="/images/10.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BLangChain%E5%85%A8%E9%9D%A2%E5%89%96%E6%9E%90/image-20250327071710193.png" alt="image-20250327071710193"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain, SimpleSequentialChain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 LLM（请确保 API Key 已正确配置）</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base=<span class="string">&quot;your_api_base&quot;</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 ChainA 的 Prompt，详细解释知识点</span></span><br><span class="line">chainA_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是一位精通各领域知识的知名教授&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;请你尽可能详细的解释一下：&#123;knowledge&#125;&quot;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 ChainA（详细解释）</span></span><br><span class="line">chainA_chains = LLMChain(</span><br><span class="line">    llm=llm,</span><br><span class="line">    prompt=chainA_template,</span><br><span class="line">    verbose=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 ChainB 的 Prompt，总结重要信息</span></span><br><span class="line">chainB_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你非常善于提取文本中的重要信息，并做出简短的总结&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;这是针对一个提问完整的解释说明内容：&#123;description&#125;&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;请你根据上述说明，尽可能简短的输出重要的结论，请控制在20个字以内&quot;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 ChainB（总结信息）</span></span><br><span class="line">chainB_chains = LLMChain(</span><br><span class="line">    llm=llm,</span><br><span class="line">    prompt=chainB_template,</span><br><span class="line">    verbose=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 SimpleSequentialChain，将 ChainA 的输出作为 ChainB 的输入</span></span><br><span class="line">full_chain = SimpleSequentialChain(chains=[chainA_chains, chainB_chains], verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用完整的 Chain 进行处理</span></span><br><span class="line">response = full_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;什么是LangChain？&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;在这个过程中，因为<code>SimpleSequentialChain</code>定义的是顺序链，所以在<code>chains</code>参数中传递的列表要按照顺序来进行传入，即LLMChain A 要在LLMChain B之前。同时，在调用时，不再使用LLMChain A 中定义的<code>&#123;knowledge&#125;</code> 参数，也不是LLMChain B中定义的<code>&#123;description&#125;</code>参数，而是要使用 <code>input</code>进行变量的传递。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleSequentialChain</span>(<span class="title class_ inherited__">Chain</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simple chain where the outputs of one step feed directly into next.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    chains: <span class="type">List</span>[Chain]</span><br><span class="line">    strip_outputs: <span class="built_in">bool</span> = <span class="literal">False</span></span><br><span class="line">    input_key: <span class="built_in">str</span> = <span class="string">&quot;input&quot;</span>  <span class="comment">#: :meta private:</span></span><br><span class="line">    output_key: <span class="built_in">str</span> = <span class="string">&quot;output&quot;</span>  <span class="comment">#: :meta private:</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="3-4-2-SequentialChain"><a href="#3-4-2-SequentialChain" class="headerlink" title="3.4.2 SequentialChain"></a>3.4.2 SequentialChain</h3><p><img src="/images/10.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BLangChain%E5%85%A8%E9%9D%A2%E5%89%96%E6%9E%90/image-20250327072138438.png" alt="image-20250327072138438"></p><p>&emsp;&emsp;其对应的参数说明如下：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>callback_manager</td><td>Optional[BaseCallbackManager]</td><td>否</td><td>None</td><td>[已弃用] 使用callbacks代替。</td></tr><tr><td>callbacks</td><td>Callbacks</td><td>否</td><td>None</td><td>可选的回调处理程序列表（或回调管理器）。默认为None。回调处理程序在调用链的整个生命周期中被调用，从on_chain_start开始，到on_chain_end或on_chain_error结束。每个自定义链可以选择性地调用额外的回调方法，详见回调文档。</td></tr><tr><td>chains</td><td>List[Chain]</td><td>是</td><td>-</td><td>需要的链列表。</td></tr><tr><td>input_variables</td><td>List[str]</td><td>是</td><td>-</td><td>需要的输入变量列表。</td></tr><tr><td>memory</td><td>Optional[BaseMemory]</td><td>否</td><td>None</td><td>可选的内存对象。默认为None。内存是在每个链的开始和结束时被调用的类。在开始时，内存加载变量并在链中传递它们。在结束时，它保存任何返回的变量。有许多不同类型的内存，请查阅内存文档了解完整目录。</td></tr><tr><td>metadata</td><td>Optional[Dict[str, Any]]</td><td>否</td><td>None</td><td>与链相关联的可选元数据。默认为None。这些元数据将与对这个链的每次调用关联，并作为参数传递给在callbacks中定义的处理程序。您可以使用这些信息来识别链的特定实例及其用例。</td></tr><tr><td>return_all</td><td>bool</td><td>否</td><td>False</td><td>是否返回所有输出。</td></tr><tr><td>tags</td><td>Optional[List[str]]</td><td>否</td><td>None</td><td>与链关联的可选标签列表。默认为None。这些标签将与对这个链的每次调用关联，并作为参数传递给在callbacks中定义的处理程序。您可以使用这些来识别链的特定实例及其用例。</td></tr><tr><td>verbose</td><td>bool [Optional]</td><td>否</td><td>通过langchain.globals.get_verbose()获取的全局verbose值</td><td>是否以详细模式运行。在详细模式下，一些中间日志将被打印到控制台。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain, SequentialChain</span><br><span class="line"><span class="comment"># 定义 LLM（请确保 API Key 已正确配置）</span></span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base=<span class="string">&quot;your_api_base&quot;</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 schainA 的 Prompt，详细解释知识点并举例</span></span><br><span class="line"></span><br><span class="line">schainA_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是一位精通各领域知识的知名教授&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;请你先尽可能详细的解释一下：&#123;knowledge&#125;，并且&#123;action&#125;&quot;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 schainA（详细解释）</span></span><br><span class="line"></span><br><span class="line">schainA_chains = LLMChain(</span><br><span class="line">    llm=llm,</span><br><span class="line">    prompt=schainA_template,</span><br><span class="line">    verbose=<span class="literal">True</span>,</span><br><span class="line">    output_key=<span class="string">&quot;schainA_chains_key&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 schainB 的 Prompt，提取关键信息并总结</span></span><br><span class="line"></span><br><span class="line">schainB_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你非常善于提取文本中的重要信息，并做出简短的总结&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;这是针对一个提问完整的解释说明内容：&#123;schainA_chains_key&#125;&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;请你根据上述说明，尽可能简短的输出重要的结论，请控制在30个字以内&quot;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 schainB（总结信息）</span></span><br><span class="line"></span><br><span class="line">schainB_chains = LLMChain(</span><br><span class="line">    llm=llm,</span><br><span class="line">    prompt=schainB_template,</span><br><span class="line">    verbose=<span class="literal">True</span>,</span><br><span class="line">    output_key=<span class="string">&#x27;schainB_chains_key&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 SequentialChain，将 schainA 的输出作为 schainB 的输入</span></span><br><span class="line"></span><br><span class="line">Seq_chain = SequentialChain(</span><br><span class="line">    chains=[schainA_chains, schainB_chains],</span><br><span class="line">    input_variables=[<span class="string">&quot;knowledge&quot;</span>, <span class="string">&quot;action&quot;</span>],</span><br><span class="line">    output_variables=[<span class="string">&quot;schainA_chains_key&quot;</span>, <span class="string">&quot;schainB_chains_key&quot;</span>],</span><br><span class="line">    verbose=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用完整的 Chain 进行处理</span></span><br><span class="line"></span><br><span class="line">response = Seq_chain.invoke(&#123;</span><br><span class="line">    <span class="string">&quot;knowledge&quot;</span>: <span class="string">&quot;中国足球为什么踢得烂&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span>: <span class="string">&quot;举一个实际的例子&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="built_in">print</span>(response[<span class="string">&quot;schainA_chains_key&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(response[<span class="string">&quot;schainB_chains_key&quot;</span>])</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;所以我们在多变量的情境下，需要去定义第一个LLMChain的输出变量，这可以通过<code>output_key</code>参数来定义。如上所示，<code>schainA_chains</code>的响应结果会存储在<code>schainA_chains_key</code>中，作为下游，让<code>schainB_chains</code>去接收这部分内容，在这个过程中，就能发现<code>schainB_chains</code>通过<code>schainA_chains</code>的输出Key：<code>schainA_chains_key</code>继续进行的推理，以此实现对多输入的串联。而同时，对于每一个链，我们可以都定义<code>output_key</code>。</p></blockquote><h2 id="3-5-RouterChain"><a href="#3-5-RouterChain" class="headerlink" title="3.5 RouterChain"></a>3.5 RouterChain</h2><p><img src="/images/10.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BLangChain%E5%85%A8%E9%9D%A2%E5%89%96%E6%9E%90/image-20250327151331513.png" alt="image-20250327151331513"></p><p>&emsp;&emsp;<code>RouterChain</code>，我们将其定位为：可定制的链路系统。它能提供的是：通过一个统一的入口接收用户的输入，自动分析用户的需求，然后引导到最适合的链中执行，获取响应并返回最终结果。</p><p>API:<a href="https://api.python.langchain.com/en/latest/chains/langchain.chains.router.base.RouterChain.html#langchain.chains.router.base.RouterChain">https://api.python.langchain.com/en/latest/chains/langchain.chains.router.base.RouterChain.html#langchain.chains.router.base.RouterChain</a></p><table><thead><tr><th>类名</th><th>描述</th></tr></thead><tbody><tr><td>Route</td><td>创建新的路由实例，包括目的地和下一步输入。</td></tr><tr><td>RouterChain</td><td>一个输出目的地链名称和其输入的链。</td></tr><tr><td>LLMRouterChain</td><td>一个使用LLM链进行路由选择的路由链。</td></tr><tr><td>MultiPromptChain</td><td>一个多路由链，使用LLM路由链在多个提示之间进行选择。</td></tr><tr><td>MultiRouteChain</td><td>使用单一链条将输入路由到多个候选链中的一个。</td></tr><tr><td>RouterOutputParser</td><td>用于解析多提示链中路由链输出的解析器。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置OpenAI API密钥和自定义API地址</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base=<span class="string">&quot;your_api_base&quot;</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 天气查询链 ========== #</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">loc: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查询实时天气数据</span></span><br><span class="line"><span class="string">    :param loc: 城市名称，注意中国城市需用英文，例如&#x27;Beijing&#x27;</span></span><br><span class="line"><span class="string">    :return: 天气数据的JSON字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    url = <span class="string">&quot;https://api.openweathermap.org/data/2.5/weather&quot;</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;q&quot;</span>: loc,</span><br><span class="line">        <span class="string">&quot;appid&quot;</span>: <span class="string">&quot;your_appid&quot;</span>,  <span class="comment"># 替换为你的OpenWeather API密钥</span></span><br><span class="line">        <span class="string">&quot;units&quot;</span>: <span class="string">&quot;metric&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lang&quot;</span>: <span class="string">&quot;zh_cn&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, params=params)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(response.json(), ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建天气数据分析的LangChain模板</span></span><br><span class="line">weather_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;您是一位精通气象数据分析的教授，具有10年以上经验。&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;这是实时天气数据：&#123;input&#125;&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;请您根据上述数据提供合理的出行建议。&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成天气查询链</span></span><br><span class="line">weather_chain = LLMChain(llm=llm, prompt=weather_template, verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 股票查询链 ========== #</span></span><br><span class="line">stock_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是一个智能股票查询助手&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;这是你的指令：&#123;input&#125;&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;请你根据指令迅速完成查询。&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成股票查询链</span></span><br><span class="line">stock_chain = LLMChain(llm=llm, prompt=stock_template, verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_stock_info</span>(<span class="params">company_name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查询股票信息（此处仅模拟实际调用）</span></span><br><span class="line"><span class="string">    :param company_name: 公司名称</span></span><br><span class="line"><span class="string">    :return: 模拟的股票查询结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;company_name&#125;</span>的股票今天走势良好！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标链字典</span></span><br><span class="line">destination_chains = &#123;</span><br><span class="line">    <span class="string">&quot;weather&quot;</span>: weather_chain,</span><br><span class="line">    <span class="string">&quot;stock&quot;</span>: stock_chain</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">destinations = [</span><br><span class="line">    <span class="string">&#x27;weather: 用于回答天气问题&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;stock: 用于回答股票问题&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 路由链 ========== #</span></span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.chains.router.llm_router <span class="keyword">import</span> RouterOutputParser, LLMRouterChain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化路由模板</span></span><br><span class="line">MULTI_PROMPT_ROUTER_TEMPLATE = <span class="string">&quot;&quot;&quot;\</span></span><br><span class="line"><span class="string">给定一个原始文本输入到大语言模型，请选择最适合该输入的大模型提示模版。\</span></span><br><span class="line"><span class="string">您将获得可用提示的名称和对于该提示最适合什么的描述。\</span></span><br><span class="line"><span class="string">如果您认为修改原始输入最终会导致语言模型的更好响应，您也可以对原始输入进行修改。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;&lt; FORMATTING &gt;&gt;</span></span><br><span class="line"><span class="string">返回一个Markdown代码片段，其中包含一个格式化如下的JSON对象：</span></span><br><span class="line"><span class="string">```json</span></span><br><span class="line"><span class="string">&#123;&#123;&#123;&#123;</span></span><br><span class="line"><span class="string">    &quot;destination&quot;: string \\ 使用的提示名称或就使用默认，即 &quot;DEFAULT&quot;</span></span><br><span class="line"><span class="string">    &quot;next_inputs&quot;: string \\ 可能修改过的原始输入版本</span></span><br><span class="line"><span class="string">&#125;&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">记住：&quot;destination&quot; 必须是下面指定的候选提示名称之一，或者如果输入不适合任何候选提示，可以是 &quot;DEFAULT&quot;。</span></span><br><span class="line"><span class="string">记住：&quot;next_inputs&quot; 如果您认为不需要任何修改，可以是原始输入。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;&lt; CANDIDATE PROMPTS &gt;&gt;</span></span><br><span class="line"><span class="string">&#123;destinations&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;&lt; INPUT &gt;&gt;</span></span><br><span class="line"><span class="string">&#123;&#123;input&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;&lt; OUTPUT (必须在响应的开始处包含 ```json) &gt;&gt;</span></span><br><span class="line"><span class="string">&lt;&lt; OUTPUT (必须以 ``` 结束) &gt;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">router_template = MULTI_PROMPT_ROUTER_TEMPLATE.<span class="built_in">format</span>(destinations=<span class="string">&quot;\n&quot;</span>.join(destinations))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成路由提示模板</span></span><br><span class="line">router_prompt = PromptTemplate(</span><br><span class="line">    template=router_template,</span><br><span class="line">    input_variables=[<span class="string">&quot;input&quot;</span>],</span><br><span class="line">    output_parser=RouterOutputParser()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成路由链</span></span><br><span class="line">router_chain = LLMRouterChain.from_llm(llm, router_prompt, verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 默认通用聊天链 ========== #</span></span><br><span class="line">chat_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是一位乐于助人的AI助手，请给出最优秀的回复&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>)</span><br><span class="line">])</span><br><span class="line">chat_chain = LLMChain(llm=llm, prompt=chat_template, verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 多任务路由链 ========== #</span></span><br><span class="line"><span class="keyword">from</span> langchain.chains.router <span class="keyword">import</span> MultiPromptChain</span><br><span class="line"></span><br><span class="line">final_chain = MultiPromptChain(</span><br><span class="line">    router_chain=router_chain,</span><br><span class="line">    destination_chains=destination_chains,</span><br><span class="line">    default_chain=chat_chain,</span><br><span class="line">    verbose=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 测试调用 ========== #</span></span><br><span class="line">weather_data = get_weather(<span class="string">&quot;Beijing&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(final_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;这是我刚才得到的天气数据%s，我适合出去玩吗？&quot;</span> % weather_data&#125;))</span><br><span class="line"><span class="built_in">print</span>(final_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;帮我查询一下今天亚马逊的股票&quot;</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(final_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好呀，请你介绍一下你自己&quot;</span>&#125;))</span><br></pre></td></tr></table></figure><blockquote><p><code>ReAct</code>通过思维链（CoT）的形式引导大模型进入思考过程从而执行外部工具的识别。对于链路的路由来说，也是采取相似的策略，这里可以使用特定的提示模板来引导大模型进入思考如何选择合适的链路的过程。而这个路由的提示模版，LangChain中给出了一个解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from langchain.chains.router.multi_prompt_prompt import MULTI_PROMPT_ROUTER_TEMPLATE</span><br><span class="line">print(MULTI_PROMPT_ROUTER_TEMPLATE)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Given a raw text input to a language model select the model prompt best suited for the input. You will be given the names of the available prompts and a description of what the prompt is best suited for. You may also revise the original input if you think that revising it will ultimately lead to a better response from the language model.</p><p>&lt;&lt; FORMATTING &gt;&gt;<br>Return a markdown code snippet with a JSON object formatted to look like:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span> string \ name of the prompt to use or <span class="string">&quot;DEFAULT&quot;</span></span><br><span class="line">    <span class="attr">&quot;next_inputs&quot;</span><span class="punctuation">:</span> string \ a potentially modified version of the original input</span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>REMEMBER: “destination” MUST be one of the candidate prompt names specified below OR it can be “DEFAULT” if the input is not well suited for any of the candidate prompts.<br>REMEMBER: “next_inputs” can just be the original input if you don’t think any modifications are needed.</p><p>&lt;&lt; CANDIDATE PROMPTS &gt;&gt;<br>{destinations}</p><p>&lt;&lt; INPUT &gt;&gt;</p><p>&lt;&lt; OUTPUT (must include <code>json at the start of the response) &gt;&gt; &lt;&lt; OUTPUT (must end with </code>) &gt;&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 3.6 Chains功能实战</span><br><span class="line"></span><br><span class="line">![image-20250327170535918](/images/10.Agent实战技能之LangChain全面剖析/image-20250327170535918.png)</span><br><span class="line"></span><br><span class="line">~~~python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import json</span><br><span class="line">from typing import List</span><br><span class="line"></span><br><span class="line">import openai</span><br><span class="line">from langchain.chains import LLMChain, SimpleSequentialChain</span><br><span class="line">from langchain.chains.openai_functions.base import create_openai_fn_chain</span><br><span class="line">from langchain.chains.router import MultiPromptChain, LLMRouterChain</span><br><span class="line">from langchain.chains.router.llm_router import RouterOutputParser</span><br><span class="line">from langchain.prompts import PromptTemplate</span><br><span class="line">from langchain_core.output_parsers import BaseGenerationOutputParser</span><br><span class="line">from langchain_core.outputs import Generation</span><br><span class="line">from langchain_core.prompts import ChatPromptTemplate</span><br><span class="line">from langchain_core.tools import tool</span><br><span class="line">from langchain_openai import ChatOpenAI</span><br><span class="line"></span><br><span class="line"># 设置 OpenAI API 相关信息</span><br><span class="line">openai.api_key = &quot;your_api_key&quot;</span><br><span class="line">openai.api_base = &quot;your_api_base&quot;</span><br><span class="line">llm = ChatOpenAI(model_name=&quot;gpt-3.5-turbo&quot;, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ===================== 工具函数定义 =====================</span><br><span class="line">@tool</span><br><span class="line">def get_weather(loc: str) -&gt; str:</span><br><span class="line">   &quot;&quot;&quot;</span><br><span class="line">   模拟天气查询函数，返回固定的天气数据。</span><br><span class="line">   :param loc: 城市名称</span><br><span class="line">   :return: JSON格式的天气数据</span><br><span class="line">   &quot;&quot;&quot;</span><br><span class="line">   mock_response = &#123;</span><br><span class="line">       &quot;city&quot;: loc,</span><br><span class="line">       &quot;weather&quot;: &quot;Sunny&quot;,</span><br><span class="line">       &quot;temperature&quot;: 25,</span><br><span class="line">       &quot;humidity&quot;: 60,</span><br><span class="line">       &quot;wind_speed&quot;: 5,</span><br><span class="line">       &quot;description&quot;: &quot;Clear sky with mild breeze&quot;</span><br><span class="line">   &#125;</span><br><span class="line">   return json.dumps(mock_response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@tool</span><br><span class="line">def getStockInfor(companyName: str) -&gt; str:</span><br><span class="line">   &quot;&quot;&quot;</span><br><span class="line">   获取指定公司股票的市场走势。</span><br><span class="line">   :param companyName: 公司名称。</span><br><span class="line">   :return: 股票走势信息。</span><br><span class="line">   &quot;&quot;&quot;</span><br><span class="line">   return f&quot;&#123;companyName&#125;的股票今天走势非常好！&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@tool</span><br><span class="line">def getStockPrice(stockCode: str) -&gt; str:</span><br><span class="line">   &quot;&quot;&quot;</span><br><span class="line">   获取指定股票代码的股票价格。</span><br><span class="line">   :param stockCode: 股票代码。</span><br><span class="line">   :return: 股票价格。</span><br><span class="line">   &quot;&quot;&quot;</span><br><span class="line">   return &quot;15元&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 记录可用的工具函数</span><br><span class="line">weather_function_list = [get_weather]</span><br><span class="line">stock_function_list = [getStockInfor, getStockPrice]</span><br><span class="line"></span><br><span class="line"># ===================== 天气查询处理链 =====================</span><br><span class="line">weather_chat_template = ChatPromptTemplate.from_messages([</span><br><span class="line">   (&quot;system&quot;, &quot;你是一个能够查询天气的AI小助手&quot;),</span><br><span class="line">   (&quot;human&quot;, &quot;用户问题：&#123;input&#125;&quot;),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class WeatherOutputParser(BaseGenerationOutputParser[str]):</span><br><span class="line">   def parse_result(self, result: List[Generation]):</span><br><span class="line">       if result[0].text:</span><br><span class="line">           return result[0].text</span><br><span class="line">       function_call = result[0].message.additional_kwargs[&quot;function_call&quot;]</span><br><span class="line">       func_map = &#123;func.name: func for func in weather_function_list&#125;</span><br><span class="line">       chosen_tool = func_map[function_call[&quot;name&quot;]]</span><br><span class="line">       arguments = json.loads(function_call[&quot;arguments&quot;])</span><br><span class="line">       return chosen_tool.invoke(arguments)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_weather_data_chain = create_openai_fn_chain(</span><br><span class="line">   llm=llm,</span><br><span class="line">   prompt=weather_chat_template,</span><br><span class="line">   functions=weather_function_list,</span><br><span class="line">   output_parser=WeatherOutputParser(),</span><br><span class="line">   output_key=&quot;weather_data&quot;,</span><br><span class="line">   verbose=True</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">analyse_weather_template = ChatPromptTemplate.from_messages([</span><br><span class="line">   (&quot;system&quot;, &quot;你是一位天气数据分析专家&quot;),</span><br><span class="line">   (&quot;human&quot;, &quot;实时天气数据：&#123;input&#125;&quot;),</span><br><span class="line">   (&quot;human&quot;, &quot;请根据上述数据：1. 总结天气状况 2. 给出穿衣建议 3. 出行建议&quot;)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">analyse_weather_chain = LLMChain(llm=llm, prompt=analyse_weather_template, verbose=True)</span><br><span class="line">full_weather_chain = SimpleSequentialChain(chains=[get_weather_data_chain, analyse_weather_chain], output_key=&quot;text&quot;,</span><br><span class="line">                                          verbose=True)</span><br><span class="line"></span><br><span class="line"># ===================== 股票查询处理链 =====================</span><br><span class="line">stock_template = ChatPromptTemplate.from_messages([</span><br><span class="line">   (&quot;system&quot;, &quot;你是一位股票方面的AI小助手，工作效率极高。&quot;),</span><br><span class="line">   (&quot;human&quot;, &quot;这是你接收到的指令：&#123;input&#125;&quot;),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class StockOutputParser(BaseGenerationOutputParser[str]):</span><br><span class="line">   def parse_result(self, result: List[Generation]):</span><br><span class="line">       if result[0].text:</span><br><span class="line">           return result[0].text</span><br><span class="line">       function_call = result[0].message.additional_kwargs[&quot;function_call&quot;]</span><br><span class="line">       func_map = &#123;func.name: func for func in stock_function_list&#125;</span><br><span class="line">       chosen_tool = func_map[function_call[&quot;name&quot;]]</span><br><span class="line">       arguments = json.loads(function_call[&quot;arguments&quot;])</span><br><span class="line">       return chosen_tool.invoke(arguments)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">execute_stock_chain = create_openai_fn_chain(</span><br><span class="line">   llm=llm,</span><br><span class="line">   prompt=stock_template,</span><br><span class="line">   functions=stock_function_list,</span><br><span class="line">   verbose=True,</span><br><span class="line">   output_parser=StockOutputParser(),</span><br><span class="line">   output_key=&quot;stock_result&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">notify_stock_template = ChatPromptTemplate.from_messages([</span><br><span class="line">   (&quot;system&quot;, &quot;你是一位智能股票信息管理小助手&quot;),</span><br><span class="line">   (&quot;human&quot;, &quot;执行结果：&#123;stock_result&#125;&quot;),</span><br><span class="line">   (&quot;human&quot;, &quot;请你总结一下当前的股票情况&quot;)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">notify_stock_chain = LLMChain(llm=llm, prompt=notify_stock_template, verbose=True)</span><br><span class="line">full_stock_chain = SimpleSequentialChain(chains=[execute_stock_chain, notify_stock_chain], output_key=&quot;text&quot;,</span><br><span class="line">                                        verbose=True)</span><br><span class="line"></span><br><span class="line"># ===================== AI 聊天功能 =====================</span><br><span class="line">chat_template = ChatPromptTemplate.from_messages([</span><br><span class="line">   (&quot;system&quot;, &quot;你是一位乐于助人的AI小助手。请根据用户输入的问题，给出最优秀的回复&quot;),</span><br><span class="line">   (&quot;human&quot;, &quot;&#123;input&#125;&quot;),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">chat_chain = LLMChain(llm=llm, prompt=chat_template, verbose=True)</span><br><span class="line"></span><br><span class="line"># ===================== 路由系统 =====================</span><br><span class="line">destination_chains = &#123;&quot;weather&quot;: full_weather_chain, &quot;stock&quot;: full_stock_chain&#125;</span><br><span class="line">MULTI_PROMPT_ROUTER_TEMPLATE = &quot;&quot;&quot;\</span><br><span class="line">给定一个原始文本输入到大语言模型，请选择最适合该输入的大模型提示模版。\</span><br><span class="line">您将获得可用提示的名称和对于该提示最适合什么的描述。\</span><br><span class="line">如果您认为修改原始输入最终会导致语言模型的更好响应，您也可以对原始输入进行修改。</span><br><span class="line"></span><br><span class="line">&lt;&lt; FORMATTING &gt;&gt;</span><br><span class="line">返回一个Markdown代码片段，其中包含一个格式化如下的JSON对象：</span><br><span class="line">```json</span><br><span class="line">&#123;&#123;&#123;&#123;</span><br><span class="line">   &quot;destination&quot;: string \\ 使用的提示名称或就使用默认，即 &quot;DEFAULT&quot;</span><br><span class="line">   &quot;next_inputs&quot;: string \\ 可能修改过的原始输入版本</span><br><span class="line">&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></blockquote><p>记住：”destination” 必须是下面指定的候选提示名称之一，或者如果输入不适合任何候选提示，可以是 “DEFAULT”。<br>记住：”next_inputs” 如果您认为不需要任何修改，可以是原始输入。</p><p>&lt;&lt; CANDIDATE PROMPTS &gt;&gt;<br>{destinations}</p><p>&lt;&lt; INPUT &gt;&gt;</p><p>&lt;&lt; OUTPUT (必须在响应的开始处包含 <code>json) &gt;&gt; &lt;&lt; OUTPUT (必须以 </code> 结束) &gt;&gt;<br>“””<br>destinations &#x3D; [‘weather: 用于回答天气问题’, ‘stock: 用于执行股票的查询’]<br>router_template &#x3D; MULTI_PROMPT_ROUTER_TEMPLATE.format(destinations&#x3D;”\n”.join(destinations))<br>router_prompt &#x3D; PromptTemplate(template&#x3D;router_template, input_variables&#x3D;[“input”], output_parser&#x3D;RouterOutputParser())<br>router_chain &#x3D; LLMRouterChain.from_llm(llm, router_prompt, verbose&#x3D;True)<br>final_chain &#x3D; MultiPromptChain(<br>    router_chain&#x3D;router_chain,<br>    destination_chains&#x3D;destination_chains,<br>    default_chain&#x3D;chat_chain,<br>    verbose&#x3D;True,<br>)</p><h1 id="循环执行对话"><a href="#循环执行对话" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 循环执行对话 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 循环执行对话 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h1><p>def run_dialogue_chain(final_chain):<br>    print(“对话开始。输入’退出’以结束对话。”)<br>    while True:<br>        user_input &#x3D; input(“请输入: “)<br>        if user_input.lower() &#x3D;&#x3D; ‘退出’:<br>            print(“对话结束。”)<br>            break<br>        try:<br>            response &#x3D; final_chain.invoke({“input”: user_input})<br>            print(“AI小助手:”, response[“text”])<br>        except Exception as e:<br>            print(f”处理输入时发生错误: {e}”)</p><p>run_dialogue_chain(final_chain)</p><pre><code># 4. Memory## 4.1 Memory的设计理念&amp;emsp;&amp;emsp;任何记忆的基础都是所有聊天交互的历史记录。即使这些不全部直接使用，也需要以某种形式存储。保留一个聊天消息列表还是相当简单，一个非常简单的记忆模块可以只返回每次运行的最新消息。稍微复杂一点的记忆模块需要返回过去 K 条消息的简洁摘要。更复杂的可能会从存储的消息中提取实体，并且仅返回有关当前运行中引用的实体的信息。而我们论述的这些复杂情况，在应用开发中往往才是我们真正要用到。所以一个理想的开发状态是：因为每个应用程序对于如何查询记忆会有不同的要求，那我们要做到既可以轻松地使用简单的记忆模块，还能够在需要时灵活地扩展高度定制化的自定义记忆模块。&amp;emsp;&amp;emsp;LangChain就针对上述情况，基于它的开发规范和设计理念，构建了一些可以直接使用的`Memory`工具，用于存储聊天消息的一系列集成，同时，也支持我们去自定义相关的`Memory`模块，从而适配到应用开发的各个场景中。&amp;emsp;&amp;emsp;我们前面提到了，`Memory`作为存储记忆数据的一个是抽象模块，其作为一个独立模块使用是没有任何意义的，因为本质上它的定位就是一个存储对话数据的空间。先抛开其内部实现的复杂性，我们可以回想一下：在定义链路的时候，每个链的内部都会根据其接收到的输入去定义其核心执行逻辑，比如在链内如何去调用外部工具，如何解析返回的数据格式等。其中链接收到的输入，可以直接来自用户，同时，也可以来自`Memory`模块。所以在这个过程中，一个链如果接入了`Memory`模块，其内部会与`Memory`模块进行两次交互：1. 收到用户输入之后，执行核心逻辑之前，链会读取`Memory`模块，拿到对应的数据，与用户输入的Prompt放在一起，执行接下来的逻辑。2. 执行核心逻辑之后，返回响应之前，链会将这个过程中产生的信息，写入`Memory`模块，以便在其他场景下能够引用到这些记忆数据。## 4.2 自定义Memory![image-20250327234852953](/images/10.Agent实战技能之LangChain全面剖析/image-20250327234852953.png)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaseMemory</span>(Serializable, ABC):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Chains 中记忆的抽象基类。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    记忆指的是 Chains 中的状态。记忆可用于存储关于 Chains 过去执行的信息，并将该信息注入到未来执行的 Chains 输入中。</span></span><br><span class="line"><span class="string">    例如，对于对话 Chains，记忆可用于存储对话并自动将其添加到未来模型提示中，以便模型具有必要的上下文来连贯地响应最新的输入。</span></span><br><span class="line"><span class="string">     &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 下面是一些必须由子类实现的方法：</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义一个属性，任何从BaseMemory派生的子类都需要实现此方法。</span></span><br><span class="line">    <span class="comment"># 此方法应返回该记忆类将添加到链输入的字符串键。</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">memory_variables</span>(<span class="params">self</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;此记忆类将添加到链输入的字符串键列表。&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 定义一个抽象方法。任何从BaseMemory派生的子类都需要实现此方法。</span></span><br><span class="line">    <span class="comment"># 此方法基于给定的链输入返回键值对。</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_memory_variables</span>(<span class="params">self, inputs: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据链的文本输入返回键值对。&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义一个抽象方法。任何从BaseMemory派生的子类都需要实现此方法。</span></span><br><span class="line">    <span class="comment"># 此方法将此链运行的上下文保存到内存。</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_context</span>(<span class="params">self, inputs: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>], outputs: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将此链运行的上下文保存到记忆中。&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个抽象方法。任何从BaseMemory派生的子类都需要实现此方法。</span></span><br><span class="line">    <span class="comment"># 此方法清除内存内容。</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;清除记忆内容。&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>### 4.2.1 自定义Memory的API实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain</span><br><span class="line"><span class="keyword">from</span> langchain.schema <span class="keyword">import</span> BaseMemory</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputStoreMemory</span>(<span class="title class_ inherited__">BaseMemory</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义记忆类，用于存储对话历史中的输入信息。</span></span><br><span class="line"><span class="string">    继承自 BaseMemory 提供记忆存储功能。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    desc: <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">str</span>] = &#123;&#125;</span><br><span class="line">    memory_key: <span class="built_in">str</span> = <span class="string">&quot;desc&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;清空所有存储的记忆信息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.desc.clear()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">memory_variables</span>(<span class="params">self</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义提供给提示模板的变量名列表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable language_">self</span>.memory_key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_memory_variables</span>(<span class="params">self, inputs: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;加载记忆变量，将所有存储的输入信息合并为一个字符串&quot;&quot;&quot;</span></span><br><span class="line">        combined_messages = <span class="string">&quot;\n&quot;</span>.join(<span class="variable language_">self</span>.desc.values())</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="variable language_">self</span>.memory_key: combined_messages&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_context</span>(<span class="params">self, inputs: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>], outputs: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;保存当前对话的上下文信息到记忆存储中&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> inputs <span class="keyword">or</span> <span class="keyword">not</span> inputs.get(<span class="string">&quot;input&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        text = inputs[<span class="string">&quot;input&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> text <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.desc.values():</span><br><span class="line">            <span class="variable language_">self</span>.desc[<span class="built_in">len</span>(<span class="variable language_">self</span>.desc) + <span class="number">1</span>] = text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试记忆功能</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_memory</span>():</span><br><span class="line">    input_memory = InputStoreMemory()</span><br><span class="line">    input_memory.save_context(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好，我是小智&quot;</span>&#125;, &#123;<span class="string">&quot;output&quot;</span>: <span class="string">&quot; &quot;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一次记忆:&quot;</span>, input_memory.load_memory_variables(&#123;&#125;))</span><br><span class="line">    input_memory.save_context(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;我正在学习AI大模型课程。&quot;</span>&#125;, &#123;<span class="string">&quot;output&quot;</span>: <span class="string">&quot; &quot;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第二次记忆:&quot;</span>, input_memory.load_memory_variables(&#123;&#125;))</span><br><span class="line">    input_memory.clear()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;清除后记忆:&quot;</span>, input_memory.load_memory_variables(&#123;&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_memory()</span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenAI API 配置</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Chat 交互模版</span></span><br><span class="line">chat_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;您是一位乐于助人的AI小助手&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化对话链</span></span><br><span class="line">chat_chain = LLMChain(</span><br><span class="line">    llm=llm,</span><br><span class="line">    prompt=chat_template,</span><br><span class="line">    memory=InputStoreMemory(),</span><br><span class="line">    verbose=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟对话流程</span></span><br><span class="line"><span class="built_in">print</span>(chat_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好，请你介绍一下你自己。&quot;</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(chat_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;我是小智&quot;</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(chat_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;我现在每天都在服务我们的会员同学&quot;</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(chat_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你知道小智每天都在做什么吗？&quot;</span>&#125;))</span><br></pre></td></tr></table></figure>### 4.2.2 自定义支持实体识别的Memory1. spacy工具安装&amp;emsp;&amp;emsp;`spaCy`是一个开源的自然语言处理（NLP）库，提供了一些高性能的语言处理功能，适用于Python。主要用于文本分析和处理任务，包括但不限于词性标注、命名实体识别（NER）、句法依赖分析、句子边界检测等。2. 代码编写<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain</span><br><span class="line"><span class="keyword">from</span> langchain.schema <span class="keyword">import</span> BaseMemory</span><br><span class="line"><span class="keyword">from</span> langchain_core.pydantic_v1 <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> langchain.prompts.prompt <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span></span><br><span class="line"><span class="keyword">import</span> spacy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 OpenAI API</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 LLM</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 spaCy 进行文本解析</span></span><br><span class="line">nlp = spacy.load(<span class="string">&quot;zh_core_web_sm&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpacyEntityMemory</span>(<span class="title class_ inherited__">BaseMemory</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    记忆类，用于存储和管理对话中的实体信息。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    entities: <span class="built_in">dict</span> = &#123;&#125;  <span class="comment"># 存储实体信息的字典</span></span><br><span class="line">    memory_key: <span class="built_in">str</span> = <span class="string">&quot;entities&quot;</span>  <span class="comment"># 记忆变量的键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;清空所有存储的实体信息。&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.entities = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">memory_variables</span>(<span class="params">self</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义提供给提示符的变量列表。&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable language_">self</span>.memory_key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_memory_variables</span>(<span class="params">self, inputs: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从记忆中加载与输入相关的实体信息。&quot;&quot;&quot;</span></span><br><span class="line">        doc = nlp(inputs[<span class="built_in">list</span>(inputs.keys())[<span class="number">0</span>]])  <span class="comment"># 解析输入文本</span></span><br><span class="line">        entities = [<span class="variable language_">self</span>.entities[<span class="built_in">str</span>(ent)] <span class="keyword">for</span> ent <span class="keyword">in</span> doc.ents <span class="keyword">if</span> <span class="built_in">str</span>(ent) <span class="keyword">in</span> <span class="variable language_">self</span>.entities]</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="variable language_">self</span>.memory_key: <span class="string">&quot;\n&quot;</span>.join(entities)&#125;  <span class="comment"># 返回组合的实体信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_context</span>(<span class="params">self, inputs: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>], outputs: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将本轮对话的上下文信息存入记忆。&quot;&quot;&quot;</span></span><br><span class="line">        text = inputs[<span class="built_in">list</span>(inputs.keys())[<span class="number">0</span>]]  <span class="comment"># 获取输入文本</span></span><br><span class="line">        doc = nlp(text)  <span class="comment"># 解析文本</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ent <span class="keyword">in</span> doc.ents:</span><br><span class="line">            ent_str = <span class="built_in">str</span>(ent)</span><br><span class="line">            <span class="keyword">if</span> ent_str <span class="keyword">in</span> <span class="variable language_">self</span>.entities:</span><br><span class="line">                <span class="variable language_">self</span>.entities[ent_str] += <span class="string">f&quot;\n<span class="subst">&#123;text&#125;</span>&quot;</span>  <span class="comment"># 追加新信息</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.entities[ent_str] = text  <span class="comment"># 创建新的实体信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义提示模板</span></span><br><span class="line">prompt_template = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">以下是人类和AI之间的友好对话。AI 很健谈，并提供了大量来自其上下文的具体细节。</span></span><br><span class="line"><span class="string">如果 AI 不知道某个问题的答案，它会真诚地说不知道。</span></span><br><span class="line"><span class="string">如果相关，你会得到人类提到的实体的信息。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">相关实体信息：</span></span><br><span class="line"><span class="string">&#123;entities&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对话：</span></span><br><span class="line"><span class="string">人类: &#123;input&#125;</span></span><br><span class="line"><span class="string">AI:&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">prompt = PromptTemplate(input_variables=[<span class="string">&quot;entities&quot;</span>, <span class="string">&quot;input&quot;</span>], template=prompt_template)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化记忆对象</span></span><br><span class="line">SpacyMemory = SpacyEntityMemory(memory_key=<span class="string">&quot;entities&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 LLMChain</span></span><br><span class="line">spacy_chain = LLMChain(llm=llm, prompt=prompt, memory=SpacyMemory, verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行示例对话</span></span><br><span class="line"><span class="built_in">print</span>(spacy_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;2014年9月，马云在杭州发起了世界互联网大会。这一事件标志着中国在全球互联网发展中的积极参与。&quot;</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(spacy_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;随后，2015年11月，腾讯公司在深圳发布了微信支付功能，进一步推动了中国数字经济的发展。&quot;</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(spacy_chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;2014年9月发生了什么&quot;</span>&#125;))</span><br></pre></td></tr></table></figure>## 4.3 LangChain内置的Memory模块![image-20250327235156862](/images/10.Agent实战技能之LangChain全面剖析/image-20250327235156862.png)以下是 **LangChain 内置 Memory 模块的对比表格**，包括 **核心功能**、**存储方式** 和 **适用场景**。| **Memory 模块**                   | **核心功能**                                 | **存储方式**                      | **适用场景**                               || --------------------------------- | -------------------------------------------- | --------------------------------- | ------------------------------------------ || `ConversationBufferMemory`        | 记录完整的对话历史                           | Python 内存（列表）               | 适用于需要完整记录对话的场景               || `ConversationStringBufferMemory`  | 以字符串格式存储对话历史                     | Python 内存（字符串）             | 适用于需要简单拼接对话历史的场景           || `ConversationBufferWindowMemory`  | 仅存储最近 N 轮对话                          | Python 内存（列表，限制窗口大小） | 适用于对话历史需要限制长度的场景           || `BaseChatMemory`                  | ChatMemory 基类，提供基本存储框架            | -                                 | 用于构建自定义的 ChatMemory                || `CombinedMemory`                  | 组合多个 Memory 模块                         | 取决于组合的 Memory               | 适用于多个 Memory 组合使用                 || `BaseEntityStore`                 | 实体存储的基类                               | -                                 | 用于扩展不同存储方式的实体记忆             || `ConversationEntityMemory`        | 记录对话中出现的实体信息                     | Python 内存（字典）               | 适用于需要实体记忆的场景，如聊天机器人     || `InMemoryEntityStore`             | 以字典形式存储实体信息                       | Python 内存（字典）               | 适用于本地存储实体的场景                   || `RedisEntityStore`                | 使用 Redis 存储实体信息                      | Redis                             | 适用于分布式环境或需要持久化实体信息的场景 || `SQLiteEntityStore`               | 使用 SQLite 存储实体信息                     | SQLite 数据库                     | 适用于小型数据库存储实体信息的场景         || `UpstashRedisEntityStore`         | 使用 Upstash Redis 存储实体                  | Upstash Redis                     | 适用于云端 Redis 存储实体信息的场景        || `ConversationKGMemory`            | 通过知识图谱存储和检索信息                   | Python 内存（图数据库）           | 适用于知识库或信息检索类应用               || `MotorheadMemory`                 | 远程存储对话历史                             | Motorhead API                     | 适用于基于 Motorhead 的 AI 代理            || `ReadonlySharedMemory`            | 只读共享 Memory，不可修改                    | 共享存储                          | 适用于需要共享但不允许修改的场景           || `SimpleMemory`                    | 仅存储键值对信息                             | Python 内存（字典）               | 适用于存储全局变量或配置                   || `ConversationSummaryMemory`       | 对对话历史进行总结存储                       | Python 内存（字符串）             | 适用于需要摘要对话历史的场景               || `SummarizerMixin`                 | 为 Memory 模块添加摘要功能                   | -                                 | 用于扩展 Memory 使其支持摘要               || `ConversationSummaryBufferMemory` | 结合 Buffer 和 Summary，先摘要再存储最近对话 | Python 内存（字符串 + 列表）      | 适用于对话历史过长但仍需部分存储的情况     || `ConversationTokenBufferMemory`   | 限制存储的 Token 数量，而非轮数              | Python 内存（Token 计数）         | 适用于需控制 Token 使用量的应用            || `VectorStoreRetrieverMemory`      | 通过向量存储和检索记忆                       | 向量数据库（如 FAISS、Chroma）    | 适用于长文本存储和检索                     || `ZepMemory`                       | 使用 Zep 存储对话历史和摘要                  | Zep API                           | 适用于云端存储和检索对话历史的场景         |### 4.3.1 ConversationBufferMemory <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 LangChain 相关模块</span></span><br><span class="line"><span class="keyword">from</span> langchain.memory <span class="keyword">import</span> ConversationBufferMemory</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts.prompt <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 OpenAI API Key 和 API Base 地址</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================== 1. 基本的 Memory 使用 ==========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对话记忆（ConversationBufferMemory）</span></span><br><span class="line">memory = ConversationBufferMemory()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存对话历史</span></span><br><span class="line">memory.save_context(</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好，请你介绍一下你自己&quot;</span>&#125;, </span><br><span class="line">    &#123;<span class="string">&quot;output&quot;</span>: <span class="string">&quot;我是一个无所不能的AI小助手&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载对话记忆</span></span><br><span class="line"><span class="built_in">print</span>(memory.load_memory_variables(&#123;&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================== 2. 使用 return_messages 参数 ==========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 memory 记录对话历史，并以 message 格式返回</span></span><br><span class="line">memory = ConversationBufferMemory(return_messages=<span class="literal">True</span>)</span><br><span class="line">memory.save_context(</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好，请你介绍一下你自己&quot;</span>&#125;, </span><br><span class="line">    &#123;<span class="string">&quot;output&quot;</span>: <span class="string">&quot;我是一个无所不能的AI小助手2&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载记忆</span></span><br><span class="line"><span class="built_in">print</span>(memory.load_memory_variables(&#123;&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================== 3. 构建对话链 ==========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化 OpenAI 模型</span></span><br><span class="line">llm = ChatOpenAI(</span><br><span class="line">    model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, </span><br><span class="line">    api_key=openai.api_key, </span><br><span class="line">    base_url=openai.api_base</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义对话的 Prompt 模板</span></span><br><span class="line">DEFAULT_TEMPLATE = <span class="string">&quot;&quot;&quot;以下是人类与AI之间的友好对话描述。AI表现得很健谈，并提供了大量来自其上下文的具体细节。如果AI不知道问题的答案，它会真诚地表示不知道。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当前对话：</span></span><br><span class="line"><span class="string">&#123;history&#125;</span></span><br><span class="line"><span class="string">Human: &#123;input&#125;</span></span><br><span class="line"><span class="string">AI:&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Prompt 对象</span></span><br><span class="line">PROMPT = PromptTemplate(input_variables=[<span class="string">&quot;history&quot;</span>, <span class="string">&quot;input&quot;</span>], template=DEFAULT_TEMPLATE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 LLMChain，并使用 ConversationBufferMemory 记录对话历史</span></span><br><span class="line">conversation = LLMChain(</span><br><span class="line">    llm=llm,</span><br><span class="line">    prompt=PROMPT, </span><br><span class="line">    memory=ConversationBufferMemory(memory_key=<span class="string">&quot;history&quot;</span>),</span><br><span class="line">    verbose=<span class="literal">True</span>,  <span class="comment"># 开启调试模式，查看日志信息</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行对话</span></span><br><span class="line">conversation.invoke(<span class="built_in">input</span>=<span class="string">&quot;你好，请你介绍一下你自己&quot;</span>)</span><br><span class="line"></span><br><span class="line">conversation.invoke(<span class="built_in">input</span>=<span class="string">&quot;我是 Cozy，我每天都在学习 AI 大模型的知识。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 AI 记住的对话历史</span></span><br><span class="line">response = conversation.invoke(<span class="built_in">input</span>=<span class="string">&quot;请问，Cozy 每天都在学习什么？&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 AI 的回答</span></span><br><span class="line"><span class="built_in">print</span>(response[<span class="string">&quot;text&quot;</span>])</span><br></pre></td></tr></table></figure>### 4.3.2 ConversationBufferWindow&amp;emsp;&amp;emsp;在了解了`ConversationBufferMemory`记忆类后，我们知道了它能够无限的将历史对话信息填充到History中，从而给大模型提供上下文的背景。但问题是：每个大模型都存在最大输入的Token限制，且过久远的对话数据往往并不能够对当前轮次的问答提供有效的信息，这种我们大家都能非常容易想到的问题，LangChain的开发人员自然也能想到，那么他们给出的解决方式是：`ConversationBufferWindowMemory`模块。该记忆类会保存一段时间内对话交互的列表，仅使用最后 K 个交互。所以它可以保存最近交互的滑动窗口，避免缓存区不会变得太大。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 LangChain 相关模块</span></span><br><span class="line"><span class="keyword">from</span> langchain.memory <span class="keyword">import</span> ConversationBufferWindowMemory</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts.prompt <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 OpenAI API Key 和 API Base 地址</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================== 1. 基本的 Memory 使用 ==========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建窗口化的对话记忆（仅保留最新 k 轮对话）</span></span><br><span class="line">memory = ConversationBufferWindowMemory(k=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存对话历史</span></span><br><span class="line">memory.save_context(</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;hello。&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;output&quot;</span>: <span class="string">&quot;我是小智，请问有什么事情？&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line">memory.save_context(</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;初次对话，你能介绍一下你自己吗？&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;output&quot;</span>: <span class="string">&quot;当然可以了。我是一个无所不能的小智。&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载对话记忆</span></span><br><span class="line"><span class="built_in">print</span>(memory.load_memory_variables(&#123;&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================== 2. 使用 return_messages 参数 ==========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 memory 记录对话历史，并以 message 格式返回</span></span><br><span class="line">memory = ConversationBufferWindowMemory(k=<span class="number">1</span>, return_messages=<span class="literal">True</span>)</span><br><span class="line">memory.save_context(</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;hello。&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;output&quot;</span>: <span class="string">&quot;我是小智，请问有什么事情？&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line">memory.save_context(</span><br><span class="line">    &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;初次对话，你能介绍一下你自己吗？&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;output&quot;</span>: <span class="string">&quot;当然可以了。我是一个无所不能的小智。&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载记忆</span></span><br><span class="line"><span class="built_in">print</span>(memory.load_memory_variables(&#123;&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================== 3. 构建对话链 ==========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化 OpenAI 模型</span></span><br><span class="line">llm = ChatOpenAI(</span><br><span class="line">    model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    api_key=openai.api_key,</span><br><span class="line">    base_url=openai.api_base</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义对话的 Prompt 模板</span></span><br><span class="line">DEFAULT_TEMPLATE = <span class="string">&quot;&quot;&quot;以下是人类与AI之间的友好对话描述。AI表现得很健谈，并提供了大量来自其上下文的具体细节。如果AI不知道问题的答案，它会表示不知道。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当前对话：</span></span><br><span class="line"><span class="string">&#123;history&#125;</span></span><br><span class="line"><span class="string">Human: &#123;input&#125;</span></span><br><span class="line"><span class="string">AI:&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Prompt 对象</span></span><br><span class="line">PROMPT = PromptTemplate(input_variables=[<span class="string">&quot;history&quot;</span>, <span class="string">&quot;input&quot;</span>], template=DEFAULT_TEMPLATE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 LLMChain，并使用 ConversationBufferWindowMemory 记录对话历史</span></span><br><span class="line">conversation_with_summary = LLMChain(</span><br><span class="line">    llm=llm,</span><br><span class="line">    prompt=PROMPT,</span><br><span class="line">    memory=ConversationBufferWindowMemory(memory_key=<span class="string">&quot;history&quot;</span>, k=<span class="number">2</span>),   <span class="comment"># 仅保留最新 2 轮对话</span></span><br><span class="line">    verbose=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行多轮对话</span></span><br><span class="line"><span class="built_in">print</span>(conversation_with_summary.invoke(<span class="built_in">input</span>=<span class="string">&quot;你好，我是孙悟空。&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(conversation_with_summary.invoke(<span class="built_in">input</span>=<span class="string">&quot;我正在去西天取经的路上。&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(conversation_with_summary.invoke(<span class="built_in">input</span>=<span class="string">&quot;我经历了九九八十一难&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(conversation_with_summary.invoke(<span class="built_in">input</span>=<span class="string">&quot;马上就修炼成佛了！&quot;</span>))</span><br></pre></td></tr></table></figure>### 4.3.3 Entity<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 LangChain 相关模块</span></span><br><span class="line"><span class="keyword">from</span> langchain.memory <span class="keyword">import</span> ConversationEntityMemory</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts.prompt <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 OpenAI API Key 和 API Base 地址</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================== 1. 基本的 Entity Memory 使用 ==========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化 OpenAI 语言模型</span></span><br><span class="line">llm = ChatOpenAI(</span><br><span class="line">    model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, </span><br><span class="line">    api_key=openai.api_key, </span><br><span class="line">    base_url=openai.api_base</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实体记忆（ConversationEntityMemory）</span></span><br><span class="line">memory = ConversationEntityMemory(llm=llm)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入包含实体信息</span></span><br><span class="line">_<span class="built_in">input</span> = &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;孙悟空和猪八戒正在做一个西天取经的项目&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取并识别输入中的实体</span></span><br><span class="line"><span class="built_in">print</span>(memory.load_memory_variables(_<span class="built_in">input</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存对话历史</span></span><br><span class="line">memory.save_context(</span><br><span class="line">    _<span class="built_in">input</span>,</span><br><span class="line">    &#123;<span class="string">&quot;output&quot;</span>: <span class="string">&quot;听起来是个很棒的项目！他们在做什么样的项目？&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 AI 记住的实体信息</span></span><br><span class="line"><span class="built_in">print</span>(memory.load_memory_variables(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;谁是孙悟空？&quot;</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================== 2. 使用 return_messages 参数 ==========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 memory 记录对话历史，并以 message 格式返回</span></span><br><span class="line">memory = ConversationEntityMemory(llm=llm, return_messages=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取并识别输入中的实体</span></span><br><span class="line"><span class="built_in">print</span>(memory.load_memory_variables(_<span class="built_in">input</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存对话历史</span></span><br><span class="line">memory.save_context(</span><br><span class="line">    _<span class="built_in">input</span>,</span><br><span class="line">    &#123;<span class="string">&quot;output&quot;</span>: <span class="string">&quot;听起来是个很棒的项目！他们在做什么样的项目？&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 AI 记住的实体信息</span></span><br><span class="line"><span class="built_in">print</span>(memory.load_memory_variables(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;谁是猪八戒？&quot;</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================== 3. 构建对话链 ==========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义实体记忆对话的 Prompt 模板</span></span><br><span class="line">DEFAULT_ENTITY_MEMORY_TEMPLATE = <span class="string">&quot;&quot;&quot;你是一个由 OpenAI 训练的大语言模型设计的助手。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你的目标是能够处理各种任务，从回答简单问题到提供对各种主题进行深入解释和讨论。</span></span><br><span class="line"><span class="string">你能够根据接收到的输入生成类似人类的文本，从而进行自然对话，并提供连贯且相关的响应。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你不断学习和改进，并能访问下文提到的个性化信息。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">上下文：</span></span><br><span class="line"><span class="string">&#123;entities&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当前对话：</span></span><br><span class="line"><span class="string">&#123;history&#125;</span></span><br><span class="line"><span class="string">最后一行：</span></span><br><span class="line"><span class="string">人类：&#123;input&#125;</span></span><br><span class="line"><span class="string">你:&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Prompt 对象</span></span><br><span class="line">MY_ENTITY_MEMORY_CONVERSATION_TEMPLATE = PromptTemplate(</span><br><span class="line">    input_variables=[<span class="string">&quot;entities&quot;</span>, <span class="string">&quot;history&quot;</span>, <span class="string">&quot;input&quot;</span>],</span><br><span class="line">    template=DEFAULT_ENTITY_MEMORY_TEMPLATE,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 LLMChain，并使用 ConversationEntityMemory 记录实体信息</span></span><br><span class="line">conversation_with_entity = LLMChain(</span><br><span class="line">    llm=llm,</span><br><span class="line">    verbose=<span class="literal">True</span>,</span><br><span class="line">    prompt=MY_ENTITY_MEMORY_CONVERSATION_TEMPLATE,</span><br><span class="line">    memory=ConversationEntityMemory(llm=llm)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行多轮对话</span></span><br><span class="line">conversation_with_entity.invoke(<span class="built_in">input</span>=<span class="string">&quot;孙悟空和猪八戒正在做一个西天取经的项目&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(conversation_with_entity.memory.entity_store.store)  <span class="comment"># 输出当前存储的实体信息</span></span><br><span class="line"></span><br><span class="line">conversation_with_entity.invoke(<span class="built_in">input</span>=<span class="string">&quot;第一步，他们去到了女儿国&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(conversation_with_entity.memory.entity_store.store)  <span class="comment"># 输出当前存储的实体信息</span></span><br><span class="line"></span><br><span class="line">conversation_with_entity.invoke(<span class="built_in">input</span>=<span class="string">&quot;第二步，他们去到了盘丝洞&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(conversation_with_entity.memory.entity_store.store)  <span class="comment"># 输出当前存储的实体信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 AI 记住的实体信息</span></span><br><span class="line"><span class="built_in">print</span>(conversation_with_entity.invoke(<span class="built_in">input</span>=<span class="string">&quot;你对刚刚我们聊的孙悟空和猪八戒了解多少?&quot;</span>))</span><br><span class="line"></span><br><span class="line">pprint(conversation_with_entity.memory.entity_store.store)</span><br></pre></td></tr></table></figure># 5. Agents## 5.1 Agent设计理念![image-20250328232552435](/images/10.Agent实战技能之LangChain全面剖析/image-20250328232552435.png)![image-20250328234855292](/images/10.Agent实战技能之LangChain全面剖析/image-20250328234855292.png)![image-20250328235110588](/images/10.Agent实战技能之LangChain全面剖析/image-20250328235110588.png)![image-20250329000600262](/images/10.Agent实战技能之LangChain全面剖析/image-20250329000600262.png)## 5.2 Agents模块的架构设计理念剖析### 5.2.1 子任务有效拆分&amp;emsp;&amp;emsp;首先，对于任务的拆分，我们认为：一个原生能力较强的大模型是完全具备任务拆解的能力，比如我们来测试`gpt-3.5-turbo`模型：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,api_key=openai.api_key ,base_url=openai.api_base)</span><br><span class="line">resonse = llm.invoke(<span class="string">&quot;如果我想得到今天的北京和大理在当前时间段的气温差，我应该怎么做？&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resonse.content)</span><br></pre></td></tr></table></figure>&amp;emsp;&amp;emsp;当可以通过提示工程让大模型去拆解原始的输入为多个子任务后，接下来的关键就有两点：1. 制定一个策略来依序执行这些子任务并收集结果。2. 综合全部子任务的结果，进行最终结果的响应。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化一个空列表来存储每个子任务的结果</span></span><br><span class="line">results = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子任务列表</span></span><br><span class="line">sub_tasks = [<span class="string">&#x27;子任务1&#x27;</span>, <span class="string">&#x27;子任务2&#x27;</span>, <span class="string">&#x27;子任务3&#x27;</span>, ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历子任务列表，依次执行每个任务</span></span><br><span class="line"><span class="keyword">for</span> task <span class="keyword">in</span> sub_tasks:</span><br><span class="line">    <span class="comment"># 执行子任务并获取结果</span></span><br><span class="line">    result = execute_task(task)</span><br><span class="line">    <span class="comment"># 将结果添加到结果列表中</span></span><br><span class="line">    results.append(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对收集到的结果进行综合分析</span></span><br><span class="line">final_result = analyze_results(results)</span><br></pre></td></tr></table></figure>### 5.2.2 外部工具的调用机制及最终结果的生成&amp;emsp;&amp;emsp;实现子任务调用外部工具的机制对我们来说并不陌生，我们在前面的课程中频繁给大家介绍过调用外部工具的各种方式。很多大模型只要给它绑定外部工具，且每个外部工具有比较详细的描述，它本身就具备非常好的识别能力。比如`gpt`模型的`Function Calling`过程，`Qwen`模型的`ReAct`过程，对于这个过程，我们需要优化的是：1. 如何把外部工具的描述更好？2. 问题拆解本身也会分成很多步骤，每一个问题解决的路径如何定义？&amp;emsp;&amp;emsp;首先，我们来看`Agents`的内部结构。每个`Agent`组件一般会由语言模型 + 提示 + 输出解析器构成，它会作为`Agents`的大脑去处理用户的输入。`Agent`能够处理的输入主要来源于三个方面：`input`代表用户的原始输入，`Model Reponse`指的是模型对某一个子任务的响应输出，而`History`则能携带上下文的信息。其输出部分，则链接到实际的工具库，需要调用哪些工具，将由经过`Agent`模块后拆分的子任务来决定。&amp;emsp;&amp;emsp;而我们知道，大模型调用外部函数会分为两个过程：识别工具和实际执行。在Message -&gt; Agent -&gt; Toolkits 这个流程中，负责的是将子任务拆解，然后根据这些子任务在工具库中找到相应的工具，提取工具名称及所需参数，这个过程可以视作一种“静态”的执行流程。而将这些决策转化为实际行动的工作，则会交给`AgentExecutor`。&amp;emsp;&amp;emsp;所以综上需要理解的是：在LangChain的`Agents`实际架构中，`Agent`的角色是接收输入并决定采取的操作，但它本身并不直接执行这些操作。这一任务是由`AgentExecutor`来完成的。将`Agent`（决策大脑）与`AgentExecutor`（执行操作的Runtime）结合使用，才构成了完整的`Agents`（智能体），其中`AgentExecutor`负责调用代理并执行指定的工具，以此来实现整个智能体的功能。### 5.2.3 自定义Agent<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate, MessagesPlaceholder</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langchain.agents.format_scratchpad.openai_tools <span class="keyword">import</span> format_to_openai_tool_messages</span><br><span class="line"><span class="keyword">from</span> langchain.agents.output_parsers.openai_tools <span class="keyword">import</span> OpenAIToolsAgentOutputParser</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> AgentExecutor</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 OpenAI 语言模型</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 Prompt 模板</span></span><br><span class="line">prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是一个非常厉害的AI助手，但不了解实时的一些知识&quot;</span>),  <span class="comment"># 设定系统角色，告诉 AI 它的知识有限制</span></span><br><span class="line">    (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),  <span class="comment"># 用户输入部分，&#123;input&#125; 是占位符，会被实际用户问题替换</span></span><br><span class="line">    MessagesPlaceholder(variable_name=<span class="string">&quot;agent_scratchpad&quot;</span>),  <span class="comment"># 用于存储 Agent 的中间步骤信息</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个模拟天气查询工具</span></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">loc: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟天气查询函数，返回固定的天气数据。</span></span><br><span class="line"><span class="string">    :param loc: 城市名称</span></span><br><span class="line"><span class="string">    :return: JSON格式的天气数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mock_response = &#123;</span><br><span class="line">        <span class="string">&quot;city&quot;</span>: loc,</span><br><span class="line">        <span class="string">&quot;weather&quot;</span>: <span class="string">&quot;Sunny&quot;</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">25</span>,  <span class="comment"># 固定温度数据</span></span><br><span class="line">        <span class="string">&quot;humidity&quot;</span>: <span class="number">60</span>,</span><br><span class="line">        <span class="string">&quot;wind_speed&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Clear sky with mild breeze&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json.dumps(mock_response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定工具到 LLM</span></span><br><span class="line">tools = [get_weather]</span><br><span class="line">llm_with_tools = llm.bind_tools(tools)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置智能体执行流程</span></span><br><span class="line">agent = (</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;input&quot;</span>: <span class="keyword">lambda</span> x: x[<span class="string">&quot;input&quot;</span>],  <span class="comment"># 直接获取用户输入</span></span><br><span class="line">        <span class="string">&quot;agent_scratchpad&quot;</span>: <span class="keyword">lambda</span> x: format_to_openai_tool_messages(x[<span class="string">&quot;intermediate_steps&quot;</span>]),  <span class="comment"># 处理中间步骤信息并转换格式</span></span><br><span class="line">    &#125;</span><br><span class="line">    | prompt  <span class="comment"># 绑定 Prompt，定义 AI 交互格式</span></span><br><span class="line">    | llm_with_tools  <span class="comment"># 绑定 LLM 和工具，使其能够调用 get_weather</span></span><br><span class="line">    | OpenAIToolsAgentOutputParser()  <span class="comment"># 解析 LLM 输出，确保结果格式正确</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 AgentExecutor 用于执行智能体逻辑</span></span><br><span class="line">agent_executor = AgentExecutor(</span><br><span class="line">    agent=agent,  <span class="comment"># 绑定配置好的智能体</span></span><br><span class="line">    tools=tools,  <span class="comment"># 绑定工具，使智能体能够调用 get_weather</span></span><br><span class="line">    verbose=<span class="literal">True</span>,  <span class="comment"># 设置为 True 以打印执行过程，方便调试</span></span><br><span class="line">    return_intermediate_steps=<span class="literal">True</span>  <span class="comment"># 允许返回中间步骤，方便分析 LLM 过程</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 AgentExecutor 执行温差查询任务</span></span><br><span class="line"><span class="built_in">print</span>(agent_executor.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;对比一下今天北京和大理的温差？&quot;</span>&#125;))</span><br></pre></td></tr></table></figure>&gt; &amp;emsp;&amp;emsp;在这个过程中，我们创建了两个输入变量：`input` 和 `agent_scratchpad` 。 其中`input`是用户的原始输入，而`agent_scratchpad`要包含的是：先前`Agent`工具调用和相应工具输出的消息序列。关于这一点我们在上一小节介绍构建`Agents`的难点时已经强调过：`Agents`之所以能够灵活的处理更复杂的应用，在于它可以拆分出多个子任务，顺序的去执行子任务，而下一个子任务如何与之前的任务构建关联关系，则可以通过上下文的形式进行传递，从而让下一个子任务判断：当前应该怎么执行。这一过程，就可以借助LangChain已经实现好的`MessagesPlaceholder`模块来实现。&gt;&gt; <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MessagesPlaceholder</span>(<span class="title class_ inherited__">BaseMessagePromptTemplate</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;假设变量已经是消息列表的提示模板。&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    variable_name: <span class="built_in">str</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;用作消息的变量名称。&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    optional: <span class="built_in">bool</span> = <span class="literal">False</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;是否为可选变量，默认为False。&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_lc_namespace</span>(<span class="params">cls</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取langchain对象的命名空间。&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;langchain&quot;</span>, <span class="string">&quot;prompts&quot;</span>, <span class="string">&quot;chat&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">format_messages</span>(<span class="params">self, **kwargs: <span class="type">Any</span></span>) -&gt; <span class="type">List</span>[BaseMessage]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用kwargs格式化消息。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数:</span></span><br><span class="line"><span class="string">            **kwargs: 用于格式化的关键字参数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回:</span></span><br><span class="line"><span class="string">            BaseMessage的列表。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">input_variables</span>(<span class="params">self</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;这个提示模板的输入变量。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回:</span></span><br><span class="line"><span class="string">            输入变量名称的列表。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable language_">self</span>.variable_name] <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.optional <span class="keyword">else</span> []   </span><br></pre></td></tr></table></figure>&gt; &amp;emsp;&amp;emsp;如上所示：在构建`Agent`实例时，还需要借助最后两个函数：`format_to_openai_tool_messages`用于格式化中间步骤（代理操作、工具输出对）以发送到模型的输入消息的组件。其中一个关键的概念是：`intermediate_steps`，它用来表示LLM到目前为止采取的步骤以及观察结果。&gt;&gt; <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">format_to_openai_tool_messages</span>(<span class="params"></span></span><br><span class="line"><span class="params">    intermediate_steps: <span class="type">Sequence</span>[<span class="type">Tuple</span>[AgentAction, <span class="built_in">str</span>]],</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">List</span>[BaseMessage]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将（AgentAction，工具输出）元组转换为FunctionMessages。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        intermediate_steps: LLM到目前为止采取的步骤以及观察结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">        发送给LLM的消息列表，以便进行下一次预测</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    messages = []</span><br><span class="line">    <span class="keyword">for</span> agent_action, observation <span class="keyword">in</span> intermediate_steps:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(agent_action, OpenAIToolAgentAction):</span><br><span class="line">            <span class="comment"># 创建新消息列表，包括来自代理操作的消息日志和基于当前观察结果的工具消息</span></span><br><span class="line">            new_messages = <span class="built_in">list</span>(agent_action.message_log) + [</span><br><span class="line">                _create_tool_message(agent_action, observation)</span><br><span class="line">            ]</span><br><span class="line">            <span class="comment"># 将新消息添加到总消息列表中，避免重复</span></span><br><span class="line">            messages.extend([new <span class="keyword">for</span> new <span class="keyword">in</span> new_messages <span class="keyword">if</span> new <span class="keyword">not</span> <span class="keyword">in</span> messages])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果不是OpenAIToolAgentAction，则直接添加代理操作的日志作为AI消息</span></span><br><span class="line">            messages.append(AIMessage(content=agent_action.log))</span><br><span class="line">    <span class="keyword">return</span> messages</span><br></pre></td></tr></table></figure>&gt; &amp;emsp;&amp;emsp;`OpenAIToolsAgentOutputParser`用于将输出消息转换为`Agent`操作/`Agent`完成的组件。&gt;&gt; <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAIToolsAgentOutputParser</span>(<span class="title class_ inherited__">MultiActionAgentOutputParser</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解析消息为代理操作/结束。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    旨在与OpenAI模型一起使用，因为它依赖于特定的tool_calls参数来传达使用哪些工具。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    如果传递了tool_calls参数，则使用该参数获取工具名称和工具输入。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    如果没有传递，则假定AIMessage是最终输出。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_type</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;openai-tools-agent-output-parser&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_result</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self, result: <span class="type">List</span>[Generation], *, partial: <span class="built_in">bool</span> = <span class="literal">False</span></span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="type">Union</span>[<span class="type">List</span>[AgentAction], AgentFinish]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(result[<span class="number">0</span>], ChatGeneration):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;该输出解析器仅适用于ChatGeneration输出&quot;</span>)</span><br><span class="line">        message = result[<span class="number">0</span>].message</span><br><span class="line">        <span class="keyword">return</span> parse_ai_message_to_openai_tool_action(message)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, text: <span class="built_in">str</span></span>) -&gt; <span class="type">Union</span>[<span class="type">List</span>[AgentAction], AgentFinish]:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;只能解析消息&quot;</span>)</span><br></pre></td></tr></table></figure>## 5.3 基于LangChain的Agent抽象![image-20250330100633731](/images/10.Agent实战技能之LangChain全面剖析/image-20250330100633731.png)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> hub</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> AgentExecutor, create_openai_tools_agent</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 OpenAI 语言模型</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 Prompt 模板</span></span><br><span class="line">prompt = hub.pull(<span class="string">&quot;hwchase17/openai-tools-agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个模拟天气查询工具</span></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">loc: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟天气查询函数，返回固定的天气数据。</span></span><br><span class="line"><span class="string">    :param loc: 城市名称</span></span><br><span class="line"><span class="string">    :return: JSON格式的天气数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mock_response = &#123;</span><br><span class="line">        <span class="string">&quot;city&quot;</span>: loc,</span><br><span class="line">        <span class="string">&quot;weather&quot;</span>: <span class="string">&quot;Sunny&quot;</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">25</span>,  <span class="comment"># 固定温度数据</span></span><br><span class="line">        <span class="string">&quot;humidity&quot;</span>: <span class="number">60</span>,</span><br><span class="line">        <span class="string">&quot;wind_speed&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Clear sky with mild breeze&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json.dumps(mock_response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工具列表</span></span><br><span class="line">tools = [get_weather]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置智能体执行流程</span></span><br><span class="line">agent = create_openai_tools_agent(llm, tools, prompt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 AgentExecutor 用于执行智能体逻辑</span></span><br><span class="line">agent_executor = AgentExecutor(</span><br><span class="line">    agent=agent,  <span class="comment"># 绑定配置好的智能体</span></span><br><span class="line">    tools=tools,  <span class="comment"># 绑定工具，使智能体能够调用 get_weather</span></span><br><span class="line">    verbose=<span class="literal">True</span>,  <span class="comment"># 设置为 True 以打印执行过程，方便调试</span></span><br><span class="line">    return_intermediate_steps=<span class="literal">True</span>  <span class="comment"># 允许返回中间步骤，方便分析 LLM 过程</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 AgentExecutor 执行温差查询任务</span></span><br><span class="line"><span class="built_in">print</span>(agent_executor.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;对比一下今天北京和大理的温差？&quot;</span>&#125;))</span><br></pre></td></tr></table></figure>&gt; prompt = hub.pull(&quot;hwchase17/openai-tools-agent&quot;)&gt;&gt; <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">================================ System Message ================================</span><br><span class="line"></span><br><span class="line">You are a helpful assistant</span><br><span class="line"></span><br><span class="line">============================= Messages Placeholder =============================</span><br><span class="line"></span><br><span class="line">&#123;chat_history&#125;</span><br><span class="line"></span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">&#123;<span class="built_in">input</span>&#125;</span><br><span class="line"></span><br><span class="line">============================= Messages Placeholder =============================</span><br><span class="line"></span><br><span class="line">&#123;agent_scratchpad&#125;</span><br></pre></td></tr></table></figure>## 5.4 自定义基于ReAct范式的Agents<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> AgentExecutor</span><br><span class="line"><span class="keyword">from</span> langchain.agents.format_scratchpad <span class="keyword">import</span> format_log_to_str</span><br><span class="line"><span class="keyword">from</span> langchain.agents.output_parsers <span class="keyword">import</span> ReActSingleInputOutputParser</span><br><span class="line"><span class="keyword">from</span> langchain.tools.render <span class="keyword">import</span> render_text_description</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 OpenAI 语言模型</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 Prompt 模板</span></span><br><span class="line">template = <span class="string">&#x27;&#x27;&#x27;Answer the following questions as best you can. You have access to the following tools:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;tools&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Use the following format:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Question: the input question you must answer</span></span><br><span class="line"><span class="string">Thought: you should always think about what to do</span></span><br><span class="line"><span class="string">Action: the action to take, should be one of [&#123;tool_names&#125;]</span></span><br><span class="line"><span class="string">Action Input: the input to the action</span></span><br><span class="line"><span class="string">Observation: the result of the action</span></span><br><span class="line"><span class="string"><span class="meta">... </span>(this Thought/Action/Action Input/Observation can repeat N times)</span></span><br><span class="line"><span class="string">Thought: I now know the final answer</span></span><br><span class="line"><span class="string">Final Answer: the final answer to the original input question</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Begin!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Question: &#123;input&#125;</span></span><br><span class="line"><span class="string">Thought:&#123;agent_scratchpad&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">prompt = ChatPromptTemplate.from_template(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个模拟天气查询工具</span></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">loc: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟天气查询函数，返回固定的天气数据。</span></span><br><span class="line"><span class="string">    :param loc: 城市名称</span></span><br><span class="line"><span class="string">    :return: JSON格式的天气数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mock_response = &#123;</span><br><span class="line">        <span class="string">&quot;city&quot;</span>: loc,</span><br><span class="line">        <span class="string">&quot;weather&quot;</span>: <span class="string">&quot;Sunny&quot;</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">25</span>,  <span class="comment"># 固定温度数据</span></span><br><span class="line">        <span class="string">&quot;humidity&quot;</span>: <span class="number">60</span>,</span><br><span class="line">        <span class="string">&quot;wind_speed&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Clear sky with mild breeze&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json.dumps(mock_response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定工具到 LLM</span></span><br><span class="line">tools = [get_weather]</span><br><span class="line">prompt = prompt.partial(</span><br><span class="line">    tools=render_text_description(<span class="built_in">list</span>(tools)),</span><br><span class="line">    tool_names=<span class="string">&quot;, &quot;</span>.join([t.name <span class="keyword">for</span> t <span class="keyword">in</span> tools]),</span><br><span class="line">)</span><br><span class="line">llm_with_stop = llm.bind(stop=[<span class="string">&quot;\nObservation&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置智能体执行流程</span></span><br><span class="line">output_parser = ReActSingleInputOutputParser()</span><br><span class="line"></span><br><span class="line">agent = (</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;input&quot;</span>: <span class="keyword">lambda</span> x: x[<span class="string">&quot;input&quot;</span>],</span><br><span class="line">            <span class="string">&quot;agent_scratchpad&quot;</span>: <span class="keyword">lambda</span> x: format_log_to_str(</span><br><span class="line">                x[<span class="string">&quot;intermediate_steps&quot;</span>]</span><br><span class="line">            ),</span><br><span class="line">        &#125;</span><br><span class="line">        | prompt</span><br><span class="line">        | llm_with_stop</span><br><span class="line">        | output_parser</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 AgentExecutor 用于执行智能体逻辑</span></span><br><span class="line">agent_executor = AgentExecutor(</span><br><span class="line">    agent=agent,  <span class="comment"># 绑定配置好的智能体</span></span><br><span class="line">    tools=tools,  <span class="comment"># 绑定工具，使智能体能够调用 get_weather</span></span><br><span class="line">    verbose=<span class="literal">True</span>,  <span class="comment"># 设置为 True 以打印执行过程，方便调试</span></span><br><span class="line">    return_intermediate_steps=<span class="literal">True</span>  <span class="comment"># 允许返回中间步骤，方便分析 LLM 过程</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 AgentExecutor 执行温差查询任务</span></span><br><span class="line"><span class="built_in">print</span>(agent_executor.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;对比一下今天北京和大理的温差？&quot;</span>&#125;))</span><br></pre></td></tr></table></figure>&gt; &amp;emsp;&amp;emsp;当不适用OpenAI Tools规范时，不可再使用`bind_tools`方法进行绑定，尽管我们这里实例化的仍然是GPT模型，而是需要根据`ReAct`模版的规范去绑定并且指定每一步的操作，如果遇到`\nObservation`便进入下一轮的处理逻辑，直至完成最后一个子任务在输出最终的处理结果。&gt;&gt; &amp;emsp;&amp;emsp;这个`agent`的实例化过程，如果真正理解了`如何自定义构建一个Agents`中我们介绍的流程，就一定能理解这个实例化`agent`时改变的参数。首先，`format_log_to_str`用于格式化地生成中间过程的关键数据，而output_parser，则需要按照ReAct的规范格式化每一个子任务的输出。&gt;&gt; &amp;emsp;&amp;emsp;观察输出结果，可以看出，尽管整个核心流程仍然遵循LangChain定义的标准实现，但中间处理过程与我们之前使用OpenAI Tools实践的有显著不同。这一差异主要由ReAct模板控制，特别是每个`actions`中的`log`描述非常关键。`Agent`会根据上一步的处理结果来决定下一步的操作。然后，它会持续执行，直到认为已经获得了正确的答案。## 5.5 使用LangChain定义的ReAct策略<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> hub</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> AgentExecutor, create_react_agent</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 OpenAI 语言模型</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 Prompt 模板</span></span><br><span class="line">prompt = hub.pull(<span class="string">&quot;hwchase17/react&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个模拟天气查询工具</span></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">loc: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟天气查询函数，返回固定的天气数据。</span></span><br><span class="line"><span class="string">    :param loc: 城市名称</span></span><br><span class="line"><span class="string">    :return: JSON格式的天气数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mock_response = &#123;</span><br><span class="line">        <span class="string">&quot;city&quot;</span>: loc,</span><br><span class="line">        <span class="string">&quot;weather&quot;</span>: <span class="string">&quot;Sunny&quot;</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">25</span>,  <span class="comment"># 固定温度数据</span></span><br><span class="line">        <span class="string">&quot;humidity&quot;</span>: <span class="number">60</span>,</span><br><span class="line">        <span class="string">&quot;wind_speed&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Clear sky with mild breeze&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json.dumps(mock_response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工具列表</span></span><br><span class="line">tools = [get_weather]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置智能体执行流程</span></span><br><span class="line">agent = create_react_agent(llm, tools, prompt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 AgentExecutor 用于执行智能体逻辑</span></span><br><span class="line">agent_executor = AgentExecutor(</span><br><span class="line">    agent=agent,  <span class="comment"># 绑定配置好的智能体</span></span><br><span class="line">    tools=tools,  <span class="comment"># 绑定工具，使智能体能够调用 get_weather</span></span><br><span class="line">    verbose=<span class="literal">True</span>,  <span class="comment"># 设置为 True 以打印执行过程，方便调试</span></span><br><span class="line">    return_intermediate_steps=<span class="literal">True</span>  <span class="comment"># 允许返回中间步骤，方便分析 LLM 过程</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 AgentExecutor 执行温差查询任务</span></span><br><span class="line"><span class="built_in">print</span>(agent_executor.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;对比一下今天北京和大理的温差？&quot;</span>&#125;))</span><br></pre></td></tr></table></figure>## 5.6 XML Agent案例演示| **概念**     | **XML Agent**                                          | **JSON Chat Agent**                      | **Structured Chat**                                      || ------------ | ------------------------------------------------------ | ---------------------------------------- | -------------------------------------------------------- || **数据格式** | XML（eXtensible Markup Language）                      | JSON（JavaScript Object Notation）       | 任意结构化格式（通常是 JSON，但也可以是 XML 或其他结构） || **用途**     | 适用于需要 XML 格式的系统，如传统 Web 服务、银行系统等 | 适用于现代 Web 应用、API、实时聊天系统等 | 适用于对话式 AI，确保对话结构化、可解                    |中间传递数据的格式：**1. XML Agent（使用 XML 结构）**<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sender</span>&gt;</span>user<span class="tag">&lt;/<span class="name">sender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>Hello, how are you?<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span>2025-03-30T12:00:00Z<span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>**2. JSON Chat Agent（使用 JSON 结构）**<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello, how are you?&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-03-30T12:00:00Z&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>**3. Structured Chat（自定义结构化对话）**<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;conversation_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12345&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello, how are you?&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-03-30T12:00:00Z&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;I&#x27;m good, thanks! How can I assist you today?&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-03-30T12:00:05Z&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>代码：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> hub</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> AgentExecutor, create_xml_agent</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 OpenAI 语言模型</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 Prompt 模板</span></span><br><span class="line">prompt = hub.pull(<span class="string">&quot;hwchase17/xml-agent-convo&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个模拟天气查询工具</span></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">loc: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟天气查询函数，返回固定的天气数据。</span></span><br><span class="line"><span class="string">    :param loc: 城市名称</span></span><br><span class="line"><span class="string">    :return: JSON格式的天气数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mock_response = &#123;</span><br><span class="line">        <span class="string">&quot;city&quot;</span>: loc,</span><br><span class="line">        <span class="string">&quot;weather&quot;</span>: <span class="string">&quot;Sunny&quot;</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">25</span>,  <span class="comment"># 固定温度数据</span></span><br><span class="line">        <span class="string">&quot;humidity&quot;</span>: <span class="number">60</span>,</span><br><span class="line">        <span class="string">&quot;wind_speed&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Clear sky with mild breeze&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json.dumps(mock_response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工具列表</span></span><br><span class="line">tools = [get_weather]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置智能体执行流程</span></span><br><span class="line">agent = create_xml_agent(llm, tools, prompt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 AgentExecutor 用于执行智能体逻辑</span></span><br><span class="line">agent_executor = AgentExecutor(</span><br><span class="line">    agent=agent,  <span class="comment"># 绑定配置好的智能体</span></span><br><span class="line">    tools=tools,  <span class="comment"># 绑定工具，使智能体能够调用 get_weather</span></span><br><span class="line">    verbose=<span class="literal">True</span>,  <span class="comment"># 设置为 True 以打印执行过程，方便调试</span></span><br><span class="line">    return_intermediate_steps=<span class="literal">True</span>  <span class="comment"># 允许返回中间步骤，方便分析 LLM 过程</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 AgentExecutor 执行温差查询任务</span></span><br><span class="line"><span class="built_in">print</span>(agent_executor.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;对比一下今天北京和大理的温差？&quot;</span>&#125;))</span><br></pre></td></tr></table></figure>## 5.7 总结&amp;emsp;&amp;emsp;综上，大家能够理解到的是：通过`Chains`模块，可以创建预定义的工具使用顺序。当我们知道任何用户输入所需的工具使用的具体顺序时，链就非常有用。但对于某些用例，我们使用工具的次数取决于输入。在这些情况下，我们希望让大模型本身决定使用工具的次数和顺序。这就是构建应用的第二种方式：`Agents`。&amp;emsp;&amp;emsp;在LangChain框架中构建应用和使用外部工具的方式基本就是这两种：链式和代理式。我们可以定义为：`Chains`是一种硬编码，而`Agents`是灵活的。其相同点都是一步一步地完成一系列子任务，最终实现复杂任务。两者间的差别在于：`chains` 是提前定义好的，而对于`Agents`，当我们给了它一堆工具，不同的问题，任务的顺序可能是不一样，它会自己来拆解并完成。所以我们说`Agents`是大脑，`Chains`仅仅是借助大模型做的流程。但`Agents`的构建过程，更多依赖的是大模型的原生能力，因为其内部处理逻辑完全是由大模型本身来分析决定的，这一过程中并没有人为的介入，所以当大家构建`Agents`时如果使用的大模型本身能力不够，就需要去考虑用怎样的提示结构去引导，亦或采取微调的方式去增强模型的推理和执行能力，这些都是需要大家根据自己的实际情况进行灵活的处理。&amp;emsp;&amp;emsp;当然，除了OpenAI的 Function Calling，及我们介绍的ReAct，还有很多`Agents`的开发范式，比如self-ask，其论文地址：https://arxiv.org/pdf/2210.03350.pdf&amp;emsp;&amp;emsp;Agents项目中比较典型的像langchain，AutoGPT、huginn等还是非常多的，大家可以根据自己的开发需求进行相关的扩展探索。&gt; AutoGPT：https://github.com/Significant-Gravitas/AutoGPT&gt; huginn : https://github.com/huginn/huginn# 6. Retrieval## 6.1 RAG架构![image-20250330101711467](/images/10.Agent实战技能之LangChain全面剖析/image-20250330101711467.png)## 6.2 data conncetiong![image-20250330102047783](/images/10.Agent实战技能之LangChain全面剖析/image-20250330102047783.png)### 6.2.1 Source&amp;emsp;&amp;emsp;`Source`概念指的是RAG架构中所外挂的知识库。正如我们之前所讨论的，因为大模型的原生能力很强，所以它可以识别多种不同的类型的原始数据而不用做额外的处理，而且在实际场景中，私有数据通常也并不是单一的，可以来自多种不同的形式，可以是上百个.csv文件，可以是上千个.json文件，也可以是上万个.pdf文件，同时如果对接到具体的业务，可以是某一个业务流程外放的API，可以是某个网站的实时数据等多种情况。### 6.2.2 Loader&amp;emsp;&amp;emsp;LangChain首先做的就是：将常见的数据格式和数据来源使用LangChain的规范，抽象出一个一个的单独的集成模块，称为文档加载器（Document loaders），用于快速加载某种形式下的文本数据。如下图所示：![image-20250330192717188](/images/10.Agent实战技能之LangChain全面剖析/image-20250330192717188.png)1. **加载txt文档**<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> TextLoader</span><br><span class="line"></span><br><span class="line">docs = TextLoader(<span class="string">&#x27;./data/langchain.txt&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>).load()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(docs)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(docs[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(docs[<span class="number">0</span>].page_content)</span><br><span class="line"><span class="built_in">print</span>(docs[<span class="number">0</span>].page_content[:<span class="number">30</span>])</span><br><span class="line"><span class="built_in">print</span>(docs[<span class="number">0</span>].metadata)</span><br></pre></td></tr></table></figure>2. **加载pdf**<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> PyPDFLoader</span><br><span class="line"></span><br><span class="line">loader = PyPDFLoader(<span class="string">&quot;./data/本地知识库.pdf&quot;</span>)</span><br><span class="line">pages = loader.load_and_split()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pages)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(pages[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(pages[<span class="number">0</span>].page_content)</span><br><span class="line"><span class="built_in">print</span>(pages[<span class="number">0</span>].page_content[:<span class="number">30</span>])</span><br><span class="line"><span class="built_in">print</span>(pages[<span class="number">0</span>].metadata)</span><br></pre></td></tr></table></figure>&gt; 对于`TextLoader`，依然是使用`.page_content`和`.metadata`去访问数据，也就是说，每一个文档加载器虽然代码逻辑不同，应用需求不同，但使用方式是相同的。这就需要我们去理解为什么要这样做。这其实很容易想到，对于`Sourch`中多种不同的数据源，要想能在接下来的流程中可以用一种统一的形式检索、调用，至少要保证的是：把它们以一种相对统一的方式读取出来。所以LangChain的设计就是对于每一个在LangChain中集成的文档加载器，都要继承自`BaseLoader` and `Document Class`基类，当不同来源的数据通过`load`方法加载进来后，全部转化成`Documents`对象。实现逻辑如下所示：&gt;&gt; &amp;emsp;&amp;emsp;`BaseLoader` 类定义了如何从不同的数据源加载文档，每个基于不同数据源实现的`loader`，都需要集成`BaseLoader`。Baseloader要求不对，对于任何具体实现的loader，最少都要实现 load方法。&gt; <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaseLoader</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;文档加载器接口。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    实现应当使用生成器实现延迟加载方法，以避免一次性将所有文档加载进内存。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    `load` 方法仅供用户方便使用，不应被重写。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子类不应直接实现此方法。而应实现延迟加载方法。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self</span>) -&gt; <span class="type">List</span>[Document]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将数据加载为 Document 对象。&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="variable language_">self</span>.lazy_load())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_and_split</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self, text_splitter: <span class="type">Optional</span>[TextSplitter] = <span class="literal">None</span></span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="type">List</span>[Document]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;加载文档并将其分割成块。块以 Document 形式返回。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        不要重写此方法。它应被视为已弃用！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数:</span></span><br><span class="line"><span class="string">            text_splitter: 用于分割文档的 TextSplitter 实例。默认为 RecursiveCharacterTextSplitter。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回:</span></span><br><span class="line"><span class="string">            文档列表。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">                .....</span><br><span class="line">                .....</span><br><span class="line">            _text_splitter: TextSplitter = RecursiveCharacterTextSplitter()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            _text_splitter = text_splitter</span><br><span class="line">        docs = <span class="variable language_">self</span>.load()</span><br><span class="line">        <span class="keyword">return</span> _text_splitter.split_documents(docs)</span><br></pre></td></tr></table></figure>&gt; &amp;emsp;&amp;emsp;`Document`允许用户与文档的内容进行交互，可以查看文档内容。&gt;&gt; <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Document</span>(<span class="title class_ inherited__">Serializable</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用于存储文本及其关联元数据的类。&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    page_content: <span class="built_in">str</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;字符串文本。&quot;&quot;&quot;</span></span><br><span class="line">    metadata: <span class="built_in">dict</span> = Field(default_factory=<span class="built_in">dict</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;关于页面内容的任意元数据（例如，来源、与其他文档的关系等）。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">type</span>: <span class="type">Literal</span>[<span class="string">&quot;Document&quot;</span>] = <span class="string">&quot;Document&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, page_content: <span class="built_in">str</span>, **kwargs: <span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将 page_content 作为位置参数或命名参数传入。&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(page_content=page_content, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_lc_serializable</span>(<span class="params">cls</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回此类是否可序列化。&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_lc_namespace</span>(<span class="params">cls</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取 langchain 对象的命名空间。&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;langchain&quot;</span>, <span class="string">&quot;schema&quot;</span>, <span class="string">&quot;document&quot;</span>]</span><br></pre></td></tr></table></figure>3. **加载JSON格式**&amp;emsp;&amp;emsp;LangChain提供的JSON格式的文档加载器是`JSONLoader`，根据其说明，JSONLoader 使用指定的 jq 架构来解析 JSON 文件。所谓的jq，它是一个轻量级的命令行 JSON 处理器，可以通过特定的语法在命令行中对 JSON 格式的数据进行各种复杂的处理，包括数据过滤、映射、减少和转换。jq 的语法设计得非常灵活和强大，使其成为处理 JSON 数据的首选工具之一。它的主要特点包括：1. **灵活的过滤器**：通过简单的过滤器表达式，可以轻松提取数据、修改数据结构或筛选出满足特定条件的数据项。2. **无需循环**：与编写复杂的脚本或程序不同，jq 允许你直接应用表达式来处理数据，无需编写循环语句。3. **多样的函数**：jq 提供了大量的内置函数，用于字符串处理、数值计算、数组/对象操作等，也支持自定义函数。4. **管道操作**：jq 支持管道操作（类似于 UNIX/Linux 中的管道），可以将一个表达式的输出作为另一个表达式的输入，实现复杂的数据处理流程。&amp;emsp;&amp;emsp;比如jq 的一个基本示例是，我们可以使用它来提取 JSON 数据中的特定字段。假设有一个 JSON 文件 `example.json`，内容如下：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;employees&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span> <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;New York&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jane&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span> <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Los Angeles&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Doe&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span> <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Chicago&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>&amp;emsp;&amp;emsp;可以使用 jq 的命令行工具来提取所有员工的名字，命令如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq <span class="string">&#x27;.employees[].name&#x27;</span> example.json</span><br></pre></td></tr></table></figure>&amp;emsp;&amp;emsp;这条命令会输出：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;John&quot;</span><br><span class="line">&quot;Jane&quot;</span><br><span class="line">&quot;Doe&quot;</span><br></pre></td></tr></table></figure>&amp;emsp;&amp;emsp;jq 的这些能力使其在数据处理和分析中非常有用，尤其是当处理复杂或大量的 JSON 数据时。更多的jq使用技巧，可以查阅：https://en.wikipedia.org/wiki/Jq_(programming_language)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> JSONLoader</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">loader = JSONLoader(</span><br><span class="line">    file_path=<span class="string">&#x27;./data/test.json&#x27;</span>,</span><br><span class="line">    jq_schema=<span class="string">&#x27;.[].commentary&#x27;</span>,</span><br><span class="line">    text_content=<span class="literal">False</span>)</span><br><span class="line">data = loader.load()</span><br><span class="line"></span><br><span class="line">pprint(data[:<span class="number">1</span>])</span><br></pre></td></tr></table></figure>4. 自定义加载器&amp;emsp;&amp;emsp;LangChain中构造自定义文档加载器涉及创建 `Document` 对象，该对象封装提取的文本 ( page_content ) 以及元数据——包含文档详细信息的字典，例如作者姓名或发布日期。而在随后的流程中，`Document` 对象会被格式化为输入到 LLM 中的提示，允许 LLM 使用 `Document` 中的信息来生成期望的回应（例如，总结文档）。 Documents 可以直接使用，也可以索引到矢量存储中以供将来检索和使用。&amp;emsp;&amp;emsp;对于文档加载器必须实现的的抽象是：| 组件       | 描述                                   | 中文描述                 || ---------- | -------------------------------------- | ------------------------ || Document   | Contains text and metadata             | 包含文本和元数据         || BaseLoader | Use to convert raw data into Documents | 用于将原始数据转换为文档 |<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core.documents <span class="keyword">import</span> Document</span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders.base <span class="keyword">import</span> BaseLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomJSONLoader</span>(<span class="title class_ inherited__">BaseLoader</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加载 JSON 文件并使用 jq 模式提取数据。&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_path: <span class="type">Union</span>[<span class="built_in">str</span>, Path], jq_schema: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化 JSONLoader。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数:</span></span><br><span class="line"><span class="string">            file_path (Union[str, Path]): JSON 或 JSON Lines 文件的路径。</span></span><br><span class="line"><span class="string">            jq_schema (str): 用于提取 JSON 数据的 jq 模式。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">import</span> jq</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.file_path = Path(file_path).resolve()</span><br><span class="line">        <span class="variable language_">self</span>._jq_schema = jq.<span class="built_in">compile</span>(jq_schema)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self</span>) -&gt; <span class="type">List</span>[Document]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从 JSON 文件中加载数据并返回文档列表。&quot;&quot;&quot;</span></span><br><span class="line">        docs: <span class="type">List</span>[Document] = []</span><br><span class="line">        <span class="variable language_">self</span>._parse(<span class="variable language_">self</span>.file_path.read_text(encoding=<span class="string">&quot;utf-8&quot;</span>), docs)</span><br><span class="line">        <span class="keyword">return</span> docs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse</span>(<span class="params">self, content: <span class="built_in">str</span>, docs: <span class="type">List</span>[Document]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;解析 JSON 内容并转换为文档对象。&quot;&quot;&quot;</span></span><br><span class="line">        data = <span class="variable language_">self</span>._jq_schema.<span class="built_in">input</span>(json.loads(content)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> data:</span><br><span class="line">            metadata = &#123;<span class="string">&quot;result&quot;</span>: <span class="string">&quot;\n&quot;</span>.join(sample), <span class="string">&quot;source&quot;</span>: <span class="built_in">str</span>(<span class="variable language_">self</span>.file_path)&#125;</span><br><span class="line">            docs.append(Document(page_content=<span class="string">&quot;\n&quot;</span>.join(sample), metadata=metadata))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理多个会话的 JSON 数据</span></span><br><span class="line">json_file_path = <span class="string">&#x27;./data/cn_test_set.json&#x27;</span></span><br><span class="line">total_sessions = <span class="number">3</span>  <span class="comment"># 假设有 3 个 Session</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, total_sessions + <span class="number">1</span>):</span><br><span class="line">    jq_schema = <span class="string">f&#x27;.&quot;Session-<span class="subst">&#123;i&#125;</span>&quot;.&quot;对话历史&quot;&#x27;</span></span><br><span class="line">    loader = CustomJSONLoader(file_path=json_file_path, jq_schema=jq_schema)</span><br><span class="line">    data = loader.load()</span><br><span class="line">    pprint(data)</span><br></pre></td></tr></table></figure>### 6.2.3 Transformers![image-20250330193924275](/images/10.Agent实战技能之LangChain全面剖析/image-20250330193924275.png)**Chunking拆分的策略：**1. **根据句子切分**：这种方法按照自然句子边界进行切分，以保持语义完整性。2. **按照固定字符数来切分**：这种策略根据特定的字符数量来划分文本，但可能会在不适当的位置切断句子。3. **按固定字符数来切分，结合重叠窗口（overlapping windows）**：此方法与按字符数切分相似，但通过重叠窗口技术避免切分关键内容，确保信息连贯性。4. **递归方法**：通过递归方式动态确定切分点，这种方法可以根据文档的复杂性和内容密度来调整块的大小。5. **根据语义切割**：这种高级策略依据文本的语义内容来划分块，旨在保持相关信息的集中和完整，适用于需要高度语义保持的应用场景。&amp;emsp;&amp;emsp;第二种方法（按照字符数切分）和第三种方法（按固定字符数切分结合重叠窗口）主要基于字符进行文本的切分，而不考虑文章的实际内容和语义。这种方式虽简单，但可能会导致主题或语义上的断裂。相对而言，递归方法更加灵活和高效，它结合了固定长度切分和语义分析。通常是首选策略，因为它能够更好地确保每个段落包含一个完整的主题。而最后一项，基于语义的分割虽然能精确地切分出完整的主题段落，但这种方法效率较低。它需要运行复杂的分段算法（segmentation algorithm），处理速度较慢，并且段落长度可能极不均匀——有的主题段落可能很长，而有的则较短。因此，尽管它在某些需要高精度语义保持的场景下有其应用价值，但并不适合所有情况。1. 根据句子切分&amp;emsp;&amp;emsp;按照句子切分，其实就是通过标点符号来进行文本切分（分割），这可以直接使用Python的标准库来完成这个任务。一种简单的方法是使用re模块，它提供了正则表达式的支持，可以方便地根据标点符号来分割文本。如下示例中，展示了如何使用re.split()函数来根据中文和英文的标点符号进行文本切分。代码如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_text_by_punctuation</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="comment"># 定义一个正则表达式，包括常见的中英文标点</span></span><br><span class="line">    <span class="comment"># pattern = r&quot;[。！？｡＂＃＄％＆＇（）＊＋，－／：；＜＝＞＠［＼］＾＿｀｛｜｝～\s、]+&quot;</span></span><br><span class="line">    pattern = <span class="string">r&quot;[。！？｡]+&quot;</span></span><br><span class="line">    <span class="comment"># 使用正则表达式进行分割</span></span><br><span class="line">    segments = re.split(pattern, text)</span><br><span class="line">    <span class="comment"># 过滤掉空字符串</span></span><br><span class="line">    <span class="keyword">return</span> [segment <span class="keyword">for</span> segment <span class="keyword">in</span> segments <span class="keyword">if</span> segment]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本</span></span><br><span class="line">text = <span class="string">&quot;盼望着，盼望着，东风来了，春天的脚步近了。\</span></span><br><span class="line"><span class="string">一切都象刚睡醒的样子，欣欣然张开了眼。山朗润起来了，水涨起来了，太阳的脸红起来了！\</span></span><br><span class="line"><span class="string">小草偷偷地从土里钻出来，嫩嫩的，绿绿的。园子里，田野里，瞧去，一大片一大片满是的。\</span></span><br><span class="line"><span class="string">坐着，趟着，打两个滚，踢几脚球，赛几趟跑，捉几回迷藏。风轻悄悄的，草软绵绵的。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数进行分割</span></span><br><span class="line">segments = split_text_by_punctuation(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用循环来打印每个chunk</span></span><br><span class="line"><span class="keyword">for</span> i, segment <span class="keyword">in</span> <span class="built_in">enumerate</span>(segments):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Chunk &#123;&#125;: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>, segment))</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Chunk <span class="number">1</span><span class="punctuation">:</span> 盼望着，盼望着，东风来了，春天的脚步近了</span><br><span class="line">Chunk <span class="number">2</span><span class="punctuation">:</span> 一切都象刚睡醒的样子，欣欣然张开了眼</span><br><span class="line">Chunk <span class="number">3</span><span class="punctuation">:</span> 山朗润起来了，水涨起来了，太阳的脸红起来了</span><br><span class="line">Chunk <span class="number">4</span><span class="punctuation">:</span> 小草偷偷地从土里钻出来，嫩嫩的，绿绿的</span><br><span class="line">Chunk <span class="number">5</span><span class="punctuation">:</span> 园子里，田野里，瞧去，一大片一大片满是的</span><br><span class="line">Chunk <span class="number">6</span><span class="punctuation">:</span> 坐着，趟着，打两个滚，踢几脚球，赛几趟跑，捉几回迷藏</span><br><span class="line">Chunk <span class="number">7</span><span class="punctuation">:</span> 风轻悄悄的，草软绵绵的</span><br></pre></td></tr></table></figure>2. 根据固定字符数切分&amp;emsp;&amp;emsp;如果想按照固定字符数来切分文本，这种方法就不再依赖于标点符号，而是简单地按照给定的字符数来切分文本。我们可以编写一个函数，用来将文本分割成指定长度的片段。代码如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">split_text_by_fixed_length</span>(<span class="params">text, length</span>):</span><br><span class="line">    <span class="comment"># 使用列表推导式按固定长度切分文本</span></span><br><span class="line">    <span class="keyword">return</span> [text[i:i + length] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text), length)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本</span></span><br><span class="line">text = <span class="string">&quot;盼望着，盼望着，东风来了，春天的脚步近了。\</span></span><br><span class="line"><span class="string">一切都象刚睡醒的样子，欣欣然张开了眼。山朗润起来了，水涨起来了，太阳的脸红起来了！\</span></span><br><span class="line"><span class="string">小草偷偷地从土里钻出来，嫩嫩的，绿绿的。园子里，田野里，瞧去，一大片一大片满是的。\</span></span><br><span class="line"><span class="string">坐着，趟着，打两个滚，踢几脚球，赛几趟跑，捉几回迷藏。风轻悄悄的，草软绵绵的。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义每个片段的长度</span></span><br><span class="line">chunk_length = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数进行分割</span></span><br><span class="line">result = split_text_by_fixed_length(text, chunk_length)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="keyword">for</span> i, segment <span class="keyword">in</span> <span class="built_in">enumerate</span>(result):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Chunk <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>: <span class="subst">&#123;segment&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chunk <span class="number">1</span><span class="punctuation">:</span> 盼望着，盼望着，东风来了，春天的脚步近了。一切都象刚睡醒的样子，欣欣然张开了眼。山朗润起来了，水涨起来了，太阳的脸红起来</span><br><span class="line">Chunk <span class="number">2</span><span class="punctuation">:</span> 了！小草偷偷地从土里钻出来，嫩嫩的，绿绿的。园子里，田野里，瞧去，一大片一大片满是的。坐着，趟着，打两个滚，踢几脚球，赛</span><br><span class="line">Chunk <span class="number">3</span><span class="punctuation">:</span> 几趟跑，捉几回迷藏。风轻悄悄的，草软绵绵的。</span><br></pre></td></tr></table></figure>3. 结合重叠窗口的固定字符数切分<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">split_text_by_fixed_length_with_overlap</span>(<span class="params">text, length, overlap</span>):</span><br><span class="line">    <span class="comment"># 使用列表推导式按固定长度及重叠长度切分文本</span></span><br><span class="line">    <span class="keyword">return</span> [text[i:i + length] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text) - overlap, length - overlap)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本</span></span><br><span class="line">text = <span class="string">&quot;盼望着，盼望着，东风来了，春天的脚步近了。\</span></span><br><span class="line"><span class="string">一切都象刚睡醒的样子，欣欣然张开了眼。山朗润起来了，水涨起来了，太阳的脸红起来了！\</span></span><br><span class="line"><span class="string">小草偷偷地从土里钻出来，嫩嫩的，绿绿的。园子里，田野里，瞧去，一大片一大片满是的。\</span></span><br><span class="line"><span class="string">坐着，趟着，打两个滚，踢几脚球，赛几趟跑，捉几回迷藏。风轻悄悄的，草软绵绵的。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义每个片段的长度和重叠长度</span></span><br><span class="line">chunk_length = <span class="number">60</span></span><br><span class="line">overlap_length = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数进行分割</span></span><br><span class="line">result = split_text_by_fixed_length_with_overlap(text, chunk_length, overlap_length)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="keyword">for</span> i, segment <span class="keyword">in</span> <span class="built_in">enumerate</span>(result):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Chunk <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>: <span class="subst">&#123;segment&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Chunk <span class="number">1</span><span class="punctuation">:</span> 盼望着，盼望着，东风来了，春天的脚步近了。一切都象刚睡醒的样子，欣欣然张开了眼。山朗润起来了，水涨起来了，太阳的脸红起来</span><br><span class="line">Chunk <span class="number">2</span><span class="punctuation">:</span> 山朗润起来了，水涨起来了，太阳的脸红起来了！小草偷偷地从土里钻出来，嫩嫩的，绿绿的。园子里，田野里，瞧去，一大片一大片满</span><br><span class="line">Chunk <span class="number">3</span><span class="punctuation">:</span> 的。园子里，田野里，瞧去，一大片一大片满是的。坐着，趟着，打两个滚，踢几脚球，赛几趟跑，捉几回迷藏。风轻悄悄的，草软绵绵</span><br><span class="line">Chunk <span class="number">4</span><span class="punctuation">:</span> 几趟跑，捉几回迷藏。风轻悄悄的，草软绵绵的。</span><br></pre></td></tr></table></figure>4. LangChain提供的Text Spliter可视化工具https://langchain-text-splitter.streamlit.app/- separators：指定分割文本的分隔符- chunk_size：被切割字符的最大长度- chunk_overlap：如果仅仅使用chunk_size来切割时，前后两段字符串重叠的字符数量。- length_function:如何计算块的长度。默认情况下，只计算字符数，也可以选择按照Token。5. RecursiveCharacterTextSplitter&amp;emsp;&amp;emsp;该文本分割器接受一个字符列表作为参数，根据第一个字符进行切块，但如果任何切块太大，则会继续移动到下一个字符，并以此类推。默认情况下，它尝试进行切割的字符包括 `[&quot;\n\n&quot;, &quot;\n&quot;, &quot; &quot;, &quot;&quot;]`&amp;emsp;&amp;emsp;除此之外，还可以指定的参数包括：- length_function：用于计算切块长度的方法。默认只计算字符数，但通常这里会使用Token。- chunk_size：切块的最大大小（由长度函数测量）。- chunk_overlap：切块之间的最大重叠部分。保持一定程度的重叠可以使得各个切块之间保持连贯性（例如滑动窗口）。- add_start_index：是否在元数据中包含每个切块在原始文档中的起始位置。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter(</span><br><span class="line">    separators=[<span class="string">&quot;\n\n&quot;</span>, <span class="string">&quot;\n&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>], <span class="comment"># 默认</span></span><br><span class="line">    chunk_size=<span class="number">100</span>, <span class="comment">#块长度</span></span><br><span class="line">    chunk_overlap=<span class="number">20</span>, <span class="comment">#重叠字符串长度</span></span><br><span class="line">    add_start_index=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a long document we can split up.</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data/langchain.txt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    langchain_desc = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a long document we can split up.</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data/春.txt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    chun_desc = f.read()</span><br><span class="line"></span><br><span class="line">metadatas = [&#123;<span class="string">&quot;document&quot;</span>: <span class="number">1</span>&#125;, &#123;<span class="string">&quot;document&quot;</span>: <span class="number">2</span>&#125;]</span><br><span class="line"></span><br><span class="line">text_res = text_splitter.create_documents(</span><br><span class="line">    [langchain_desc, chun_desc],</span><br><span class="line">    metadatas=metadatas</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(text_res)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(text_res))</span><br><span class="line"><span class="built_in">print</span>(text_res[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(text_res[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>### 6.2.4 Embedding Model![image-20250330195730120](/images/10.Agent实战技能之LangChain全面剖析/image-20250330195730120.png)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"><span class="keyword">import</span> openai,os</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base=<span class="string">&quot;your_api_base&quot;</span></span><br><span class="line">embeddings_model = OpenAIEmbeddings(model=<span class="string">&quot;text-embedding-ada-002&quot;</span>,openai_api_key=openai.api_key ,openai_api_base=openai.api_base)</span><br><span class="line"></span><br><span class="line">embeddings = embeddings_model.embed_documents(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;Hi there!&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Oh, hello!&quot;</span>,</span><br><span class="line">        <span class="string">&quot;What&#x27;s your name?&quot;</span>,</span><br><span class="line">        <span class="string">&quot;My friends call me World&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(embeddings), <span class="built_in">len</span>(embeddings[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">embedded_query = embeddings_model.embed_query(<span class="string">&quot;What was the name mentioned in the conversation?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(embedded_query[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>### 6.2.5 Vector Stores![image-20250330200245532](/images/10.Agent实战技能之LangChain全面剖析/image-20250330200245532.png)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_chroma <span class="keyword">import</span> Chroma</span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> TextLoader</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> CharacterTextSplitter</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 OpenAI API 相关信息</span></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 OpenAI 嵌入模型</span></span><br><span class="line">my_embedding = OpenAIEmbeddings(</span><br><span class="line">    model=<span class="string">&quot;text-embedding-ada-002&quot;</span>,</span><br><span class="line">    openai_api_key=openai.api_key,</span><br><span class="line">    openai_api_base=openai.api_base</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载文档并拆分为小块</span></span><br><span class="line">loader = TextLoader(<span class="string">&quot;./data/消失的她.txt&quot;</span>)</span><br><span class="line">documents = loader.load()</span><br><span class="line"></span><br><span class="line">text_splitter = CharacterTextSplitter(chunk_size=<span class="number">1000</span>, chunk_overlap=<span class="number">0</span>)</span><br><span class="line">docs = text_splitter.split_documents(documents)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文档嵌入并存入 Chroma 数据库</span></span><br><span class="line">db = Chroma.from_documents(docs, my_embedding)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行相似性搜索</span></span><br><span class="line">query = <span class="string">&quot;《消失的她》这部电影里主要讲的是一个什么故事？&quot;</span></span><br><span class="line">retrieved_docs = db.similarity_search(query)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出搜索结果</span></span><br><span class="line"><span class="built_in">print</span>(retrieved_docs[<span class="number">0</span>].page_content)</span><br></pre></td></tr></table></figure>### 6.2.6 Retrievers![image-20250330200447322](/images/10.Agent实战技能之LangChain全面剖析/image-20250330200447322.png)​在信息检索和自然语言处理任务中，Retrievers（检索器）是一种用于从大量文档中检索与给定查询相关的文档或信息片段的工具。在 Langchain 这个项目中，Retrievers 的作用是从预先构建的文档向量存储（例如 FAISS）中找到与输入查询最相关的文档或文本片段。通常，Retrievers 会执行以下步骤：1. 将输入查询转换为向量表示（通常使用词嵌入或预训练的语言模型）。2. 在向量存储中搜索与查询向量最相似的文档向量（通常使用余弦相似度或欧几里得距离等度量方法）。3. 返回与查询最相关的文档或文本片段，以及它们的相似度得分。</code></pre>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.Agent实战技能之Assistants API</title>
      <link href="/2025/03/24/9.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BAssistants%20API/"/>
      <url>/2025/03/24/9.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BAssistants%20API/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.Agent实战技能之Dify智能应用开发</title>
      <link href="/2025/03/23/8.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BDify%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
      <url>/2025/03/23/8.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BDify%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Dify平台私有化部署"><a href="#1-Dify平台私有化部署" class="headerlink" title="1. Dify平台私有化部署"></a>1. Dify平台私有化部署</h1><p><img src="/images/8.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BDify%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/image-20250323170036475.png" alt="image-20250323170036475"></p><h2 id="1-1-平台介绍"><a href="#1-1-平台介绍" class="headerlink" title="1.1 平台介绍"></a>1.1 平台介绍</h2><h3 id="1-1-1-Dify"><a href="#1-1-1-Dify" class="headerlink" title="1.1.1 Dify"></a>1.1.1 Dify</h3><p>介绍：</p><p>​Dify是⼀款开源的⼤语⾔模型(LLM) 应⽤开发平台，它融合了后端即服务 Backend as  Service 和 LLMOps 的理念，使开发者可以快速搭建⽣产级的⽣成式 AI 应⽤；即使是⾮技术⼈员，也能参与到 AI 应⽤的定义和数据运营过程中来。</p><blockquote><p> LLMOps（Large Language Model Operations）是⼀个涵盖了⼤型语⾔模型开发、部署、维护和优化的⼀整套实践和流程。⽬的是确保安全、⾼效、可扩展地使⽤这些强⼤的 AI 模型来 构建和运⾏实际应⽤程序。</p></blockquote><p>作用：</p><p>​Dify 内置了构建 LLM 应⽤所需的关键技术栈，包括对数百个模型的⽀持、直观的 Prompt 编排界⾯、⾼质量的 RAG 引擎、稳健的 Agent 框架、灵活的流程编排，并同时提供了⼀套易⽤的界⾯和 API，这为开发者节省了许多重复造轮⼦的时间，使其可以专注在创新和业务需 求上。我们可以把 LangChain 这类的开发库想象为有着锤⼦、钉⼦的⼯具箱。与之相⽐， Dify 提供了更接近业务需求的全套⽅案，Dify 好⽐是⼀套脚⼿架，并且经过了精良的⼯程设计和软件测试。</p><p><img src="/images/8.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BDify%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/1280X1280.PNG" alt="1280X1280"></p><p>平台：</p><ul><li>在线的平台：<a href="https://cloud.dify.ai/apps">https://cloud.dify.ai/apps</a></li><li>开源离线部署的平台：<a href="https://github.com/langgenius/dify">https://github.com/langgenius/dify</a></li></ul><h3 id="1-1-2-Ollama"><a href="#1-1-2-Ollama" class="headerlink" title="1.1.2 Ollama"></a>1.1.2 Ollama</h3><p>介绍：</p><p>​当涉及到⼤规模语⾔模型（LLMs）的管理、部署和使⽤时，使⽤像 Ollama 、 XInference 和 LocalAI 这些模型管理⼯具可以显著提升模型的可管理性，提⾼⼯作效率。</p><p>作用：</p><p>​Ollama 是⽤于私有化部署和运⾏⼤型语⾔模型的⼯具，⽀持 通义千问、⼩⽺驼 等多种模型，私有化部署使⽤户没有⽹络连接的情况下也能使⽤这些先进的⼈⼯智能模型； ollama 还提供了模型库⽅便⽤户从中下载和运⾏各种模型；使⽤ ollama 开发者只需使⽤简单的命 令即可实现与模型的交互。</p><p>平台：</p><ul><li>ollama网站地址：<a href="https://ollama.com/">https://ollama.com/</a></li></ul><h3 id="1-1-3-Xineference"><a href="#1-1-3-Xineference" class="headerlink" title="1.1.3 Xineference"></a>1.1.3 Xineference</h3><p>介绍：</p><p>​xinference 是⼀个强⼤且通⽤的分布式推理框架，也可以⽤于私有化部署和运⾏⼤语⾔模 型，通过 xinference 可以简化各种AI模型的运⾏和集成，使开发者可以使⽤任何开源⼤语 ⾔模型、推理模型、多模态模型在云端或本地环境中运⾏、推理，创建强⼤的AI应⽤。</p><p>作用：  </p><ul><li>管理 Embedding 模型：提供高效的向量化文本表示，用于检索、推荐等任务，提高数据查询和匹配的精度。 </li><li>管理 Rerank 模型：在初步检索结果的基础上，对结果进行重新排序，提升最终输出结果的相关性和准确性。</li></ul><h2 id="1-2-私有化部署过程"><a href="#1-2-私有化部署过程" class="headerlink" title="1.2 私有化部署过程"></a>1.2 私有化部署过程</h2><h3 id="1-2-1-linux服务器部署"><a href="#1-2-1-linux服务器部署" class="headerlink" title="1.2.1 linux服务器部署"></a>1.2.1 linux服务器部署</h3><p><a href="https://wlhmbop707.feishu.cn/docx/T2T1dMDbAoOODXxYIBjcDKrTn6C">https://wlhmbop707.feishu.cn/docx/T2T1dMDbAoOODXxYIBjcDKrTn6C</a></p><h3 id="1-2-2-window本地部署"><a href="#1-2-2-window本地部署" class="headerlink" title="1.2.2 window本地部署"></a>1.2.2 window本地部署</h3><h1 id="2-智能体应用构建"><a href="#2-智能体应用构建" class="headerlink" title="2. 智能体应用构建"></a>2. 智能体应用构建</h1><h1 id="3-工作流应用构建"><a href="#3-工作流应用构建" class="headerlink" title="3. 工作流应用构建"></a>3. 工作流应用构建</h1><h1 id="4-知识库应用构建"><a href="#4-知识库应用构建" class="headerlink" title="4. 知识库应用构建"></a>4. 知识库应用构建</h1>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Agent实战基础之ReAct架构实战</title>
      <link href="/2025/03/23/7.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BReAct%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/"/>
      <url>/2025/03/23/7.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BReAct%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Agent流行的工作方式"><a href="#1-Agent流行的工作方式" class="headerlink" title="1. Agent流行的工作方式"></a>1. Agent流行的工作方式</h1><p><img src="/images/7.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BReAct%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/image-20250323144652133.png" alt="image-20250323144652133"></p><h1 id="2-手动实现ReAct智能应用框架"><a href="#2-手动实现ReAct智能应用框架" class="headerlink" title="2. 手动实现ReAct智能应用框架"></a>2. 手动实现ReAct智能应用框架</h1><h2 id="2-1-ReAct-架构"><a href="#2-1-ReAct-架构" class="headerlink" title="2.1 ReAct 架构"></a>2.1 ReAct 架构</h2><p><img src="/images/7.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BReAct%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/image-20250323145522620.png" alt="image-20250323145522620"></p><p>&emsp;&emsp;ReAct Agent 也称为 <code>ReAct</code>，是一个用于提示大语言模型的框架，它首次在 2022 年 10 月的论文<a href="https://arxiv.org/pdf/2210.03629">《ReAct：Synergizing Reasoning and Acting in Language Models》</a>中引入，并于2023 年 3 月修订。该框架的开发是为了协同大语言模型中的推理和行动，使它们更加强大、通用和可解释。通过交叉推理和行动，ReAct 使智能体能够动态地在产生想法和特定于任务的行动之间交替。</p><p>&emsp;&emsp;ReAct 框架有两个过程，由 <code>Reason</code> 和 <code>Act</code> 结合而来。从本质上讲，这种方法的灵感来自于人类如何通过和谐地结合思维和行动来执行任务，就像我们上面“我想去北京旅游”这个真实示例一样。</p><p>&emsp;&emsp;首先第一部分 Reason，它基于一种推理技术——<a href="https://arxiv.org/pdf/2201.11903">思想链（CoT）</a>， CoT是一种提示工程，通过将输入分解为多个逻辑思维步骤，帮助大语言模型执行推理并解决复杂问题。这使得大模型能够按顺序规划和解决任务的每个部分，从而更准确地获得最终结果，具体包括：</p><ul><li>分解问题：当面对复杂的任务时，CoT 方法不是通过单个步骤解决它，而是将任务分解为更小的步骤，每个步骤解决不同方面的问题。</li><li>顺序思维：思维链中的每一步都建立在上一步的结果之上。这样，模型就能从头到尾构造出一条逻辑推理链。</li></ul><h2 id="2-2-提示词设计"><a href="#2-2-提示词设计" class="headerlink" title="2.2 提示词设计"></a>2.2 提示词设计</h2><h3 id="2-2-1-指定角色"><a href="#2-2-1-指定角色" class="headerlink" title="2.2.1 指定角色"></a>2.2.1 指定角色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">您在一个由“思考、行动、观察、回答<span class="string">&quot;组成的循环中运行。</span></span><br><span class="line"><span class="string">在循环的最后，您输出一个答案。</span></span><br><span class="line"><span class="string">使用“思考”来描述您对所提问题的思考。</span></span><br><span class="line"><span class="string">使用“行动&quot;</span>来执行您可用的动作之一-。</span><br><span class="line">“观察”将是执行这些动作的结果。</span><br><span class="line">“回答”将是分析“观察<span class="string">&quot;结果后得出的答案。</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-指定工具"><a href="#2-2-2-指定工具" class="headerlink" title="2.2.2 指定工具"></a>2.2.2 指定工具</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">您可用的动作包括:</span><br><span class="line">calculate (计算) :</span><br><span class="line">例如: calculate:<span class="number">4</span>*<span class="number">7</span>/<span class="number">3</span></span><br><span class="line">执行计算并返回数字。使用Python,如有必要请确保使用浮点数语法</span><br><span class="line">wikipedia (维基百科) :</span><br><span class="line">例如: wikipedia: Django</span><br><span class="line">返回从维基百料搜索的摘要</span><br></pre></td></tr></table></figure><h3 id="2-2-3-给出示例"><a href="#2-2-3-给出示例" class="headerlink" title="2.2.3 给出示例"></a>2.2.3 给出示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例会话:</span><br><span class="line">问题:法国的首都是什么?</span><br><span class="line">思考:我应该在维基百科上查找关于法国的信息</span><br><span class="line">行动: wikipedia: France</span><br><span class="line">然后您应该调用适当的动作，并从结果中确定答案</span><br><span class="line">您然后输出:</span><br><span class="line">回答:法国的首都是巴黎</span><br></pre></td></tr></table></figure><h2 id="2-3-手写ReAct-Agent"><a href="#2-3-手写ReAct-Agent" class="headerlink" title="2.3 手写ReAct Agent"></a>2.3 手写ReAct Agent</h2><h3 id="2-3-1-定义大模型接口"><a href="#2-3-1-定义大模型接口" class="headerlink" title="2.3.1 定义大模型接口"></a>2.3.1 定义大模型接口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChatBot</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, system=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.system = system</span><br><span class="line">        <span class="variable language_">self</span>.messages = []</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.system:</span><br><span class="line">            <span class="variable language_">self</span>.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="variable language_">self</span>.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: message&#125;)</span><br><span class="line">        result = <span class="variable language_">self</span>.execute()</span><br><span class="line">        <span class="variable language_">self</span>.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: result&#125;)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line">        completion = client.chat.completions.create(model=<span class="string">&quot;gpt-4o&quot;</span>, messages=<span class="variable language_">self</span>.messages)</span><br><span class="line">        <span class="keyword">return</span> completion.choices[<span class="number">0</span>].message.content</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;如上所示，这段代码定义了一个<code>ChatBot</code>的类，用来创建和处理一个基于<code>OpenAI GPT-4</code>模型的聊天机器人。下面是每个部分的具体解释：</p><ul><li><strong>init</strong> 方法用来接收系统提示(System Prompt)，并追加到全局的消息列表中。</li><li><strong>call</strong> 方法是 <code>Python</code> 类的一个特殊方法, 当对一个类的实例像调用函数一样传递参数并执行时，实际上就是在调用这个类的 <strong>call</strong> 方法。其内部会 调用<code>execute</code> 方法。</li><li>execute 方法实际上就是与<code>OpenAI</code>的API进行交互，发送累积的消息历史（包括系统消息、用户消息和之前的回应）到OpenAI的聊天模型,返回最终的响应。</li></ul></blockquote><h3 id="2-3-2-定义代理循环逻辑"><a href="#2-3-2-定义代理循环逻辑" class="headerlink" title="2.3.2 定义代理循环逻辑"></a>2.3.2 定义代理循环逻辑</h3><p>&emsp;&emsp;从<code>Thought</code> 到 <code>Action</code> ， 最后到 <code>Observation</code> 状态，是一个循环的逻辑，而循环的次数，取决于大模型将用户的原始 <code>Goal</code> 分成了多少个子任务。 所有在这样的逻辑中，我们需要去处理的是：</p><ol><li>判断大模型当前处于哪一个状态阶段</li><li>如果停留在 <code>Action</code> 阶段，需要像调用 Function Calling 的过程一样，先执行工具，再将工具的执行结果传递给<code>Obversation</code> 状态阶段。</li></ol><p>&emsp;由此，我们定义了如下的一个 <code>AgentExecutor</code>函数。该函数实现一个循环，检测状态并使用正则表达式提取当前停留的状态阶段。不断地迭代，直到没有更多的（或者我们已达到最大迭代次数）调用操作，再返回最终的响应。完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">action_re = re.<span class="built_in">compile</span>(<span class="string">&#x27;^Action: (\w+): (.*)$&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AgentExecutor</span>(<span class="params">question, max_turns=<span class="number">5</span></span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    bot = ChatBot(system_prompt)</span><br><span class="line">    <span class="comment"># 通过 next_prompt 标识每一个子任务的阶段性输入</span></span><br><span class="line">    next_prompt = question</span><br><span class="line">    <span class="keyword">while</span> i &lt; max_turns:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 这里调用的就是 ChatBot 类的 __call__ 方法</span></span><br><span class="line">        result = bot(next_prompt)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;result:<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 在这里通过正则判断是否到了需要调用函数的Action阶段</span></span><br><span class="line">        actions = [action_re.<span class="keyword">match</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> result.split(<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">if</span> action_re.<span class="keyword">match</span>(a)]</span><br><span class="line">        <span class="keyword">if</span> actions:</span><br><span class="line">            <span class="comment"># 提取调用的工具名和工具所需的入参</span></span><br><span class="line">            action, action_input = actions[<span class="number">0</span>].groups()</span><br><span class="line">            <span class="keyword">if</span> action <span class="keyword">not</span> <span class="keyword">in</span> available_actions:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&quot;Unknown action: &#123;&#125;: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(action, action_input))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;running: <span class="subst">&#123;action&#125;</span> <span class="subst">&#123;action_input&#125;</span>&quot;</span>)</span><br><span class="line">            observation = available_actions[action](action_input)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Observation: <span class="subst">&#123;observation&#125;</span>&quot;</span>)</span><br><span class="line">            next_prompt = <span class="string">&quot;Observation: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(observation)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> bot.messages</span><br></pre></td></tr></table></figure><h3 id="2-3-3-LangChain内置的ReAct框架"><a href="#2-3-3-LangChain内置的ReAct框架" class="headerlink" title="2.3.3 LangChain内置的ReAct框架"></a>2.3.3 LangChain内置的ReAct框架</h3><p>&emsp;&emsp;就目前的AI Agent 现状而言，流行的代理框架都有内置的 ReAct 代理，比如<code>Langchain</code>、<code>LlamaIndex</code>中的代理，或者 <code>CrewAI</code>这种新兴起的AI Agent开发框架，都是基于ReAct理念的一种变种。LangChain 的 ReAct 代理工程描述 👇</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Answer the following questions <span class="keyword">as</span> best you can. You have access </span><br><span class="line">to the following tools:</span><br><span class="line"></span><br><span class="line">&#123;tools&#125;</span><br><span class="line"></span><br><span class="line">Use the following <span class="built_in">format</span>:</span><br><span class="line"></span><br><span class="line">Question: the <span class="built_in">input</span> question you must answer</span><br><span class="line">Thought: you should always think about what to do</span><br><span class="line">Action: the action to take, should be one of [&#123;tool_names&#125;]</span><br><span class="line">Action Input: the <span class="built_in">input</span> to the action</span><br><span class="line">Observation: the result of the action</span><br><span class="line"><span class="meta">... </span>(this Thought/Action/Action Input/Observation can repeat N times)</span><br><span class="line">Thought: I now know the final answer</span><br><span class="line">Final Answer: the final answer to the original <span class="built_in">input</span> question</span><br><span class="line"></span><br><span class="line">Begin!</span><br><span class="line"></span><br><span class="line">Question: &#123;<span class="built_in">input</span>&#125;</span><br><span class="line">Thought:&#123;agent_scratchpad&#125;</span><br><span class="line"></span><br><span class="line">There are three placeholders &#123;tool&#125;, &#123;<span class="built_in">input</span>&#125;, <span class="keyword">and</span> &#123;agent_scratchpad&#125; <span class="keyword">in</span> this prompt. These will be replaced <span class="keyword">with</span> the appropriate text before sending it to LLM.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">尽你所能回答以下问题。您有访问权限</span><br><span class="line">使用以下工具：</span><br><span class="line"></span><br><span class="line">&#123;tool&#125;</span><br><span class="line"></span><br><span class="line">使用以下格式：</span><br><span class="line"></span><br><span class="line">问题：您必须回答的输入问题</span><br><span class="line">思考：你应该始终思考该做什么</span><br><span class="line">操作：要采取的操作，应该是〔｛tool_names｝〕之一</span><br><span class="line">动作输入：动作的输入</span><br><span class="line">观察：行动的结果</span><br><span class="line">…（这个想法/行动/行动输入/观察可以重复N次）</span><br><span class="line">想：我现在知道最终答案了</span><br><span class="line">最终答案：原始输入问题的最终答案</span><br><span class="line"></span><br><span class="line">开始！</span><br><span class="line"></span><br><span class="line">问题：&#123;<span class="built_in">input</span>&#125;</span><br><span class="line">思考：&#123;agent_scratchpad&#125;</span><br><span class="line"></span><br><span class="line">此提示中有三个占位符&#123;tool&#125;、&#123;<span class="built_in">input</span>&#125;和&#123;agent_scratchpad&#125;。在发送给LLM之前，这些将被替换为适当的文本。</span><br></pre></td></tr></table></figure><h1 id="3-基于-ReAct-Agent-实现智能客服"><a href="#3-基于-ReAct-Agent-实现智能客服" class="headerlink" title="3. 基于 ReAct Agent 实现智能客服"></a>3. 基于 ReAct Agent 实现智能客服</h1><h2 id="3-1-提示词设计"><a href="#3-1-提示词设计" class="headerlink" title="3.1 提示词设计"></a>3.1 提示词设计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.system_prompt = <span class="string">&quot;&quot;&quot; 你是一位智能的电子商务平台客服助手。必须及时回答用户关于产品的咨询。如果问题与具体产品无关，你可以直接回答。 输出格式为：Answer: [你的回答]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">示例： Answer: 还有什么我可以帮您的吗？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果涉及具体产品信息，你需要进入思考-行动-观察的循环模式。 使用Thought来描述你的分析过程。 使用Action来运行一个可用的工具——然后等待Observation。 当你得出最终答案时，输出格式为：Answer: [你的回答]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可用工具：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">query_by_product_name: 查询数据库，检索与指定产品名称匹配或包含该名称的产品列表。此功能可用于帮助客户通过在线平台或客服界面按名称查找产品。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">read_store_promotions: 读取商店的促销文件，查找与提供的产品名称相关的具体促销信息。此功能会扫描文本文件，寻找包含产品名称的促销条目。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">calculate: 结合产品的售价和优惠信息，计算最终交易价格。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用Action时，始终按以下格式： Action: tool_name: argument1, argument2, ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">示例： Human: 你们店里有卖足球吗？如果有的话，现在有什么优惠政策？我现在买的话，最后多少钱？ Thought: 要回答这个问题，我需要先查询后台的数据库。 Action: query_by_product_name: football</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Observation: 目前我已查到足球有库存，价格为120元。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Thought: 我需要进一步查询关于足球的优惠政策 Action: read_store_promotions: football</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Observation: 目前足球的促销政策是：购买享受9折优惠</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Thought: 现在我需要结合足球的售价和优惠政策，计算最终交易价格 Action: calculate: 120 * 0.9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Observation: 足球最终价格为108.0元</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Thought: 我已经获得了回答问题所需的全部信息。 Answer: 根据您的咨询，我们店里确实有足球出售，当前售价为120元。目前购买享受9折优惠，因此如果您现在购买，最终成交价格是108元。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：你必须用中文回答最终结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">现在轮到你了： &quot;&quot;&quot;</span>.strip()</span><br></pre></td></tr></table></figure><h2 id="3-2-Agent定义"><a href="#3-2-Agent定义" class="headerlink" title="3.2 Agent定义"></a>3.2 Agent定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomerServiceAgent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, client, config</span>):</span><br><span class="line">        <span class="variable language_">self</span>.client = client</span><br><span class="line">        <span class="variable language_">self</span>.config = config</span><br><span class="line">        <span class="variable language_">self</span>.messages = []</span><br><span class="line">        <span class="variable language_">self</span>.system_prompt = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        You are a Intelligent customer service assistant for e-commerce platform. It is necessary to answer the user&#x27;s consultation about the product in a timely manner. If it has nothing to do with the specific product, you can answer it directly.</span></span><br><span class="line"><span class="string">        output it as Answer: [Your answer here].</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">        Example :</span></span><br><span class="line"><span class="string">        Answer: Is there anything else I can help you with</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        If specific information about the product is involved, You run in a loop of Thought, Action, Observation.</span></span><br><span class="line"><span class="string">        Use Thought to describe your analysis process.</span></span><br><span class="line"><span class="string">        Use Action to run one of the available tools - then wait for an Observation.</span></span><br><span class="line"><span class="string">        When you have a final answer, output it as Answer: [Your answer here].</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Available tools:</span></span><br><span class="line"><span class="string">        1. query_by_product_name: Query the database to retrieve a list of products that match or contain the specified product name. This function can be used to assist customers in finding products by name via an online platform or customer support interface</span></span><br><span class="line"><span class="string">        2. read_store_promotions: Read the store&#x27;s promotion document to find specific promotions related to the provided product name. This function scans a text document for any promotional entries that include the product name.</span></span><br><span class="line"><span class="string">        3. calculate: Calculate the final transaction price by combining the selling price and preferential information of the product</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        When using an Action, always format it as:</span></span><br><span class="line"><span class="string">        Action: tool_name: argument1, argument2, ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Example :</span></span><br><span class="line"><span class="string">        Human: Do you sell football in your shop? If you sell soccer balls, what are the preferential policies now? If I buy it now, how much will I get in the end?</span></span><br><span class="line"><span class="string">        Thought: To answer this question, I need to check the database of the background first.</span></span><br><span class="line"><span class="string">        Action: query_by_product_name: football</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Observation: At present, I have checked that the ball is in stock, and I know its price is 120 yuan.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Thought: I need to further inquire about the preferential policy of football</span></span><br><span class="line"><span class="string">        Action: read_store_promotions: football</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Observation: The current promotional policy for this ball is: 10% discount upon purchase</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Thought: Now I need to combine the selling price and preferential policies of the ball to calculate the final transaction price</span></span><br><span class="line"><span class="string">        Action: calculate: 120 * 0.9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Observation: The final price of the ball was 108.0 yuan</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Thought: I now have all the information needed to answer the question.</span></span><br><span class="line"><span class="string">        Answer:  According to your enquiry, we do sell soccer balls in our store, the current price is 120 yuan. At present, we offer a 10% discount on the purchase of football. Therefore, if you buy now, the final transaction price will be 108 yuan.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Note: You must reply to the final result in Chinese</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Now it&#x27;s your turn:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.strip()</span><br><span class="line">        <span class="variable language_">self</span>.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="variable language_">self</span>.system_prompt&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __call__ 方法可以使得一个类的实例可以被像函数那样调用，提供了类实例的“可调用”能力。</span></span><br><span class="line">    <span class="comment"># 当使用类实例后面跟着括号并传递参数时，就会触发 __call__ 方法。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="variable language_">self</span>.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: message&#125;)</span><br><span class="line">        response = <span class="variable language_">self</span>.execute()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(response, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">f&quot;Expected string response from execute, got <span class="subst">&#123;<span class="built_in">type</span>(response)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: response&#125;)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查 self.client 是否是 OllamaClient 类的一个实例。这是类型安全的一种做法，确保 self.client 具有执行接下来代码所需的方法和属性。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(<span class="variable language_">self</span>.client, OllamaClient):</span><br><span class="line">            completion = <span class="variable language_">self</span>.client.chat_completions_create(</span><br><span class="line">                model=<span class="variable language_">self</span>.config[<span class="string">&quot;ollama&quot;</span>][<span class="string">&#x27;model_name&#x27;</span>],</span><br><span class="line">                messages=<span class="variable language_">self</span>.messages,</span><br><span class="line">                temperature=<span class="variable language_">self</span>.config[<span class="string">&quot;ollama&quot;</span>][<span class="string">&#x27;temperature&#x27;</span>]</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果 completion 是一个字典并且包含一个键为 message 的项，则尝试从 message 中提取 content 键对应的值。如果没有 content，则返回一个空字符串。</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(completion, <span class="built_in">dict</span>) <span class="keyword">and</span> <span class="string">&#x27;message&#x27;</span> <span class="keyword">in</span> completion:</span><br><span class="line">                <span class="keyword">return</span> completion[<span class="string">&#x27;message&#x27;</span>].get(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="comment"># 如果 completion 直接是一个字符串，则直接返回这个字符串。</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(completion, <span class="built_in">str</span>):</span><br><span class="line">                <span class="keyword">return</span> completion</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unexpected response structure from OllamaClient: <span class="subst">&#123;completion&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 使用 OpenAI 的 GPT 系列模型</span></span><br><span class="line">            completion = <span class="variable language_">self</span>.client.chat.completions.create(</span><br><span class="line">                model=<span class="variable language_">self</span>.config[<span class="string">&#x27;openai&#x27;</span>][<span class="string">&#x27;model_name&#x27;</span>],</span><br><span class="line">                messages=<span class="variable language_">self</span>.messages,</span><br><span class="line">            )</span><br><span class="line">            response = completion.choices[<span class="number">0</span>].message.content</span><br><span class="line">            <span class="keyword">if</span> response != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> completion.choices[<span class="number">0</span>].message.content</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;当前没有正常的生成回复，请重新思考当前的问题，并再次进行尝试&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-主代码设计"><a href="#3-3-主代码设计" class="headerlink" title="3.3 主代码设计"></a>3.3 主代码设计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 加载配置文件，获取API相关配置</span></span><br><span class="line">    config = load_config()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取服务端实例（支持 OpenAI API 或 Ollama Restful API）</span></span><br><span class="line">        client = get_client(config)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建客服代理实例</span></span><br><span class="line">        agent = CustomerServiceAgent(client, config)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 初始化失败时的异常处理</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error initializing the AI client: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Please check your configuration and ensure the AI service is running.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义工具集，每个工具对应一个具体功能的函数</span></span><br><span class="line">    tools = &#123;</span><br><span class="line">        <span class="string">&quot;query_by_product_name&quot;</span>: query_by_product_name,  <span class="comment"># 查询商品信息</span></span><br><span class="line">        <span class="string">&quot;read_store_promotions&quot;</span>: read_store_promotions,  <span class="comment"># 查询商店促销信息</span></span><br><span class="line">        <span class="string">&quot;calculate&quot;</span>: calculate,  <span class="comment"># 计算最终价格</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主循环：允许用户多次提问</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        query = <span class="built_in">input</span>(<span class="string">&quot;输入您的问题或输入 &#x27;退出&#x27; 来结束: &quot;</span>)  <span class="comment"># 获取用户输入</span></span><br><span class="line">        <span class="keyword">if</span> query.lower() == <span class="string">&#x27;退出&#x27;</span>:  <span class="comment"># 支持输入“退出”来结束程序</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        iteration = <span class="number">0</span></span><br><span class="line">        max_iterations = get_max_iterations(config)  <span class="comment"># 获取配置中允许的最大迭代次数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 内部循环处理单个用户问题，支持复杂问题的多轮解析</span></span><br><span class="line">        <span class="keyword">while</span> iteration &lt; max_iterations:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 通过Agent处理用户输入，生成初步结果</span></span><br><span class="line">                result = agent(query)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;result:<span class="subst">&#123;result&#125;</span>&quot;</span>)  <span class="comment"># 打印AI生成的结果，方便调试</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 正则表达式识别“Action”操作指令</span></span><br><span class="line">                action_re = re.<span class="built_in">compile</span>(<span class="string">&#x27;^Action: (\w+): (.*)$&#x27;</span>)</span><br><span class="line">                actions = [action_re.<span class="keyword">match</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> result.split(<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">if</span> action_re.<span class="keyword">match</span>(a)]</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 如果识别到Action指令，解析工具名和参数</span></span><br><span class="line">                <span class="keyword">if</span> actions:</span><br><span class="line">                    action_parts = result.split(<span class="string">&quot;Action:&quot;</span>, <span class="number">1</span>)[<span class="number">1</span>].strip().split(<span class="string">&quot;: &quot;</span>, <span class="number">1</span>)</span><br><span class="line">                    tool_name = action_parts[<span class="number">0</span>]  <span class="comment"># 提取工具名称</span></span><br><span class="line">                    tool_args = action_parts[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(action_parts) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;&quot;</span>  <span class="comment"># 提取参数</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 如果工具名有效，则调用对应工具</span></span><br><span class="line">                    <span class="keyword">if</span> tool_name <span class="keyword">in</span> tools:</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            <span class="comment"># 执行工具函数，获取观察结果</span></span><br><span class="line">                            observation = tools[tool_name](tool_args)</span><br><span class="line">                            query = <span class="string">f&quot;Observation: <span class="subst">&#123;observation&#125;</span>&quot;</span></span><br><span class="line">                            <span class="built_in">print</span>(query)  <span class="comment"># 打印观察结果</span></span><br><span class="line">                        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                            <span class="comment"># 工具执行失败的异常处理</span></span><br><span class="line">                            query = <span class="string">f&quot;Observation: Error occurred while executing the tool: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="comment"># 工具名未找到的情况</span></span><br><span class="line">                        query = <span class="string">f&quot;Observation: Tool &#x27;<span class="subst">&#123;tool_name&#125;</span>&#x27; not found&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 如果识别到“Answer”字段，输出最终答案并结束内部循环</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="string">&quot;Answer:&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;客服回复：<span class="subst">&#123;result.split(<span class="string">&#x27;Answer:&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].strip()&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果没有识别到有效的Action或Answer，返回提示</span></span><br><span class="line">                    query = <span class="string">&quot;Observation: No valid action or answer found. Please provide a clear action or answer.&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="comment"># 捕获主循环中的异常</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;An error occurred while processing the query: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Please check your configuration and ensure the AI service is running.&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 迭代计数，防止无限循环</span></span><br><span class="line">            iteration += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果达到最大迭代次数仍未给出答案，提示用户</span></span><br><span class="line">        <span class="keyword">if</span> iteration == max_iterations:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Reached maximum number of iterations without a final answer.&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Agent实战基础之Agent架构与落地方案</title>
      <link href="/2025/03/21/6.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BAgent%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%90%BD%E5%9C%B0%E6%96%B9%E6%A1%88/"/>
      <url>/2025/03/21/6.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BAgent%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%90%BD%E5%9C%B0%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="1-大模型产业落地趋势"><a href="#1-大模型产业落地趋势" class="headerlink" title="1. 大模型产业落地趋势"></a>1. 大模型产业落地趋势</h1><h2 id="1-1-业务融合阶段"><a href="#1-1-业务融合阶段" class="headerlink" title="1.1 业务融合阶段"></a>1.1 业务融合阶段</h2><p><strong>技术架构</strong>：各种办公类软件<br><strong>案例</strong>：  </p><ol><li><strong>智能客服系统</strong>：集成到企业客服平台，提供自动化问答和问题解决。  </li><li><strong>人力资源系统</strong>：用于员工招聘、培训、绩效管理等场景。  </li><li><strong>内部知识管理</strong>：帮助企业整理和检索内部文档、流程和知识库。</li></ol><p><strong>特点</strong>：<br>• 将AI技术嵌入现有办公软件，提升工作效率。<br>• 主要用于辅助业务流程，而非独立决策。  </p><h2 id="1-2-辅助决策阶段"><a href="#1-2-辅助决策阶段" class="headerlink" title="1.2 辅助决策阶段"></a>1.2 辅助决策阶段</h2><p><strong>技术架构</strong>：RAG（Retrieval-Augmented Generation）架构构建知识库<br><strong>案例</strong>：  </p><ol><li><strong>医生助手系统</strong>：结合医学知识库，为医生提供诊断建议和治疗方案。  </li><li><strong>法律咨询服务</strong>：基于法律条文和案例库，提供法律建议和风险评估。  </li><li><strong>金融风险管理</strong>：分析金融市场数据，提供风险预警和投资建议。  </li><li><strong>教育辅导</strong>：根据学生需求，提供个性化学习计划和答疑服务。  </li><li><strong>智能旅游系统</strong>：结合旅游数据，为用户推荐行程和景点。</li></ol><p><strong>特点</strong>：<br>• 通过知识库增强AI的决策能力，提供更专业的建议。<br>• 主要用于辅助人类决策，而非完全自主决策。  </p><h2 id="1-3-自主决策阶段"><a href="#1-3-自主决策阶段" class="headerlink" title="1.3 自主决策阶段"></a>1.3 自主决策阶段</h2><p><strong>技术架构</strong>：Agent（智能代理）<br><strong>案例</strong>：<br>• <strong>自动化任务执行</strong>：如自动调度、资源分配、流程优化等。<br>• <strong>智能机器人</strong>：在无人干预的情况下完成复杂任务，如仓储管理、自动驾驶等。  </p><p><strong>特点</strong>：<br>• AI能够独立分析、决策和执行任务，无需人类干预。<br>• 适用于高度自动化和复杂决策的场景。 </p><h1 id="2-Agent原理剖析"><a href="#2-Agent原理剖析" class="headerlink" title="2. Agent原理剖析"></a>2. Agent原理剖析</h1><h2 id="2-1-Agent设计理念"><a href="#2-1-Agent设计理念" class="headerlink" title="2.1 Agent设计理念"></a>2.1 Agent设计理念</h2><p><img src="/images/6.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BAgent%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%90%BD%E5%9C%B0%E6%96%B9%E6%A1%88/image-20250323003827083.png" alt="image-20250323003827083"></p><h2 id="2-2-Agent设计模式"><a href="#2-2-Agent设计模式" class="headerlink" title="2.2 Agent设计模式"></a>2.2 Agent设计模式</h2><h3 id="2-2-1-Reflection（反射模式）"><a href="#2-2-1-Reflection（反射模式）" class="headerlink" title="2.2.1 Reflection（反射模式）"></a>2.2.1 Reflection（反射模式）</h3><p><strong>定义</strong>：反射模式允许AI Agent审视自身生成的输出，并进行自我修正。这种自我监督的能力使得AI能够在执行任务时不断优化策略，提高准确性和效率。</p><p><strong>示例</strong>：一个AI Agent可能会生成一段代码，然后自我检查并修复潜在的错误，从而提升代码质量。</p><p><strong>关键点</strong>：<br>• <strong>自我监督</strong>：AI能够自我检查和修正。<br>• <strong>优化策略</strong>：通过反思，AI能够不断改进其策略。<br>• <strong>提高效率</strong>：通过减少错误和优化输出，AI能够更高效地完成任务。</p><h3 id="2-2-2-Tools-Use（工具使用模式）"><a href="#2-2-2-Tools-Use（工具使用模式）" class="headerlink" title="2.2.2 Tools Use（工具使用模式）"></a>2.2.2 Tools Use（工具使用模式）</h3><p><strong>定义</strong>：工具使用模式是指AI Agent能够调用外部工具和API来增强自身的功能。这种模式使得AI能够超越自身的知识库，通过与外部系统的交互来获取信息、执行操作或生成内容，极大地扩展了AI的应用范围和灵活性。</p><p><strong>示例</strong>：AI可以通过调用天气API来获取实时天气信息，或者通过调用翻译API来实现多语言翻译。</p><p><strong>关键点</strong>：<br>• <strong>外部工具</strong>：AI能够使用外部工具和API。<br>• <strong>增强功能</strong>：通过工具使用，AI的功能得到扩展。<br>• <strong>灵活性</strong>：AI能够适应多种任务和场景。</p><h3 id="2-2-3-思维链方式（规划模式）"><a href="#2-2-3-思维链方式（规划模式）" class="headerlink" title="2.2.3 思维链方式（规划模式）"></a>2.2.3 思维链方式（规划模式）</h3><p><strong>定义</strong>：规划模式赋予AI Agent将复杂任务分解为多个步骤并有序执行的能力。通过这种方式，AI能够更系统地处理问题，制定出有效的行动计划，并按照计划逐步推进任务完成。</p><p><strong>示例</strong>：在市场分析中，AI可以将任务分解为数据收集、数据分析、趋势预测等步骤，并逐步完成。</p><p><strong>关键点</strong>：<br>• <strong>任务分解</strong>：AI能够将复杂任务分解为多个步骤。<br>• <strong>系统处理</strong>：AI能够更系统地处理问题。<br>• <strong>有效计划</strong>：AI能够制定并执行有效的行动计划。</p><h3 id="2-2-4-多Agent（多代理模式）"><a href="#2-2-4-多Agent（多代理模式）" class="headerlink" title="2.2.4 多Agent（多代理模式）"></a>2.2.4 多Agent（多代理模式）</h3><p><strong>定义</strong>：多Agent模式涉及多个AI Agent之间的合作。通过这种模式，不同的AI Agent可以扮演不同的角色，共同完成一个复杂的任务。这种协作不仅能够模拟真实世界中的团队工作流程，还能够通过代理间的互补和协同作用，提高整体的执行效率和创新能力。</p><p><strong>示例</strong>：在项目管理中，不同的AI Agent可以分别负责任务分配、进度跟踪、资源管理等，共同完成项目。</p><p><strong>关键点</strong>：<br>• <strong>角色分工</strong>：不同的AI Agent扮演不同的角色。<br>• <strong>团队协作</strong>：模拟真实世界中的团队工作流程。<br>• <strong>协同作用</strong>：通过代理间的互补和协同，提高效率和创新能力。</p><h1 id="3-Agent架构设计落地方案"><a href="#3-Agent架构设计落地方案" class="headerlink" title="3. Agent架构设计落地方案"></a>3. Agent架构设计落地方案</h1><table><thead><tr><th><strong>方案</strong></th><th><strong>技术选型</strong></th></tr></thead><tbody><tr><td><strong>方案1</strong>：适合公司内部快速实现一些简单的需求，但不开源。</td><td>COZE (扣子)，Dify 等</td></tr><tr><td><strong>方案2</strong>：适合公司内部快速实现一些需求，可基于其进行二次开发。</td><td>MetaGPT, AutoGen 等</td></tr><tr><td><strong>方案3</strong>：适合专职的做大模型应用开发工程师。</td><td>LangChain (Agents, LangGraph) 等，Spring AI Alibaba，Swarm</td></tr><tr><td><strong>方案4</strong>：适合专职的做大模型应用开发工程师。</td><td>不用</td></tr></tbody></table><h1 id="4-o1模型的出现对Agent发展的作用"><a href="#4-o1模型的出现对Agent发展的作用" class="headerlink" title="4. o1模型的出现对Agent发展的作用"></a>4. o1模型的出现对Agent发展的作用</h1><p><img src="/images/6.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BAgent%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%90%BD%E5%9C%B0%E6%96%B9%E6%A1%88/image-20250323005439172.png" alt="image-20250323005439172"></p><p><img src="/images/6.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BAgent%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%90%BD%E5%9C%B0%E6%96%B9%E6%A1%88/image-20250323005451194.png" alt="image-20250323005451194"></p>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Agent实战基础之多模态大模型实战</title>
      <link href="/2025/03/21/5.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%9A%E6%A8%A1%E6%80%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98/"/>
      <url>/2025/03/21/5.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%9A%E6%A8%A1%E6%80%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.Agent实战基础之提示词工程和Function进阶实战</title>
      <link href="/2025/03/17/4.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%92%8CFunction%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98/"/>
      <url>/2025/03/17/4.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%92%8CFunction%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-面向目标架构"><a href="#1-面向目标架构" class="headerlink" title="1. 面向目标架构"></a>1. 面向目标架构</h1><h2 id="1-1-面向目标开发流程"><a href="#1-1-面向目标开发流程" class="headerlink" title="1.1 面向目标开发流程"></a>1.1 面向目标开发流程</h2><p><img src="/images/4.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%92%8CFunction%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98/image-20250318093723927.png" alt="image-20250318093723927"></p><p>大模型的核心目标是 自动规划、自动调用外部工具、自动生成外部函数，实现智能化执行任务。开发过程中，主要包含以下阶段：</p><ol><li>大模型自动规划</li><li>大模型自动调用外部工具执行</li><li>大模型自动生成外部函数</li></ol><h2 id="1-2-技术选型"><a href="#1-2-技术选型" class="headerlink" title="1.2 技术选型"></a>1.2 技术选型</h2><h3 id="1-2-1-提示词工程与外部函数"><a href="#1-2-1-提示词工程与外部函数" class="headerlink" title="1.2.1 提示词工程与外部函数"></a>1.2.1 提示词工程与外部函数</h3><ol><li><p>提示词工程</p><ul><li>设计清晰、逻辑严谨的 Prompt，引导大模型按目标输出。</li></ul></li><li><p>Function Call</p><ul><li>让大模型在对话过程中调用外部函数，完成复杂数据处理、查询、计算等任务。</li></ul></li><li><p>GLM-4模型</p><ul><li><p>特点：中上等模型，性能优异，中文理解能力强。</p></li><li><p>安装方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install zhipuai</span><br></pre></td></tr></table></figure></li><li><p>接口调用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> zhipuai <span class="keyword">import</span> ZhipuAI</span><br><span class="line"></span><br><span class="line">client = ZhipuAI(api_key=<span class="string">&quot;your_api_key&quot;</span>)</span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;glm-4&quot;</span>,</span><br><span class="line">    messages=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请帮我分析这组数据&quot;</span>&#125;]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>LangChain开发框架</p><ul><li><p>特点：提供多种大模型功能封装，包括记忆、代理、工具调用、RAG等能力。</p></li><li><p>安装方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install langchain</span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line">llm = ChatOpenAI(temperature=<span class="number">0.7</span>)</span><br><span class="line">result = llm.predict(<span class="string">&quot;如何实现自动化数据分析?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="1-2-2-AGENT-设计"><a href="#1-2-2-AGENT-设计" class="headerlink" title="1.2.2 AGENT 设计"></a>1.2.2 AGENT 设计</h3><p>Agent 是自主执行任务的智能体，具备以下能力：</p><ul><li>目标规划：根据用户需求拆解任务，规划执行路径。</li><li>环境感知：根据外部输入调整行为。</li><li>工具调用：动态调用外部工具或函数，完成子任务。</li><li>自主决策：根据上下文和执行结果调整行动策略。</li></ul><h3 id="1-2-3-RAG-设计"><a href="#1-2-3-RAG-设计" class="headerlink" title="1.2.3 RAG 设计"></a>1.2.3 RAG 设计</h3><p>RAG (Retrieval-Augmented Generation)是一种结合检索与生成的方法，提升模型对事实性、知识性的回答能力。</p><ul><li>检索 (Retrieval)：从外部数据库、文档、API等来源查找相关信息。</li><li>生成 (Generation)：在检索到的信息基础上生成高质量回答。</li></ul><h3 id="1-2-4-微调-Fine-tuning"><a href="#1-2-4-微调-Fine-tuning" class="headerlink" title="1.2.4 微调 (Fine-tuning)"></a>1.2.4 微调 (Fine-tuning)</h3><p>微调是针对特定任务优化大模型，让它在指定场景表现更优。</p><ul><li>数据准备：收集领域数据，格式化成训练样本。</li><li>训练执行：用目标任务数据对模型继续训练。</li><li>性能评估：测试微调后的模型表现，确保提升效果。</li></ul><h3 id="1-2-5-预训练-Pre-training"><a href="#1-2-5-预训练-Pre-training" class="headerlink" title="1.2.5 预训练 (Pre-training)"></a>1.2.5 预训练 (Pre-training)</h3><p>预训练是大规模数据训练阶段，让模型具备基础语言理解、推理、知识存储能力。</p><ul><li>大规模文本训练（新闻、百科、论文、对话数据等）</li><li>多任务训练（翻译、问答、摘要、对话、代码理解等）</li><li>跨模态训练（图文理解、图生文、文生图等）</li></ul><h1 id="2-Function-Call-进阶"><a href="#2-Function-Call-进阶" class="headerlink" title="2. Function Call 进阶"></a>2. Function Call 进阶</h1><h2 id="2-1-外部函数调用流程回顾"><a href="#2-1-外部函数调用流程回顾" class="headerlink" title="2.1 外部函数调用流程回顾"></a>2.1 外部函数调用流程回顾</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> zhipuai <span class="keyword">import</span> ZhipuAI</span><br><span class="line"></span><br><span class="line">api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line"></span><br><span class="line">client = ZhipuAI(api_key=api_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例函数 - 孙悟空算法</span></span><br><span class="line"><span class="comment"># 该函数用于接收一个数据表（字符串形式），对数据进行处理并返回JSON格式结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sunwukong_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    孙悟空算法函数，该函数定义了数据集计算过程</span></span><br><span class="line"><span class="string">    :param data: 必要参数，表示带入计算的数据表，用字符串进行表示</span></span><br><span class="line"><span class="string">    :return: sunwukong_function函数计算后的结果，返回结果为JSON格式的Dataframe类型对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new[<span class="string">&#x27;x1&#x27;</span>] * <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个示例数据集</span></span><br><span class="line"></span><br><span class="line">df_str = pd.DataFrame(&#123;<span class="string">&#x27;x1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;x2&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>]&#125;).to_string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个完整的对话流程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_conversation</span>():</span><br><span class="line">    <span class="comment"># Step 1: 初始化对话，发送数据集和函数信息</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;数据集data：%s，数据集以字符串形式呈现&quot;</span> % df_str&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请在数据集data上执行孙悟空算法&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义工具（函数）</span></span><br><span class="line">    tools = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">            <span class="string">&quot;function&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;sunwukong_function&quot;</span>,</span><br><span class="line">                <span class="string">&quot;description&quot;</span>: <span class="string">&quot;用于执行孙悟空算法函数，定义了一种特殊的数据集计算过程&quot;</span>,</span><br><span class="line">                <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;data&quot;</span>: &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;执行孙悟空算法的数据集&quot;</span>&#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;data&quot;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2: 发送初次请求</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;glm-4&quot;</span>,</span><br><span class="line">        messages=messages,</span><br><span class="line">        tools=tools,</span><br><span class="line">        tool_choice=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取模型返回的消息</span></span><br><span class="line">    response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line">    tool_calls = response_message.tool_calls</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3: 判断模型是否要调用函数</span></span><br><span class="line">    <span class="keyword">if</span> tool_calls:</span><br><span class="line">        available_functions = &#123;<span class="string">&quot;sunwukong_function&quot;</span>: sunwukong_function&#125;  <span class="comment"># 这里可以扩展多种函数</span></span><br><span class="line">        messages.append(response_message.model_dump())  <span class="comment"># 将模型返回结果加入消息列表</span></span><br><span class="line">        <span class="built_in">print</span>(messages)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 4: 执行函数，并将返回结果传回模型</span></span><br><span class="line">        <span class="keyword">for</span> tool_call <span class="keyword">in</span> tool_calls:</span><br><span class="line">            function_name = tool_call.function.name</span><br><span class="line">            function_to_call = available_functions[function_name]</span><br><span class="line">            function_args = json.loads(tool_call.function.arguments)</span><br><span class="line">            function_response = function_to_call(**function_args)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将函数结果传回对话上下文</span></span><br><span class="line">            messages.append(&#123;</span><br><span class="line">                <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span>,</span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: function_name,</span><br><span class="line">                <span class="string">&quot;content&quot;</span>: function_response,</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 5: 发送最终请求，获取完整回答</span></span><br><span class="line">        second_response = client.chat.completions.create(</span><br><span class="line">            model=<span class="string">&quot;glm-4&quot;</span>,</span><br><span class="line">            messages=messages,</span><br><span class="line">            tools=tools,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> second_response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行对话流程并输出最终结果</span></span><br><span class="line">result = run_conversation()</span><br><span class="line"><span class="built_in">print</span>(result.choices[<span class="number">0</span>].message.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用StringIO将字符串转换为文件对象</span></span><br><span class="line"></span><br><span class="line">df_str = <span class="string">&#x27;\n    x1\n0  10\n1  20\n.&#x27;</span></span><br><span class="line">data = io.StringIO(df_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用read_csv()函数读取数据，并设置第一列为索引</span></span><br><span class="line"></span><br><span class="line">df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(df_new)</span><br></pre></td></tr></table></figure><blockquote><p>OpenAI 与ZhipuAI 的区别</p><table><thead><tr><th>对比项</th><th>OpenAI 版本</th><th>ZhipuAI 版本</th></tr></thead><tbody><tr><td>第一轮请求</td><td>✅ 需要 <code>tools</code></td><td>✅ 需要 <code>tools</code></td></tr><tr><td>第二轮请求</td><td>❌ 不带 <code>tools</code></td><td>✅ 继续带 <code>tools</code></td></tr><tr><td>消息追加方式</td><td>直接追加</td><td><code>model_dump()</code> 转字典</td></tr></tbody></table></blockquote><h2 id="2-2-四大挑战"><a href="#2-2-四大挑战" class="headerlink" title="2.2 四大挑战"></a>2.2 四大挑战</h2><h3 id="2-2-1-意图识别"><a href="#2-2-1-意图识别" class="headerlink" title="2.2.1 意图识别"></a>2.2.1 意图识别</h3><h4 id="2-2-1-1-误判：是否需要外部函数"><a href="#2-2-1-1-误判：是否需要外部函数" class="headerlink" title="2.2.1.1 误判：是否需要外部函数"></a>2.2.1.1 误判：是否需要外部函数</h4><p>策略1：提供高质量的 JSON Schema</p><ol><li>关键词引导<br> 大模型（如 GLM-4）可能依赖 embedding 相似度选择函数，因此：<ul><li>在 prompt 中嵌入与函数名称高度一致的关键词，提高命中率。</li><li>设置独特的关键词（编号、专有名词等），避免与其他函数混淆。</li></ul></li><li>函数分类标记<br> 在函数名称或描述中增加分类前缀，如 user_、admin_、data_ 等，帮助模型快速定位类别。</li><li>权重提示<br> 对常用函数增加权重提示词，如 primary、core、重要、核心业务 等。</li><li>否定句筛选<br> 在函数描述中增加否定提示，例如“当出现 XXX 语言时，此函数无效”，帮助模型避开不合适的函数。</li></ol><h4 id="2-2-1-2-误选：相似函数名称混淆"><a href="#2-2-1-2-误选：相似函数名称混淆" class="headerlink" title="2.2.1.2 误选：相似函数名称混淆"></a>2.2.1.2 误选：相似函数名称混淆</h4><p>策略2：干预模型选择</p><ol><li>自查 Prompt<br> 在用户提问前，增加“XXX 是否在你的资料库内”的预检 prompt，确认模型是否掌握该知识。</li><li>关键词匹配优先<ul><li>建立业务关键词库，检测到关键词时强制指定 tool_choice 调用特定函数。</li><li>示例场景：用户说“我要点餐”、“我要吃饭”、“服务员过来一下”，均指向 点餐 函数。</li></ul></li></ol><h4 id="2-2-1-3-结果整合失败（即使调用成功，结果仍然有误）"><a href="#2-2-1-3-结果整合失败（即使调用成功，结果仍然有误）" class="headerlink" title="2.2.1.3 结果整合失败（即使调用成功，结果仍然有误）"></a>2.2.1.3 结果整合失败（即使调用成功，结果仍然有误）</h4><p>策略3：优化消息传递格式</p><ol><li><p>旧版方法缺陷<br> 使用 tool 角色传递函数名与结果，但实验显示模型无法有效识别上下文。</p></li><li><p>新版优化方案</p><ul><li><p>改用 assistant 角色传递函数结果，配合额外提示确保模型理解返回结果的来源。</p></li><li><p>示例代码调整：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message.append(&#123;</span><br><span class="line">    <span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>,</span><br><span class="line">    <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你使用了 tools 工具，最终获得的答案是&quot;</span> + <span class="built_in">str</span>(function_response),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>调用校验</p><ul><li><p>增加“是否成功调用了函数”的检测逻辑，防止模型误判：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response_f.choices[<span class="number">0</span>].message.tool_calls[<span class="number">0</span>].function.name</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n被调用的函数是&#123;&#125;&quot;</span>.<span class="built_in">format</span>(response_f.choices[<span class="number">0</span>].message.tool_calls[<span class="number">0</span>].function.name))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n没有函数被成功调用！&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="2-2-2-海量函数"><a href="#2-2-2-海量函数" class="headerlink" title="2.2.2 海量函数"></a>2.2.2 海量函数</h3><ol><li>Token 限制问题</li><li>计算延迟问题</li><li>意图识别困难</li></ol><h4 id="2-2-2-1-优化策略"><a href="#2-2-2-1-优化策略" class="headerlink" title="2.2.2.1 优化策略"></a>2.2.2.1 优化策略</h4><ol><li><p>分层架构指导函数分割<br> 在复杂场景下按层次划分函数库：</p><ul><li>表示层（用户交互逻辑）：注册、登录、更新信息等。</li><li>业务逻辑层（核心功能）：订单管理、商品管理等。</li><li>数据访问层（数据库交互）：数据存取、查询等。</li><li>服务层（内部&#x2F;外部接口）：API 服务、第三方集成等。</li></ul><p>层级筛选流程：先通过高层次意图识别选择层级 → 再在层内精细筛选函数。</p></li><li><p>关键词分割<br> 在 JSON Schema 中引入关键词，如“章节”、“年级”等，先粗略划分函数集合。</p></li><li><p>结合向量数据库 + RAG（检索增强生成）技术</p><ul><li>预处理：将函数描述向量化，存储到向量数据库。</li><li>用户意图向量化：用户输入也进行向量化，进行语义匹配。</li><li>动态加载相关函数：从搜索结果中动态筛选可能相关的函数，再进一步调用。</li></ul></li></ol><h3 id="2-2-3-并发调用"><a href="#2-2-3-并发调用" class="headerlink" title="2.2.3 并发调用"></a>2.2.3 并发调用</h3><h4 id="2-2-3-1-串行调用"><a href="#2-2-3-1-串行调用" class="headerlink" title="2.2.3.1 串行调用"></a>2.2.3.1 串行调用</h4><ul><li>按照特定顺序执行多个函数，保持上下文连贯性。</li></ul><h4 id="2-2-3-2-并行调用"><a href="#2-2-3-2-并行调用" class="headerlink" title="2.2.3.2 并行调用"></a>2.2.3.2 并行调用</h4><ul><li>支持同时调用多个函数，汇总结果后统一返回。</li></ul><h3 id="2-2-4-响应太慢"><a href="#2-2-4-响应太慢" class="headerlink" title="2.2.4 响应太慢"></a>2.2.4 响应太慢</h3><h4 id="2-2-4-1-缓存设计"><a href="#2-2-4-1-缓存设计" class="headerlink" title="2.2.4.1 缓存设计"></a>2.2.4.1 缓存设计</h4><ul><li>针对特定场景（如高频查询、静态数据）设计缓存机制，减少重复调用。</li></ul><h4 id="2-2-4-2-动态调整调用逻辑"><a href="#2-2-4-2-动态调整调用逻辑" class="headerlink" title="2.2.4.2 动态调整调用逻辑"></a>2.2.4.2 动态调整调用逻辑</h4><ul><li>按需调整串行&#x2F;并行策略，确保关键函数优先执行。</li></ul><h4 id="2-2-4-3-延迟反馈"><a href="#2-2-4-3-延迟反馈" class="headerlink" title="2.2.4.3 延迟反馈"></a>2.2.4.3 延迟反馈</h4><ul><li>对时间敏感场景，先返回部分结果，再补充完整信息。</li></ul><h1 id="3-面向目标架构阶段"><a href="#3-面向目标架构阶段" class="headerlink" title="3. 面向目标架构阶段"></a>3. 面向目标架构阶段</h1><h2 id="3-1-以人为主，AI为辅"><a href="#3-1-以人为主，AI为辅" class="headerlink" title="3.1 以人为主，AI为辅"></a>3.1 以人为主，AI为辅</h2><p><img src="/images/4.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%92%8CFunction%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98/image-20250319112047791.png" alt="image-20250319112047791"></p><ol><li><p>人梳理需求</p></li><li><p>大模型帮忙写代码</p></li><li><p>人审核代码</p></li></ol><h3 id="3-1-1-提示词案例："><a href="#3-1-1-提示词案例：" class="headerlink" title="3.1.1 提示词案例："></a>3.1.1 提示词案例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/root/autodl-tmp/面向目标架构落地/data/my_mail数据字典.md&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    md_content = f.read()</span><br><span class="line">    </span><br><span class="line">user_example_content = <span class="string">&quot;请帮我编写一个python函数，用于查看我的mailbox邮箱中最后一封邮件信息，函数要求如下：\</span></span><br><span class="line"><span class="string">                        1.函数参数userId，userId是字符串参数，默认情况下取值为&#x27;me&#x27;，表示查看我的邮件；\</span></span><br><span class="line"><span class="string">                        2.函数返回结果是一个包含最后一封邮件信息的对象，返回结果本身必须是一个json格式对象；\</span></span><br><span class="line"><span class="string">                        3.请将全部功能封装在一个函数内；\</span></span><br><span class="line"><span class="string">                        4.请在函数编写过程中，在函数内部加入中文编写的详细的函数说明文档，用于说明函数功能、函数参数情况以及函数返回结果等信息；&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;%s.py&#x27;</span> % <span class="string">&#x27;code/get_latest_email&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    assistant_example_content = f.read()</span><br><span class="line"></span><br><span class="line">user_content = <span class="string">&quot;请帮我编写一个python函数，用于查看我的mailbox邮箱中总共有多少封邮件，函数要求如下：\</span></span><br><span class="line"><span class="string">                1.函数参数userId，userId是字符串参数，默认情况下取值为&#x27;me&#x27;，表示查看我的邮件；\</span></span><br><span class="line"><span class="string">                2.函数返回结果是当前邮件总数，返回结果本身必须是一个json格式对象；\</span></span><br><span class="line"><span class="string">                3.请将全部功能封装在一个函数内；\</span></span><br><span class="line"><span class="string">                4.请在函数编写过程中，在函数内部加入中文编写的详细的函数说明文档，用于说明函数功能、函数参数情况以及函数返回结果等信息；&quot;</span></span><br><span class="line"></span><br><span class="line">messages=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: md_content&#125;,</span><br><span class="line">          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example_user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_example_content&#125;,</span><br><span class="line">          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example_assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: assistant_example_content&#125;,</span><br><span class="line">          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example_user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_content&#125;]</span><br></pre></td></tr></table></figure><h2 id="3-2-Al和人相互配合"><a href="#3-2-Al和人相互配合" class="headerlink" title="3.2 Al和人相互配合"></a>3.2 Al和人相互配合</h2><p><img src="/images/4.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%92%8CFunction%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98/image-20250319112109227.png" alt="image-20250319112109227"></p><ol><li><p>大模型梳理需求</p></li><li><p>大模型帮忙写代码</p></li><li><p>人审核代码</p></li></ol><h3 id="3-2-1-借助Few-Shot"><a href="#3-2-1-借助Few-Shot" class="headerlink" title="3.2.1 借助Few-Shot"></a>3.2.1 借助Few-Shot</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">get_email_input = <span class="string">&quot;请帮我查下邮箱里最后一封邮件内容。&quot;</span></span><br><span class="line"></span><br><span class="line">get_email_out = <span class="string">&quot;请帮我编写一个python函数，用于查看我的mailbox邮箱中最后一封邮件信息，函数要求如下：\</span></span><br><span class="line"><span class="string">                 1.函数参数userId，userId是字符串参数，默认情况下取值为&#x27;me&#x27;，表示查看我的邮件；\</span></span><br><span class="line"><span class="string">                 2.函数返回结果是一个包含最后一封邮件信息的对象，返回结果本身必须是一个json格式对象；\</span></span><br><span class="line"><span class="string">                 3.请将全部功能封装在一个函数内；\</span></span><br><span class="line"><span class="string">                 4.请在函数编写过程中，在函数内部加入中文编写的详细的函数说明文档，用于说明函数功能、函数参数情况以及函数返回结果等信息；&quot;</span></span><br><span class="line"></span><br><span class="line">email_counts_input = <span class="string">&quot;请帮我查下邮箱里现在总共有多少封邮件。&quot;</span></span><br><span class="line"></span><br><span class="line">email_counts_out = <span class="string">&quot;请帮我编写一个python函数，用于查看我的mailbox邮箱中总共有多少封邮件，函数要求如下：\</span></span><br><span class="line"><span class="string">                    1.函数参数userId，userId是字符串参数，默认情况下取值为&#x27;me&#x27;，表示查看我的邮件；\</span></span><br><span class="line"><span class="string">                    2.函数返回结果是当前邮件总数，返回结果本身必须是一个json格式对象；\</span></span><br><span class="line"><span class="string">                    3.请将全部功能封装在一个函数内；\</span></span><br><span class="line"><span class="string">                    4.请在函数编写过程中，在函数内部加入中文编写的详细的函数说明文档，用于说明函数功能、函数参数情况以及函数返回结果等信息；&quot;</span></span><br><span class="line"></span><br><span class="line">user_content = <span class="string">&quot;请查下我的邮箱里是否有来陆小凤的未读邮件，并解读最近一封未读邮件的内容&quot;</span></span><br><span class="line"><span class="comment"># &#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: md_content&#125;,</span></span><br><span class="line"><span class="comment"># one-shot  few-shot</span></span><br><span class="line"></span><br><span class="line">messages_fewShot_stage1 = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">f&quot;最后输出的是一个说明，举个例子，输出格式如下：<span class="subst">&#123;email_counts_out&#125;</span>&quot;</span>&#125;,</span><br><span class="line">                           &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请模仿下列对话给出的风格，基于我的问题，把我的问题转换成一个说明。注意：不需要有额外输出&quot;</span>&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example1_user&quot;</span>, <span class="string">&quot;content&quot;</span>: get_email_input&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example1_assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: get_email_out&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example2_user&quot;</span>, <span class="string">&quot;content&quot;</span>: email_counts_input&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example2_assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: email_counts_out&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example_user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_content&#125;]</span><br></pre></td></tr></table></figure><h3 id="3-2-2-借助LtM"><a href="#3-2-2-借助LtM" class="headerlink" title="3.2.2 借助LtM"></a>3.2.2 借助LtM</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">system_content1 = <span class="string">&quot;为了更好编写满足用户需求的python函数，我们需要先识别用户需求中的变量，以作为python函数的参数。需要注意的是，当前编写的函数中涉及到的邮件收发查阅等功能，都是通过Python来完成。&quot;</span></span><br><span class="line"></span><br><span class="line">input1 = <span class="string">&quot;请帮我查下mailbox邮箱里最后一封邮件内容。&quot;</span></span><br><span class="line"></span><br><span class="line">pi1 = <span class="string">&quot;当前需求中可以作为函数参数的是：1.查看谁的邮箱。&quot;</span></span><br><span class="line"></span><br><span class="line">input2 = <span class="string">&quot;请帮我给西门吹雪发送一封邮件，请他明天早上9点半来我办公室开会，商量下半年技术开发计划。&quot;</span></span><br><span class="line"></span><br><span class="line">pi2 = <span class="string">&quot;当前需求中可以作为函数参数的是：1.发送邮件的对象；2.发送邮件的主题；3.邮件具体内容&quot;</span></span><br><span class="line"></span><br><span class="line">input3 = <span class="string">&quot;请查下我的邮箱里是否有来自陆小凤的未读邮件，并解读最近一封未读邮件的内容。&quot;</span></span><br><span class="line"></span><br><span class="line">messages_CD = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_content1&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example1_user&quot;</span>, <span class="string">&quot;content&quot;</span>: input1&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example1_assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: pi1&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example2_user&quot;</span>, <span class="string">&quot;content&quot;</span>: input2&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example2_assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: pi2&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example_user&quot;</span>, <span class="string">&quot;content&quot;</span>: input3&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>​如果在Few-shot的提示下，第一阶段的指令翻译不是每一次都能给出令人满意的结果，首先我们想到的解决问题的办法就是提供一些更加强有力的提示方法：例如LtM提示法。</p><p>​根据LtM多段提示的策略，外加结合当前指令翻译任务考虑，一种更有希望能够引导模型能够顺利完成指令翻译流程的提示方法是：先引导模型拆解当前需求中的“变量”作为后续函数的参数，然后再基于已经确定的变量，引导模型完成翻译工作。 </p><p>​其实就整个指令翻译任务来说，最难的地方也就在于函数参数的理解过程，而一旦模型能够准确的翻译出外部函数需要哪些参数，其他部分的翻译任务自然迎刃而解。</p></blockquote><h3 id="3-2-3全自动功能函数编程"><a href="#3-2-3全自动功能函数编程" class="headerlink" title="3.2.3全自动功能函数编程"></a>3.2.3全自动功能函数编程</h3><h4 id="3-2-3-1-提示词管理"><a href="#3-2-3-1-提示词管理" class="headerlink" title="3.2.3.1 提示词管理"></a>3.2.3.1 提示词管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一阶段LtM_CD阶段提示词及输出结果</span></span><br><span class="line">get_latest_email_CD_input = <span class="string">&quot;请帮我查下mailbox邮箱里最新一封邮件内容。&quot;</span></span><br><span class="line">get_latest_email_pi = <span class="string">&quot;当前需求中可以作为函数参数的是：1.查看谁的邮箱。&quot;</span></span><br><span class="line">get_latest_email_messages_CD = [</span><br><span class="line">                                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: get_latest_email_CD_input&#125;,</span><br><span class="line">                                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: get_latest_email_pi&#125;</span><br><span class="line">                                ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一阶段LtM_CM阶段提示词及输出结果</span></span><br><span class="line">get_latest_email_CM_input = get_latest_email_CD_input + get_latest_email_pi</span><br><span class="line">get_latest_email_description = <span class="string">&quot;请帮我编写一个python函数，用于查看我的mailbox邮箱中最后一封邮件信息，函数要求如下：\</span></span><br><span class="line"><span class="string">                 1.函数参数userId，userId是字符串参数，默认情况下取值为&#x27;me&#x27;，表示查看我的邮件；\</span></span><br><span class="line"><span class="string">                 2.函数返回结果是一个包含最后一封邮件信息的对象，返回结果本身必须是一个json格式对象；\</span></span><br><span class="line"><span class="string">                 3.请将全部功能封装在一个函数内；\</span></span><br><span class="line"><span class="string">                 4.请在函数编写过程中，在函数内部加入中文编写的详细的函数说明文档，用于说明函数功能、函数参数情况以及函数返回结果等信息；&quot;</span></span><br><span class="line">get_latest_email_messages_CM = [</span><br><span class="line">                                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: get_latest_email_CM_input&#125;,</span><br><span class="line">                                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>:get_latest_email_description&#125;</span><br><span class="line">                                ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段提示词及输出结果</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s/%s_module.py&#x27;</span> % (<span class="string">&#x27;get_latest_email&#x27;</span>, <span class="string">&#x27;get_latest_email&#x27;</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    get_latest_email_function = f.read()</span><br><span class="line">get_latest_email_messages = [</span><br><span class="line">                             &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: get_latest_email_description&#125;,</span><br><span class="line">                             &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>:get_latest_email_function&#125;</span><br><span class="line">                             ]  </span><br><span class="line"></span><br><span class="line">get_latest_email_prompt = &#123;</span><br><span class="line">                            <span class="string">&quot;stage1_CD&quot;</span>: get_latest_email_messages_CD,</span><br><span class="line">                            <span class="string">&quot;stage1_CM&quot;</span>: get_latest_email_messages_CM,</span><br><span class="line">                            <span class="string">&quot;stage2&quot;</span>: get_latest_email_messages</span><br><span class="line">                          &#125;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s/%s_prompt.json&#x27;</span> % (<span class="string">&#x27;get_latest_email&#x27;</span>,<span class="string">&#x27;get_latest_email&#x27;</span>), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(get_latest_email_prompt, f)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们当前提示流程中各阶段的系统提示消息，也需要对其进行整理和本地保存：</span></span><br><span class="line"></span><br><span class="line">system_messages = &#123;<span class="string">&quot;system_message_CD&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: md_content&#125;], </span><br><span class="line">                   <span class="string">&quot;system_message_CM&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>:md_content &#125;], </span><br><span class="line">                   <span class="string">&quot;system_message&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>:md_content&#125;]&#125;</span><br><span class="line">               </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s.json&#x27;</span> % <span class="string">&#x27;system_messages&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(system_messages, f)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义提示词管理的辅助函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_to_tested</span>(<span class="params">function_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将函数同名文件夹由untested文件夹转移至tested文件夹内。\</span></span><br><span class="line"><span class="string">    完成转移则说明函数通过测试，可以使用。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将函数代码写入glmLesson.py文件中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        function_code = f.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 源文件夹路径</span></span><br><span class="line">    src_dir = <span class="string">&#x27;./functions/untested functions/%s&#x27;</span> % function_name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目标文件夹路径</span></span><br><span class="line">    dst_dir = <span class="string">&#x27;./functions/tested functions/%s&#x27;</span> % function_name</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 移动文件夹</span></span><br><span class="line">    shutil.move(src_dir, dst_dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_function_code</span>(<span class="params">s, detail=<span class="number">0</span>, tested=<span class="literal">False</span>, g=<span class="built_in">globals</span>(<span class="params"></span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    函数提取函数，同时执行函数内容，可以选择打印函数信息，并选择代码保存的地址</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_code</span>(<span class="params">s</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        如果输入的字符串s是一个包含Python代码的Markdown格式字符串，提取出代码部分。</span></span><br><span class="line"><span class="string">        否则，返回原字符串。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数:</span></span><br><span class="line"><span class="string">        s: 输入的字符串。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回:</span></span><br><span class="line"><span class="string">        提取出的代码部分，或原字符串。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 判断字符串是否是Markdown格式</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;```python&#x27;</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">&#x27;Python&#x27;</span> <span class="keyword">in</span> s <span class="keyword">or</span><span class="string">&#x27;PYTHON&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">            <span class="comment"># 找到代码块的开始和结束位置</span></span><br><span class="line">            code_start = s.find(<span class="string">&#x27;def&#x27;</span>)</span><br><span class="line">            code_end = s.find(<span class="string">&#x27;```\n&#x27;</span>, code_start)</span><br><span class="line">            <span class="comment"># 提取代码部分</span></span><br><span class="line">            code = s[code_start:code_end]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果字符串不是Markdown格式，返回原字符串</span></span><br><span class="line">            code = s</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> code</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取代码字符串</span></span><br><span class="line">    code = extract_code(s)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取函数名称</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(<span class="string">r&#x27;def (\w+)&#x27;</span>, code)</span><br><span class="line">    function_name = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在untested文件夹内创建函数同名文件夹</span></span><br><span class="line">    directory = <span class="string">&#x27;./functions/untested functions/%s&#x27;</span> % function_name</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">        os.makedirs(directory)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将函数写入本地</span></span><br><span class="line">    <span class="keyword">if</span> tested == <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(code)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 调用remove_to_test函数将函数文件夹转移至tested文件夹内</span></span><br><span class="line">        remove_to_tested(function_name)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(code)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行该函数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">exec</span>(code, g)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;An error occurred while executing the code:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印函数名称</span></span><br><span class="line">    <span class="keyword">if</span> detail == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The function name is:%s&quot;</span> % function_name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> detail == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> tested == <span class="literal">False</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                content = f.read()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:   </span><br><span class="line">                content = f.read()</span><br><span class="line">                </span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> function_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_functions</span>(<span class="params">tested=<span class="literal">False</span>, if_print=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    打印tested或untested文件夹内全部函数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    current_directory = os.getcwd()</span><br><span class="line">    <span class="keyword">if</span> tested == <span class="literal">False</span>:</span><br><span class="line">        directory = current_directory + <span class="string">&#x27;/functions/untested functions&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        directory = current_directory + <span class="string">&#x27;/functions/tested functions&#x27;</span></span><br><span class="line">    files_and_directories = os.listdir(directory)</span><br><span class="line">    <span class="comment"># 过滤结果，只保留.py文件和非__pycache__文件夹</span></span><br><span class="line">    files_and_directories = files_and_directories = [name <span class="keyword">for</span> name <span class="keyword">in</span> files_and_directories <span class="keyword">if</span> (os.path.splitext(name)[<span class="number">1</span>] == <span class="string">&#x27;.py&#x27;</span> <span class="keyword">or</span> os.path.isdir(os.path.join(directory, name))) <span class="keyword">and</span> name != <span class="string">&quot;.ipynb_checkpoints&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> if_print != <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files_and_directories:</span><br><span class="line">            <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> files_and_directories</span><br></pre></td></tr></table></figure><h4 id="3-2-3-2-code-generate全自动编程函数创建方法"><a href="#3-2-3-2-code-generate全自动编程函数创建方法" class="headerlink" title="3.2.3.2 code_generate全自动编程函数创建方法"></a>3.2.3.2 code_generate全自动编程函数创建方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">code_generate</span>(<span class="params">req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=<span class="string">&#x27;glm-4&#x27;</span>, g=<span class="built_in">globals</span>(<span class="params"></span>), detail=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Function calling外部函数自动创建函数，可以根据用户的需求，直接将其翻译为Chat模型可以直接调用的外部函数代码。</span></span><br><span class="line"><span class="string">    :param req: 必要参数，字符串类型，表示输入的用户需求；</span></span><br><span class="line"><span class="string">    :param few_shot: 可选参数，默认取值为字符串all，用于描述Few-shot提示示例的选取方案，当输入字符串all时，则代表提取当前外部函数库中全部测试过的函数作为Few-shot；\</span></span><br><span class="line"><span class="string">    而如果输入的是一个包含了多个函数名称的list，则表示使用这些函数作为Few-shot。</span></span><br><span class="line"><span class="string">    :param model: 可选参数，表示调用的Chat模型，默认选取glm-4；</span></span><br><span class="line"><span class="string">    :param g: 可选参数，表示extract_function_code函数作用域，默认为globals()，即在当前操作空间全域内生效；</span></span><br><span class="line"><span class="string">    :param detail: 可选参数，默认取值为0，还可以取值为1，表示extract_function_code函数打印新创建的外部函数细节；</span></span><br><span class="line"><span class="string">    :return：新创建的函数名称。需要注意的是，在函数创建时，该函数也会在当前操作空间被定义，后续可以直接调用；</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取提示示例的函数名称</span></span><br><span class="line">    <span class="keyword">if</span> few_shot == <span class="string">&#x27;all&#x27;</span>:</span><br><span class="line">        few_shot_functions_name = show_functions(tested=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span>(few_shot) == <span class="built_in">list</span>:</span><br><span class="line">        few_shot_functions_name = few_shot</span><br><span class="line">    <span class="comment"># few_shot_functions = [globals()[name] for name in few_shot_functions_name]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取各阶段系统提示</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/system_messages.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        system_messages = json.load(f)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 各阶段提示message对象</span></span><br><span class="line">    few_shot_messages_CM = []</span><br><span class="line">    few_shot_messages_CD = []</span><br><span class="line">    </span><br><span class="line">    few_shot_messages = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 先保存第一条消息，也就是system message</span></span><br><span class="line">    few_shot_messages_CD += system_messages[<span class="string">&quot;system_message_CD&quot;</span>]</span><br><span class="line">    few_shot_messages_CM += system_messages[<span class="string">&quot;system_message_CM&quot;</span>]</span><br><span class="line">    few_shot_messages += system_messages[<span class="string">&quot;system_message&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建不同阶段提示message</span></span><br><span class="line">    <span class="keyword">for</span> function_name <span class="keyword">in</span> few_shot_functions_name:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s/%s_prompt.json&#x27;</span> % (function_name, function_name), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            msg = json.load(f)</span><br><span class="line">        few_shot_messages_CD += msg[<span class="string">&quot;stage1_CD&quot;</span>]</span><br><span class="line">        few_shot_messages_CM += msg[<span class="string">&quot;stage1_CM&quot;</span>]</span><br><span class="line">        few_shot_messages += msg[<span class="string">&#x27;stage2&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 读取用户需求，作为第一阶段CD环节User content</span></span><br><span class="line">    new_req_CD_input = req</span><br><span class="line">    few_shot_messages_CD.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_CD_input&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一阶段CD环节提示创建完毕，正在进行CD提示...&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 第一阶段CD环节Chat模型调用过程</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">                        model=model,</span><br><span class="line">                        messages=few_shot_messages_CD)</span><br><span class="line">    new_req_pi = response.choices[<span class="number">0</span>].message.content</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一阶段CD环节提示完毕&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 第一阶段CM环节Messages创建</span></span><br><span class="line">    new_req_CM_input = new_req_CD_input + new_req_pi</span><br><span class="line">    few_shot_messages_CM.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_CM_input&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一阶段CM环节提示创建完毕，正在进行第一阶段CM提示...&#x27;</span>)</span><br><span class="line">    <span class="comment"># 第一阶段CM环节Chat模型调用过程</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">                        model=model,</span><br><span class="line">                        messages=few_shot_messages_CM)</span><br><span class="line">    new_req_description = response.choices[<span class="number">0</span>].message.content</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一阶段CM环节提示完毕&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 第二阶段Messages创建过程</span></span><br><span class="line">    few_shot_messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_description&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第二阶段提示创建完毕，正在进行第二阶段提示...&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 第二阶段Chat模型调用过程</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">                        model=model,</span><br><span class="line">                        messages=few_shot_messages)</span><br><span class="line">    new_req_function = response.choices[<span class="number">0</span>].message.content</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第二阶段提示完毕，准备运行函数并编写提示示例&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取函数并运行，创建函数名称对象，统一都写入untested文件夹内</span></span><br><span class="line">    function_name = extract_function_code(s=new_req_function, detail=detail, g=g)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;新函数保存在./functions/untested functions/%s/%s_module.py文件中&#x27;</span> % (function_name, function_name))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建该函数提示示例</span></span><br><span class="line">    new_req_messages_CD = [</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_CD_input&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_pi&#125;</span><br><span class="line">                         ]</span><br><span class="line">    new_req_messages_CM = [</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_CM_input&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>:new_req_description&#125;</span><br><span class="line">                         ]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        new_req_function = f.read()</span><br><span class="line">    </span><br><span class="line">    new_req_messages = [</span><br><span class="line">                       &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_description&#125;,</span><br><span class="line">                       &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>:new_req_function&#125;</span><br><span class="line">                      ] </span><br><span class="line">    </span><br><span class="line">    new_req_prompt = &#123;</span><br><span class="line">                     <span class="string">&quot;stage1_CD&quot;</span>: new_req_messages_CD,</span><br><span class="line">                     <span class="string">&quot;stage1_CM&quot;</span>: new_req_messages_CM,</span><br><span class="line">                     <span class="string">&quot;stage2&quot;</span>: new_req_messages</span><br><span class="line">                    &#125;   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_prompt.json&#x27;</span> % (function_name, function_name), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(new_req_prompt, f)</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;新函数提示示例保存在./functions/untested functions/%s/%s_prompt.json文件中&#x27;</span> % (function_name, function_name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> function_name</span><br></pre></td></tr></table></figure><h4 id="3-2-3-3-额外需求测试"><a href="#3-2-3-3-额外需求测试" class="headerlink" title="3.2.3.3 额外需求测试"></a>3.2.3.3 额外需求测试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">few_shot_functions = [<span class="string">&#x27;get_latest_email&#x27;</span>, <span class="string">&#x27;get_email_count&#x27;</span>]</span><br><span class="line">req = <span class="string">&quot;请查下邮箱里，me这个邮箱给陆小凤发过多少封邮件？&quot;</span></span><br><span class="line">function_name = code_generate(req=req, few_shot=few_shot_functions)</span><br><span class="line">functions_list = [function_name]</span><br><span class="line">messages = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我的邮箱号叫me,陆小凤的邮箱号就叫陆小凤&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: req&#125;]</span><br><span class="line">final_response = run_conversation(messages=messages, functions_list=functions_list, model=<span class="string">&quot;glm-4&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(final_response)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-Al为主，以人为辅"><a href="#3-3-Al为主，以人为辅" class="headerlink" title="3.3 Al为主，以人为辅"></a>3.3 Al为主，以人为辅</h2><p><img src="/images/4.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%92%8CFunction%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98/image-20250319112123288.png" alt="image-20250319112123288"></p><ol><li><p>大模型梳理需求</p></li><li><p>大模型帮忙写代码</p></li><li><p>大模型审核代码</p></li></ol><h3 id="3-3-1-审查模型构建方案剖析"><a href="#3-3-1-审查模型构建方案剖析" class="headerlink" title="3.3.1 审查模型构建方案剖析"></a>3.3.1 审查模型构建方案剖析</h3><ol><li>预训练，微调：这些方案需要的数据量很大，我们压根也没有那么多的样本的数据，而且这种方案门槛很高，成本也很高。所以不现实。</li><li>One-Shot，Few-Shot：这些方案在简单场景下有用，复杂场景就不管用了，而且如果我们Few-shot的量大的话，我们的上文的Token就不够用，所以这个方案也行不通。</li><li>外挂本地知识库：大模型本身能力就很强，而且懂的也很多，所以我们换个思路，我们搞一个本地知识库，在本地知识库里激发这个大模型的能力，从而引导这个大模型完成审查任务。</li><li>如何引导和启发一个大语言模型去理解一些陌生的事物？就像老师教学一样，有两个简单高效的方法，其一是是用其已知的知识去类比未知的知识，其二则是将陌生事物视为某些一般概念的特例。例如，当前的外部挂载文档非常重要的一个作用就是要让大语言模型理解现在要审查的多段提示，即要引导大语言模型理解什么是多段提示，但如果从头开始进行相关概念介绍（例如从头介绍两个阶段的提示分别是什么、什么是LtM、什么是问题拆解等）会非常的繁琐且效率很低，因此这里我们可以将多段提示比喻成推理链，借助大语言模型本身对推理链的理解来理解什么是多段提示。</li></ol><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function_name = <span class="string">&#x27;get_latest_email&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s/%s_prompt.json&#x27;</span> % (function_name, function_name), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    msg = json.load(f)</span><br><span class="line">chain_of_prompt = <span class="string">&quot;以下是个一个成功运行的推理链条，推理分为三个阶段，各阶段推理内容如下：%s。&quot;</span> % msg</span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">                        model=<span class="string">&quot;glm-4&quot;</span>,</span><br><span class="line">                        messages=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,  <span class="string">&quot;content&quot;</span>: <span class="string">&quot;以下是一个推理链，用于创建一个满足某个功能的函数，推理链如下：%s。请帮我介绍下这个推理链&quot;</span> % chain_of_prompt&#125;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="3-3-2-审查模型构建方案落地"><a href="#3-3-2-审查模型构建方案落地" class="headerlink" title="3.3.2 审查模型构建方案落地"></a>3.3.2 审查模型构建方案落地</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;复杂需求推理链.md&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    md_content = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(md_content)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是邮箱项目？邮件项目本身由一系列的程序组成，核心功能是根据用户自然语言描述进行相应的邮箱操作，如查阅邮件、收发邮件等。该场景是我们自己构建的一个场景。主要实现的是对我们my_mail数据库里的数据进行增删查改。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>什么是推理链？在智能邮件项目中，推理链特指将用户的需求逐步推导为python函数的过程，也就是说，每个推理链的输入都是用户需求，而推理的结果则是一个可以满足用户需求的函数。每个推理链都有三个推理环节，且都以json格式表示，例如，以下是一个正确的推理链A：</span><br><span class="line"></span><br><span class="line">```json</span><br><span class="line">&#123;<span class="string">&quot;stage1_CD&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;\u8bf7\u67e5\u9605\u6211\u90ae\u7bb1\u91cc\u9762\u672a\u8bfb\u90ae\u4ef6\uff0c\u4ece\u6311\u9009\u6709\u5173\u4f1a\u8bae\u9080\u8bf7\u7684\u90ae\u4ef6\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u4e00\u4e2a\u540d\u79f0\u4e3a\u4f1a\u8bae\u9884\u5b9a\u7684\u6807\u7b7e&quot;</span>&#125;, &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;\u5f53\u524d\u9700\u6c42\u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u7684\u662f\uff1a1.\u67e5\u8be2\u6761\u4ef6\uff1b2.\u6dfb\u52a0\u7684\u6807\u7b7e\u540d\uff1b3.\u67e5\u8be2\u8c01\u7684\u90ae\u7bb1&quot;</span>&#125;], <span class="string">&quot;stage1_CM&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;\u8bf7\u67e5\u9605\u6211\u90ae\u7bb1\u91cc\u9762\u672a\u8bfb\u90ae\u4ef6\uff0c\u4ece\u6311\u9009\u6709\u5173\u4f1a\u8bae\u9080\u8bf7\u7684\u90ae\u4ef6\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u4e00\u4e2a\u540d\u79f0\u4e3a\u4f1a\u8bae\u9884\u5b9a\u7684\u6807\u7b7e\u5f53\u524d\u9700\u6c42\u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u7684\u662f\uff1a1.\u67e5\u8be2\u6761\u4ef6\uff1b2.\u6dfb\u52a0\u7684\u6807\u7b7e\u540d\uff1b3.\u67e5\u8be2\u8c01\u7684\u90ae\u7bb1&quot;</span>&#125;, &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;\u8bf7\u5e2e\u6211\u7f16\u5199\u4e00\u4e2apython\u51fd\u6570\uff0c\u67e5\u8be2\u6211\u6536\u5230\u7684\u6240\u6709\u672a\u8bfb\u90ae\u4ef6\uff0c\u5e76\u5728\u4e0e\u4f1a\u8bae\u9080\u8bf7\u76f8\u5173\u7684\u90ae\u4ef6\u4e0a\u6dfb\u52a0\u4e00\u79cd\u540d\u4e3a\u201c\u4f1a\u8bae\u9884\u5b9a\u201d\u7684\u6807\u7b7e\uff0c\u51fd\u6570\u8981\u6c42\u5982\u4e0b\uff1a                  1.\u51fd\u6570\u53c2\u6570query\u3001tag\u548cuser_id\uff0c\u4e09\u4e2a\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5176\u4e2dquery\u8868\u793a\u8981\u67e5\u8be2\u7684\u6761\u4ef6\uff0ctag\u8868\u793a\u8981\u6dfb\u52a0\u7684\u6807\u7b7e\u540d\uff0cuser_id\u8868\u793a\u8981\u68c0\u7d22\u90ae\u4ef6\u7684\u7528\u6237\u7684ID\u3002\u9ed8\u8ba4\u503c\u662f&#x27;me&#x27;\uff0c\u8868\u793a\u5f53\u524d\u6388\u6743\u7684\u7528\u6237\uff1b                  2.\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u662f\u6dfb\u52a0\u6807\u7b7e\u540e\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u8fd4\u56de\u7ed3\u679c\u672c\u8eab\u5fc5\u987b\u662f\u4e00\u4e2ajson\u683c\u5f0f\u5bf9\u8c61\uff1b                  3.\u8bf7\u5c06\u5168\u90e8\u529f\u80fd\u5c01\u88c5\u5728\u4e00\u4e2a\u51fd\u6570\u5185\uff1b                  4.\u8bf7\u5728\u51fd\u6570\u7f16\u5199\u8fc7\u7a0b\u4e2d\uff0c\u5728\u51fd\u6570\u5185\u90e8\u52a0\u5165\u4e2d\u6587\u7f16\u5199\u7684\u8be6\u7ec6\u7684\u51fd\u6570\u8bf4\u660e\u6587\u6863\uff0c\u7528\u4e8e\u8bf4\u660e\u51fd\u6570\u529f\u80fd\u3001\u51fd\u6570\u53c2\u6570\u60c5\u51b5\u4ee5\u53ca\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u7b49\u4fe1\u606f\uff1b&quot;</span>&#125;], <span class="string">&quot;stage2&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;\u8bf7\u5e2e\u6211\u7f16\u5199\u4e00\u4e2apython\u51fd\u6570\uff0c\u67e5\u8be2\u6211\u6536\u5230\u7684\u6240\u6709\u672a\u8bfb\u90ae\u4ef6\uff0c\u5e76\u5728\u4e0e\u4f1a\u8bae\u9080\u8bf7\u76f8\u5173\u7684\u90ae\u4ef6\u4e0a\u6dfb\u52a0\u4e00\u79cd\u540d\u4e3a\u201c\u4f1a\u8bae\u9884\u5b9a\u201d\u7684\u6807\u7b7e\uff0c\u51fd\u6570\u8981\u6c42\u5982\u4e0b\uff1a                  1.\u51fd\u6570\u53c2\u6570query\u3001tag\u548cuser_id\uff0c\u4e09\u4e2a\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5176\u4e2dquery\u8868\u793a\u8981\u67e5\u8be2\u7684\u6761\u4ef6\uff0ctag\u8868\u793a\u8981\u6dfb\u52a0\u7684\u6807\u7b7e\u540d\uff0cuser_id\u8868\u793a\u8981\u68c0\u7d22\u90ae\u4ef6\u7684\u7528\u6237\u7684ID\u3002\u9ed8\u8ba4\u503c\u662f&#x27;me&#x27;\uff0c\u8868\u793a\u5f53\u524d\u6388\u6743\u7684\u7528\u6237\uff1b                  2.\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u662f\u6dfb\u52a0\u6807\u7b7e\u540e\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u8fd4\u56de\u7ed3\u679c\u672c\u8eab\u5fc5\u987b\u662f\u4e00\u4e2ajson\u683c\u5f0f\u5bf9\u8c61\uff1b                  3.\u8bf7\u5c06\u5168\u90e8\u529f\u80fd\u5c01\u88c5\u5728\u4e00\u4e2a\u51fd\u6570\u5185\uff1b                  4.\u8bf7\u5728\u51fd\u6570\u7f16\u5199\u8fc7\u7a0b\u4e2d\uff0c\u5728\u51fd\u6570\u5185\u90e8\u52a0\u5165\u4e2d\u6587\u7f16\u5199\u7684\u8be6\u7ec6\u7684\u51fd\u6570\u8bf4\u660e\u6587\u6863\uff0c\u7528\u4e8e\u8bf4\u660e\u51fd\u6570\u529f\u80fd\u3001\u51fd\u6570\u53c2\u6570\u60c5\u51b5\u4ee5\u53ca\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u7b49\u4fe1\u606f\uff1b&quot;</span>&#125;, &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;def label_meeting_emails(query, tag, user_id=&#x27;me&#x27;):\n    \&quot;\&quot;\&quot;\n    \u67e5\u8be2\u672a\u8bfb\u90ae\u4ef6\uff0c\u5e76\u7ed9\u4e0e\u4f1a\u8bae\u9080\u8bf7\u76f8\u5173\u7684\u90ae\u4ef6\u6dfb\u52a0\u6807\u7b7e\u3002\n\n    \u53c2\u6570:\n    query: \u8981\u67e5\u8be2\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5bfb\u627e\u5305\u542b\u201c\u4f1a\u8bae\u201d\u6216\u201c\u9080\u8bf7\u201d\u7b49\u5173\u952e\u5b57\u7684\u90ae\u4ef6\u3002\n    tag: \u8981\u6dfb\u52a0\u7684\u6807\u7b7e\u7684\u540d\u5b57\u3002\n    user_id: \u8981\u68c0\u67e5\u7684\u7528\u6237\u7684ID\uff0c\u9ed8\u8ba4\u503c\u4e3a&#x27;me&#x27;\uff0c\u8868\u793a\u5f53\u524d\u6388\u6743\u7684\u7528\u6237\u3002\n\n    \u8fd4\u56de:\n    \u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u5df2\u6dfb\u52a0\u6807\u7b7e\u7684\u90ae\u4ef6\u7684ID\u548c\u4e3b\u9898\u3002\u5426\u5219\uff0c\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u3002\n    \&quot;\&quot;\&quot;\n    # \u4ece\u672c\u5730\u6587\u4ef6\u4e2d\u52a0\u8f7d\u51ed\u636e\n    creds = Credentials.from_authorized_user_file(&#x27;token.json&#x27;)\n\n    # \u521b\u5efa Gmail API \u5ba2\u6237\u5bf9\u8c61\n    service = build(&#x27;gmail&#x27;, &#x27;v1&#x27;, credentials=creds)\n\n    # \u83b7\u53d6\u6ee1\u8db3\u67e5\u8be2\u6761\u4ef6\u7684\u90ae\u4ef6\u5217\u8868\n    results = service.users().messages().list(userId=user_id, q=f&#x27;is:unread &#123;query&#125;&#x27;).execute()\n    messages = results.get(&#x27;messages&#x27;, [])\n\n    if not messages:\n        print(f\&quot;No results for query: &#123;query&#125;\&quot;)\n        return json.dumps(&#123;\&quot;error\&quot;:\&quot;No emails found.\&quot;&#125;)\n\n    # \u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u90ae\u4ef6\u6dfb\u52a0\u6807\u7b7e\n    emails = []\n    for msg in messages:\n        # \u83b7\u53d6\u90ae\u4ef6\u8be6\u60c5\n        msg = service.users().messages().get(userId=user_id, id=msg[&#x27;id&#x27;]).execute()\n\n        # \u6807\u7b7e\u5904\u7406\n        add_label = &#123;\n            &#x27;addLabelIds&#x27;: [tag],\n            &#x27;removeLabelIds&#x27;: []\n        &#125;\n        msg[&#x27;payload&#x27;][&#x27;headers&#x27;][-1].get(&#x27;value&#x27;)\n        res = service.users().messages().modify(userId=user_id, id=msg[&#x27;id&#x27;], body=add_label).execute()\n\n        # \u6dfb\u52a0\u90ae\u4ef6\u4fe1\u606f\n        for d in msg[&#x27;payload&#x27;][&#x27;headers&#x27;]:\n            if d[&#x27;name&#x27;] == &#x27;Subject&#x27;:\n                sub = d[&#x27;value&#x27;]\n        emails.append(&#123;\&quot;id\&quot;: res[&#x27;id&#x27;], \&quot;subject\&quot;: sub&#125;)\n\n    return json.dumps(emails, indent=2)\n&quot;</span>&#125;]&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>对于推理链最后生成的函数，一定要是可以运行的、能够满足用户需求的python函数，且需要有详细的说明文档，说明文档内容包括函数功能、函数参数情况以及函数返回结果等信息；</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>你是一个推理链审查助手，善于检测推理链中是否存在错误。接下来我会给你一个错误的推理链，请你对其进行修改；</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>当你对推理链进行修改之后，请仿造推理链A的格式，以json格式输出修改之后的推理链。注意，请勿返回其他解释说明的文字，只返回一个json格式的修改之后的推理链即可。</span><br></pre></td></tr></table></figure><blockquote><p>这里我们可以简单总结外部挂载文档的5方面信息：</p><ol><li><p>说明当前项目背景（包括编程要求等）；</p></li><li><p>说明审查对象，包括审查对象的性质和形式等；</p></li><li><p>说明审查的目标；</p></li><li><p>进行身份设置；</p></li><li><p>说明审查之后的输出结果。</p></li></ol></blockquote><h3 id="3-3-3-审查模型效果验证"><a href="#3-3-3-审查模型效果验证" class="headerlink" title="3.3.3 审查模型效果验证"></a>3.3.3 审查模型效果验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;复杂需求推理链.md&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    md_content = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./error_function_test/%s/%s_prompt.json&#x27;</span> % (function_name, function_name), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    msg = json.load(f)</span><br><span class="line"></span><br><span class="line">msg_str = json.dumps(msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/my_mail数据字典.md&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data_content = f.read()</span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">                        model=<span class="string">&quot;glm-4&quot;</span>,</span><br><span class="line">                        messages=[</span><br><span class="line">                            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: data_content&#125;,</span><br><span class="line">                            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: md_content&#125;,</span><br><span class="line">                            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;以下是一个错误的邮箱项目的推理链，请你按照要求对其进行修改：%s&#x27;</span> % msg_str&#125;</span><br><span class="line">                          ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3-3-4-基于大模型的自动Debug的函数"><a href="#3-3-4-基于大模型的自动Debug的函数" class="headerlink" title="3.3.4 基于大模型的自动Debug的函数"></a>3.3.4 基于大模型的自动Debug的函数</h3><h4 id="3-3-4-1-定义一个审查函数"><a href="#3-3-4-1-定义一个审查函数" class="headerlink" title="3.3.4.1 定义一个审查函数"></a>3.3.4.1 定义一个审查函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prompt_modified</span>(<span class="params">function_name, system_content=<span class="string">&#x27;./data/推理链.md&#x27;</span>, model=<span class="string">&quot;glm-4&quot;</span>, g=<span class="built_in">globals</span>(<span class="params"></span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    邮箱项目的外部函数审查函数，用于审查外部函数创建流程提示是否正确以及最终创建的代码是否正确</span></span><br><span class="line"><span class="string">    :param function_name: 必要参数，字符串类型，表示审查对象名称；</span></span><br><span class="line"><span class="string">    :param system_content: 可选参数，默认取值为字符串推理链修改.md，表示此时审查函数外部挂载文档名称，需要是markdwon格式文档；</span></span><br><span class="line"><span class="string">    :param model: 可选参数，表示调用的Chat模型，默认选glm-4；</span></span><br><span class="line"><span class="string">    :param g: 可选参数，表示extract_function_code函数作用域，默认为globals()，即在当前操作空间全域内生效；</span></span><br><span class="line"><span class="string">    :return：审查结束后新创建的函数名称</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在执行审查函数，审查对象：%s&quot;</span> % function_name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data/my_mail数据字典.md&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data_content = f.read()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(system_content, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        md_content = f.read()</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 读取原函数全部提示内容</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_prompt.json&#x27;</span> % (function_name, function_name), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        msg = json.load(f)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将其保存为字符串</span></span><br><span class="line">    msg_str = json.dumps(msg)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进行审查</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">                        model=model,</span><br><span class="line">                        messages=[</span><br><span class="line">                            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: data_content&#125;,</span><br><span class="line">                            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: md_content&#125;,</span><br><span class="line">                            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;以下是一个错误的邮箱项目的推理链，请你按照要求对其进行修改：%s&#x27;</span> % msg_str&#125;</span><br><span class="line">                          ]</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    modified_result = response.choices[<span class="number">0</span>].message.content</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_json</span>(<span class="params">s</span>):</span><br><span class="line">        pattern = <span class="string">r&#x27;```[jJ][sS][oO][nN]\s*(&#123;.*?&#125;)\s*```&#x27;</span></span><br><span class="line">        <span class="keyword">match</span> = re.search(pattern, s, re.DOTALL)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">    </span><br><span class="line">    modified_json = extract_json(modified_result)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取函数源码</span></span><br><span class="line">    code = json.loads(modified_json)[<span class="string">&#x27;stage2&#x27;</span>][<span class="number">1</span>][<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取函数名</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(<span class="string">r&#x27;def (\w+)&#x27;</span>, code)</span><br><span class="line">    function_name = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;审查结束，新的函数名称为：%s。\n正在运行该函数定义过程，并保存函数源码与prompt&quot;</span> % function_name)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">exec</span>(code, g)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在untested文件夹内创建函数同名文件夹</span></span><br><span class="line">    directory = <span class="string">&#x27;./functions/untested functions/%s&#x27;</span> % function_name</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">        os.makedirs(directory)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 写入函数</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(code)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 写入提示</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_prompt.json&#x27;</span> % (function_name, function_name), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(json.loads(modified_json), f)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;新函数提示示例保存在./functions/untested functions/%s/%s_prompt.json文件中&#x27;</span> % (function_name, function_name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s函数已在当前操作空间定义，可以进行效果测试&quot;</span> % function_name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> function_name</span><br></pre></td></tr></table></figure><h4 id="3-3-4-2-构建自动Debug的函数"><a href="#3-3-4-2-构建自动Debug的函数" class="headerlink" title="3.3.4.2 构建自动Debug的函数"></a>3.3.4.2 构建自动Debug的函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function_test</span>(<span class="params">function_name, req, few_shot, model=<span class="string">&quot;glm-4&quot;</span>, g=<span class="built_in">globals</span>(<span class="params"></span>)</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_messages</span>(<span class="params">ueser_content</span>):</span><br><span class="line">        messages = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: data_content&#125;,</span><br><span class="line">                     &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我的邮箱号叫me&quot;</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: ueser_content&#125;]</span><br><span class="line">        <span class="keyword">return</span> messages</span><br><span class="line">            </span><br><span class="line">    messages = test_messages(req)</span><br><span class="line">    </span><br><span class="line">    new_function = <span class="built_in">globals</span>()[function_name]</span><br><span class="line">    functions_list = [new_function]</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;根据既定用户需求req进行%s函数功能测试，请确保当该函数已经在当前操作空间定义...&quot;</span> % function_name)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 有可能在run_conversation环节报错</span></span><br><span class="line">    <span class="comment"># 若没报错，则运行：</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">## 直接调用看当前函数给出来的结果是否正确</span></span><br><span class="line">        <span class="comment">## 有两种可能：1，代码能运行 2. 代码不能运行</span></span><br><span class="line">        final_response = run_conversation(messages=messages, functions_list=functions_list, model=model)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;当前函数运行结果：&#x27;%s&#x27;&quot;</span> % final_response)</span><br><span class="line">        <span class="comment">## 如果代码能运行看一下是否能满足需求</span></span><br><span class="line">        feedback = <span class="built_in">input</span>(<span class="string">&quot;函数功能是否满足要求 (yes/no)? &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> feedback.lower() == <span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;函数功能通过测试，正在将函数写入tested文件夹&quot;</span>)</span><br><span class="line">            <span class="comment">## 如果满足就通过测试</span></span><br><span class="line">            remove_to_tested(function_name)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">## 如果不满足需求</span></span><br><span class="line">            next_step = <span class="built_in">input</span>(<span class="string">&quot;函数功能未通过测试，是1.需要再次进行测试，还是2.进入debug流程？&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> next_step == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;准备再次测试...&quot;</span>)</span><br><span class="line">                <span class="comment">## 再次运行</span></span><br><span class="line">                function_test(function_name, req, few_shot)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">## 进行Debug，选择方案</span></span><br><span class="line">                solution = <span class="built_in">input</span>(<span class="string">&quot;请选择debug方案：\n1.再次执行函数创建流程，并测试结果；\n2.执行审查函数\</span></span><br><span class="line"><span class="string">                \n3.重新输入用户需求；\n4.退出程序，进行手动尝试&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> solution == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    <span class="comment"># 再次运行函数创建过程</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;好的，正在尝试再次创建函数，请稍等...&quot;</span>)</span><br><span class="line">                    few_shot_str = <span class="built_in">input</span>(<span class="string">&quot;准备再次测试，请问是1.采用此前Few-shot方案，还是2.带入全部函数示例进行Few-shot？&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> few_shot_str == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                        function_name = code_generate(req=req, few_shot=few_shot, model=model, g=g)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        function_name = code_generate(req=req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=model, g=g)</span><br><span class="line">                    <span class="comment">## 构建完了以后继续运行</span></span><br><span class="line">                    function_test(function_name=function_name, req=req, few_shot=few_shot, g=g)</span><br><span class="line">                <span class="keyword">elif</span> solution == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    <span class="comment"># 执行审查函数</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;好的，执行审查函数，请稍等...&quot;</span>)</span><br><span class="line">                    function_name = prompt_modified(function_name=function_name, model=<span class="string">&quot;gpt-3.5-turbo-16k-0613&quot;</span>, g=g)</span><br><span class="line">                    <span class="comment"># 接下来带入进行测试</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;新函数已创建，接下来带入进行测试...&quot;</span>)</span><br><span class="line">                    function_test(function_name=function_name, req=req, few_shot=few_shot, g=g)</span><br><span class="line">                <span class="keyword">elif</span> solution == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    <span class="comment">## 用户重新输入需求，也就意味着重新</span></span><br><span class="line">                    new_req = <span class="built_in">input</span>(<span class="string">&quot;好的，请再次输入用户需求，请注意，用户需求描述方法将极大程度影响最终函数创建结果。&quot;</span>)</span><br><span class="line">                    few_shot_str = <span class="built_in">input</span>(<span class="string">&quot;接下来如何运行代码创建函数？1.采用此前Few-shot方案；\n2.使用全部外部函数作为Few-shot&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> few_shot_str == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                        function_name = code_generate(req=new_req, few_shot=few_shot, model=model, g=g)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        function_name = code_generate(req=new_req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=model, g=g)</span><br><span class="line">                    function_test(function_name=function_name, req=new_req, few_shot=few_shot, g=g)</span><br><span class="line">                <span class="keyword">elif</span> solution == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;加油~&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># run_conversation报错时则运行：</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        next_step = <span class="built_in">input</span>(<span class="string">&quot;run_conversation无法正常运行，接下来是1.再次运行运行run_conversation，还是2.进入debug流程？&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> next_step == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            function_test(function_name, req, few_shot)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            solution = <span class="built_in">input</span>(<span class="string">&quot;请选择debug方案：\n1.再次执行函数创建流程，并测试结果；\n2.执行审查函数\</span></span><br><span class="line"><span class="string">            \n3.重新输入用户需求；\n4.退出程序，进行手动尝试&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> solution == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                <span class="comment"># 再次运行函数创建过程</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;好的，正在尝试再次创建函数，请稍等...&quot;</span>)</span><br><span class="line">                few_shot_str = <span class="built_in">input</span>(<span class="string">&quot;准备再次测试，请问是1.采用此前Few-shot方案，还是2.带入全部函数示例进行Few-shot？&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> few_shot_str == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    function_name = code_generate(req=req, few_shot=few_shot, model=model, g=g)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    function_name = code_generate(req=req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=model, g=g)</span><br><span class="line">                function_test(function_name=function_name, req=req, few_shot=few_shot, g=g)</span><br><span class="line">            <span class="keyword">elif</span> solution == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                <span class="comment"># 执行审查函数</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;好的，执行审查函数，请稍等...&quot;</span>)</span><br><span class="line">                max_attempts = <span class="number">3</span></span><br><span class="line">                attempts = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> attempts &lt; max_attempts:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        function_name = prompt_modified(function_name=function_name, model=<span class="string">&quot;gpt-3.5-turbo-16k-0613&quot;</span>, g=g)</span><br><span class="line">                        <span class="keyword">break</span>  <span class="comment"># 如果代码成功执行，跳出循环</span></span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        attempts += <span class="number">1</span>  <span class="comment"># 增加尝试次数</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;发生错误：&quot;</span>, e)</span><br><span class="line">                        <span class="keyword">if</span> attempts == max_attempts:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;已达到最大尝试次数，程序终止。&quot;</span>)</span><br><span class="line">                            <span class="keyword">raise</span>  <span class="comment"># 重新引发最后一个异常</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;正在重新运行审查程序...&quot;</span>)</span><br><span class="line">                <span class="comment"># 接下来带入进行测试</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;新函数已创建，接下来带入进行测试...&quot;</span>)</span><br><span class="line">                function_test(function_name=function_name, req=req, few_shot=few_shot, g=g)</span><br><span class="line">            <span class="keyword">elif</span> solution == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                new_req = <span class="built_in">input</span>(<span class="string">&quot;好的，请再次输入用户需求，请注意，用户需求描述方法将极大程度影响最终函数创建结果。&quot;</span>)</span><br><span class="line">                few_shot_str = <span class="built_in">input</span>(<span class="string">&quot;接下来如何运行代码创建函数？1.采用此前Few-shot方案；\n2.使用全部外部函数作为Few-shot&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> few_shot_str == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    function_name = code_generate(req=new_req, few_shot=few_shot, model=model, g=g)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    function_name = code_generate(req=new_req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=model, g=g)</span><br><span class="line">                function_test(function_name=function_name, req=new_req, few_shot=few_shot, g=g)</span><br><span class="line">            <span class="keyword">elif</span> solution == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;加油~&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-2-4-3-全自动流程代码编写"><a href="#3-2-4-3-全自动流程代码编写" class="headerlink" title="3.2.4.3 全自动流程代码编写"></a>3.2.4.3 全自动流程代码编写</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">req_auto_func</span>(<span class="params">req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=<span class="string">&#x27;glm-4&#x27;</span>, g=<span class="built_in">globals</span>(<span class="params"></span>), detail=<span class="number">0</span></span>):</span><br><span class="line">    function_name = code_generate(req, few_shot=few_shot, model=model, g=g, detail=detail)</span><br><span class="line">    function_test(function_name=function_name, req=req, few_shot=few_shot, model=model, g=g)</span><br></pre></td></tr></table></figure><h3 id="3-2-5-大模型编程的瓶颈"><a href="#3-2-5-大模型编程的瓶颈" class="headerlink" title="3.2.5 大模型编程的瓶颈"></a>3.2.5 大模型编程的瓶颈</h3><h4 id="3-2-5-1-编程性能瓶颈的根源"><a href="#3-2-5-1-编程性能瓶颈的根源" class="headerlink" title="3.2.5.1 编程性能瓶颈的根源"></a>3.2.5.1 编程性能瓶颈的根源</h4><p>大模型在复杂问题上的编程能力不足，主要源于缺乏“长期记忆”，无法持续围绕目标生成长代码块。代码编写本质上是按特定格式创作文本，因此大模型在长文本创作能力不足时，长代码编写也会受到限制，导致复杂需求实现的准确性下降。</p><h4 id="3-2-5-2-提升长代码编写稳定性的策略"><a href="#3-2-5-2-提升长代码编写稳定性的策略" class="headerlink" title="3.2.5.2 提升长代码编写稳定性的策略"></a>3.2.5.2 提升长代码编写稳定性的策略</h4><p>核心问题在于大模型编写长代码能力不足，而非理解需求能力不足。因此，关键在于提高模型的编程能力，而不是进一步优化提示工程。最直接有效的方法是 “列提纲-分段编写-合并”，通过分段完成提升代码稳定性。需要注意代码衔接、变量一致性以及充分利用已有辅助函数提高开发效率。</p><ol><li>第一阶段：复杂需求拆解</li></ol><p>将复杂需求拆解为简单、确定性的子任务，类似CoT（思维链）方式逐步完成。拆分后的子任务需具备明确功能，如“查找邮件”“给邮件打标签”等最小功能单位。为确保拆分准确性，可提供项目背景信息及示例作为Few-shot提示，也可让大模型自行生成拆解示例。子任务需简单易实现，确保代码编写准确性。</p><ol start="2"><li>第二阶段：代码编写与整合</li></ol><p>完成子任务拆解后，进入代码编写与整合阶段。以下是三种方案：</p><p>方案一：高层函数组合</p><ul><li>思路：创建基础功能函数，编写高层函数整合基础函数输出，完成复杂需求。</li><li>优势：便于管理、代码利用率高，可重复使用已有函数。</li><li>劣势：大模型难以准确衔接函数输出输入格式，容易导致运行失败。</li></ul><p>方案二：嵌套函数</p><ul><li>思路：创建嵌套函数，将子任务函数嵌入主函数内，确保输出输入一致。</li><li>优势：减少函数衔接问题，提高代码准确性。</li><li>劣势：需多次提示大模型调整代码逻辑，流程复杂，效率较低。</li></ul><p>方案三：分别创建函数再统一代码（推荐方案）</p><ul><li>思路：<ol><li>拆分子任务，分别创建函数1、函数2，确保单独运行无误。</li><li>提供函数1、2源码作为大模型提示，重新编写满足原始需求的完整函数。</li></ol></li><li>优势：<ul><li>利用大模型代码生成与自我审查能力，提高复杂需求代码准确性。</li><li>函数1、2无需完美衔接，最终函数参考其代码逻辑重新生成完整实现。</li><li>高度复用已有函数生成与测试流程，开发效率显著提升。</li></ul></li></ul><h3 id="3-2-6复杂任务的编程落地"><a href="#3-2-6复杂任务的编程落地" class="headerlink" title="3.2.6复杂任务的编程落地"></a>3.2.6复杂任务的编程落地</h3><h4 id="3-2-6-1-复杂需求拆解"><a href="#3-2-6-1-复杂需求拆解" class="headerlink" title="3.2.6.1 复杂需求拆解"></a>3.2.6.1 复杂需求拆解</h4><p>&emsp;&emsp;首先，我们需要创建一个专门用于复杂问题拆解的模型。根据此前的分析，该模型同时需要外部挂载文档以说明项目背景和复杂任务拆解的目的，同时还需要一些复杂任务拆解的示例作为Few-shot。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/复杂任务拆解.md&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    md_content_plus = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(md_content_plus)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是邮箱项目？邮件项目本身由一系列的程序组成，核心功能是根据用户自然语言描述进行相应的邮箱操作，如查阅邮件、收发邮件等。该场景是我们自己构建的一个场景。</span><br><span class="line">主要实现的是对我们my_mail数据库里的数据进行增删查改。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>什么是任务拆解？在邮箱项目中，任务拆解指的是将用户需求拆解为若干个最小子任务的过程，任务拆解的目标是为了降低完成复杂任务的难度。例如以下就是一个复杂任务拆解过程，原始用户需求为Q：“请帮我查下西门吹雪给我发送了哪些邮件，并对这些邮件内容进行总结”，该需求可以拆分为两个最小子任务，分别是A:“<span class="number">1.</span>查找我和西门吹雪之间通信的邮件列表”，“<span class="number">2.</span>根据某份邮件列表，对这些邮件的主要内容进行总结”；</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>什么是最小子任务？最小子任务指的是在在邮箱项目中，在进行复杂任务拆解时拆解得到的最小任务单元。例如获取我和西门吹雪之间的通信列表、围绕某些邮件进行内容总结，就属于最小子任务。最小子任务不可再进行任务拆解，并且最小子任务往往都是较为简单的任务，是一些可以快速的实现的功能；</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>若一个任务拆解成了多个最小子任务，那么请注意这多个最小子任务的任务顺序，例如此前的例子中，查找邮件列表就应该发生在对邮件内容进行总结之前。</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>你是一名任务拆解助手，负责邮件项目中用户需求拆解。当一个用户需求可以拆解为多个最小子任务时，请对其进行最小子任务的拆解；而当一个用户需求本身就是一个最小子任务时，则无需对其进行拆解。</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接下来继续创建Few-shot的提示示例。这里总共编写了四组难度和复杂度各不相同的四个需求进行拆解，具体提示示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">example1_user = <span class="string">&#x27;Q:请帮我查下西门吹雪给我发送了哪些邮件，并对这些邮件内容进行总结。&#x27;</span></span><br><span class="line">example1_assistent = <span class="string">&#x27;A:1.请帮我整理西门吹雪发给我的邮件列表。2.对某些给定的邮件进行邮件内容总结。&#x27;</span></span><br><span class="line"></span><br><span class="line">example2_user = <span class="string">&#x27;Q:请帮我查下最近一封未读邮件的发件人。&#x27;</span></span><br><span class="line">example2_assistent = <span class="string">&#x27;A:1.请帮我查下最近一封未读邮件的发件人。&#x27;</span></span><br><span class="line"></span><br><span class="line">example3_user = <span class="string">&#x27;Q:请分析我邮箱里全部已收到的邮件，告诉我最常联系的人。&#x27;</span></span><br><span class="line">example3_assistent = <span class="string">&#x27;A:1.请帮我整理邮箱里全部已收到邮件的邮件列表。2.根据某份邮件列表，分析并找出最常联系的人。&#x27;</span></span><br><span class="line"></span><br><span class="line">example4_user = <span class="string">&#x27;Q:请在我邮箱里查找6月5号到6号的未读邮件，并找出工作相关的未读邮件，请依次给这些未读邮件回复说我正在休假，同时请将这些邮件转发给我的助理西门吹雪。&#x27;</span></span><br><span class="line">example4_assistent = <span class="string">&#x27;A:1.请查找并整理我邮箱里6月5号到6号的未读邮件列表。2.根据某份邮件列表，查找并汇总其中和工作有关的列表。3.根据某份邮件列表，对其逐一进行回复，告诉他们我正在休假。4.根据某份邮件列表，将其逐一转发给我的助理西门吹雪。&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，这里我们统一通过Q&amp;A的方式来提示模型不同内容的类型，同时拆解之后的每段文字也都以句号结尾，方便后续进行结构化字符串提取。在创建的四个提示实力中，1、3示例属于一般示例，对于大多数复杂需求来说，拆解为两个子任务基本就基本能够构成较好的自然语言编程引导，而第二个提示示例则是提醒模型，当需求较为简单时，不用进行需求拆解；而最后一个提示的示例，则是一个相对来说非常复杂的需求，总共拆解得到了4个子任务，是为了提醒模型在必要时，可以多拆分一些子任务。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">req = <span class="string">&#x27;请查阅我邮箱里面未读邮件，从挑选有公司的邮件，并将其标签改为紧急&#x27;</span></span><br><span class="line">system_message = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: md_content_plus&#125;]</span><br><span class="line">decomp_few_shot = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: example1_user&#125;,</span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: example1_assistent&#125;, </span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: example2_user&#125;, </span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: example2_assistent&#125;, </span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: example3_user&#125;, </span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: example3_assistent&#125;, </span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: example4_user&#125;, </span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: example4_assistent&#125;]</span><br><span class="line">messages = system_message + decomp_few_shot</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s.json&#x27;</span> % <span class="string">&#x27;decompose_messages&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(messages, f)</span><br><span class="line">    </span><br><span class="line">messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: req&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sub_req1 = <span class="string">&#x27;查阅邮箱中的未读邮件，并整理出未读邮件列表。&#x27;</span></span><br><span class="line">sub_req2 = <span class="string">&#x27;从未读邮件列表中筛选出包含公司信息的邮件。&#x27;</span></span><br><span class="line">sub_req3 = <span class="string">&#x27;对于筛选出的公司邮件，将其标签改为“紧急”。&#x27;</span></span><br></pre></td></tr></table></figure><p>至此，我们就完成了原始任务的拆解部分工作。当然，我们也可以将上述过程封装为一个完整的函数，方便之后进行灵活调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_decompose_results</span>(<span class="params">req, model=<span class="string">&#x27;glm-4&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    复杂需求拆解函数，能够将用户输入的复杂需求拆解为一系列更容易完成的子任务</span></span><br><span class="line"><span class="string">    :param req: 必选参数，以字符串形式表示，用于表示用户输入的原始需求；</span></span><br><span class="line"><span class="string">    :param model: 拆解需求所使用的大模型；</span></span><br><span class="line"><span class="string">    :return：由子任务所组成的列表；</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    decompose_results = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/decompose_messages.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        decompose_messages = json.load(f)</span><br><span class="line">        </span><br><span class="line">    decompose_messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: req&#125;)</span><br><span class="line">    </span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">                model=model,</span><br><span class="line">                messages=decompose_messages</span><br><span class="line">            )</span><br><span class="line">    </span><br><span class="line">    res = response.choices[<span class="number">0</span>].message.content</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用正则表达式查找以1、2、3开始的句子</span></span><br><span class="line">    matches = re.findall(<span class="string">r&#x27;\d\.(.*?。)&#x27;</span>, res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> matches:</span><br><span class="line">        decompose_results.append(<span class="keyword">match</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> decompose_results</span><br></pre></td></tr></table></figure><h4 id="3-2-6-2-代码编写与整合"><a href="#3-2-6-2-代码编写与整合" class="headerlink" title="3.2.6.2 代码编写与整合"></a>3.2.6.2 代码编写与整合</h4><p>方案三：分别创建函数再统一代码（推荐方案）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">func1_name = code_generate(sub_req1, few_shot=<span class="string">&#x27;all&#x27;</span>, g=<span class="built_in">globals</span>(), detail=<span class="number">1</span>)</span><br><span class="line">func2_name = code_generate(sub_req2, few_shot=<span class="string">&#x27;all&#x27;</span>, g=<span class="built_in">globals</span>(), detail=<span class="number">1</span>)</span><br><span class="line">func3_name = code_generate(sub_req3, few_shot=<span class="string">&#x27;all&#x27;</span>, g=<span class="built_in">globals</span>(), detail=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (func1_name, func1_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    func1_str = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (func2_name, func2_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    func2_str = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (func3_name, func3_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    func3_str = f.read()</span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">  model=<span class="string">&#x27;glm-4&#x27;</span>,</span><br><span class="line">  messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;以下是函数1的代码：%s&#x27;</span> % func1_str&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;以下是函数2的代码：%s&#x27;</span> % func2_str&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;以下是函数3的代码：%s&#x27;</span> % func3_str&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;请将函数1、函数2和函数3的代码功能整合到一个函数中，要求该函数功能完整，并且可以满足以下需求：%s&#x27;</span> % req&#125;</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req_auto_func</span>(<span class="params">req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=<span class="string">&#x27;glm-4&#x27;</span>, g=<span class="built_in">globals</span>(<span class="params"></span>), detail=<span class="number">0</span></span>):</span><br><span class="line">    <span class="comment"># 默认情况下system_messages = None</span></span><br><span class="line">    system_messages = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 尝试进行任务拆解</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decompose_results = get_decompose_results(req=req, model=model)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;代码能执行到这儿吗？&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;暂停1分钟后继续调用模型&#x27;</span>)</span><br><span class="line">        <span class="comment">#time.sleep(60)</span></span><br><span class="line">        decompose_results = get_decompose_results(req=req, model=model)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 如果只拆解得到多个任务，则创建新的基于任务拆解得到的system_message</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(decompose_results) != <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;原始需求将拆分为多个子需求并进行分段代码创建与合并&#x27;</span>)</span><br><span class="line">        <span class="comment"># 读取原始system_message</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/system_messages.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            system_messages = json.load(f)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 用于存储全部需求的函数代码</span></span><br><span class="line">        sub_func_all = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 用于存储全部需求</span></span><br><span class="line">        sub_req_all = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 计数器</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> sub_req <span class="keyword">in</span> decompose_results:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 每个需求依次创建子函数</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;第%s个子需求为：%s&#x27;</span> % (i, sub_req))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;正在创建对应子函数&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sub_func_name = code_generate(sub_req, few_shot=few_shot, g=g, detail=detail, model=model)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;暂停1分钟后继续调用模型&#x27;</span>)</span><br><span class="line">                time.sleep(<span class="number">60</span>)</span><br><span class="line">                sub_func_name = code_generate(sub_req, few_shot=few_shot, g=g, detail=detail, model=model)</span><br><span class="line">                </span><br><span class="line">            <span class="comment"># 读取子函数源码</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (sub_func_name, sub_func_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                sub_func_str = f.read()</span><br><span class="line">            <span class="comment"># 对子函数源码进行拼接</span></span><br><span class="line">            sub_func_all += sub_func_str</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 按顺序拼接子需求</span></span><br><span class="line">            sub_req_all += <span class="built_in">str</span>(i)+(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            sub_req_all += sub_req            </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;子需求对应的子函数全部创建完毕，接下来进入到原始需求函数创建过程...&#x27;</span>)</span><br><span class="line">        <span class="comment"># 添加一个system_message</span></span><br><span class="line">        decompose_description = <span class="string">&#x27;对于当前编程需求，可以拆解为若干个子需求，也就是：%s。这些子需求的实现方式可以参考如下代码：%s&#x27;</span> % (sub_req_all, sub_func_all)</span><br><span class="line">        system_messages[<span class="string">&#x27;system_message&#x27;</span>].append(&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: decompose_description&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进行代码创建和代码审查</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        function_name = code_generate(req=req, few_shot=few_shot, model=model, g=g, detail=detail, system_messages=system_messages)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;暂停1分钟后继续调用模型&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">60</span>)</span><br><span class="line">        function_name = code_generate(req=req, few_shot=few_shot, model=model, g=g, detail=detail, system_messages=system_messages)</span><br><span class="line">        </span><br><span class="line">    function_test(function_name=function_name, req=req, few_shot=few_shot, model=model, g=g, system_messages=system_messages)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Agent实战基础之在线大模型开发</title>
      <link href="/2025/03/16/3.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9C%A8%E7%BA%BF%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91/"/>
      <url>/2025/03/16/3.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9C%A8%E7%BA%BF%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Chat-Completion-API"><a href="#1-Chat-Completion-API" class="headerlink" title="1. Chat Completion API"></a>1. Chat Completion API</h1><h2 id="1-1-Chat-Completion-API-优势"><a href="#1-1-Chat-Completion-API-优势" class="headerlink" title="1.1 Chat Completion API 优势"></a>1.1 Chat Completion API 优势</h2><ul><li>Completion API（×）</li><li>Chat Completion API（√）</li></ul><blockquote><p>说明：</p><ul><li>Chat 模型核心能力在于对话交互</li><li>Completion 模型本质上是文本补全模型</li><li>Chat 模型是对 Completion 模型的升级</li><li>同时支持 Function Calling 和 ChatGPT Plugin</li></ul></blockquote><h2 id="1-2-Chat-Completion-API-环境部署"><a href="#1-2-Chat-Completion-API-环境部署" class="headerlink" title="1.2 Chat Completion API 环境部署"></a>1.2 Chat Completion API 环境部署</h2><h3 id="1-2-1-服务器-Anaconda-环境部署"><a href="#1-2-1-服务器-Anaconda-环境部署" class="headerlink" title="1.2.1 服务器 Anaconda 环境部署"></a>1.2.1 服务器 Anaconda 环境部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n AI python=3.9</span><br><span class="line">conda activate AI</span><br><span class="line">pip install openai</span><br></pre></td></tr></table></figure><h3 id="1-2-2-PyCharm-远程连接服务器开发"><a href="#1-2-2-PyCharm-远程连接服务器开发" class="headerlink" title="1.2.2 PyCharm 远程连接服务器开发"></a>1.2.2 PyCharm 远程连接服务器开发</h3><ul><li>使用 PyCharm 配置远程 Python 解释器</li><li>配置 SSH 隧道（若需）</li></ul><h3 id="1-2-3-购买-API-及代理"><a href="#1-2-3-购买-API-及代理" class="headerlink" title="1.2.3 购买 API 及代理"></a>1.2.3 购买 API 及代理</h3><ul><li>淘宝购买 OpenAI API 及相应代理服务</li></ul><h3 id="1-2-4-初始化客户端"><a href="#1-2-4-初始化客户端" class="headerlink" title="1.2.4 初始化客户端"></a>1.2.4 初始化客户端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 OpenAI 客户端</span></span><br><span class="line">openai.api_key = <span class="string">&quot;api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;api_base&quot;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=openai.api_key, base_url=openai.api_base)</span><br></pre></td></tr></table></figure><h2 id="1-3-大模型交互方式"><a href="#1-3-大模型交互方式" class="headerlink" title="1.3 大模型交互方式"></a>1.3 大模型交互方式</h2><h3 id="1-3-1-大模型交互方式1（最常用）"><a href="#1-3-1-大模型交互方式1（最常用）" class="headerlink" title="1.3.1 大模型交互方式1（最常用）"></a>1.3.1 大模型交互方式1（最常用）</h3><p>直接通过 chat 接口进行交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">completion = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好!请介绍一下你自己&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(completion)</span><br><span class="line"><span class="built_in">print</span>(completion.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-3-2-大模型交互方式2（流式响应，适用于实时展示）"><a href="#1-3-2-大模型交互方式2（流式响应，适用于实时展示）" class="headerlink" title="1.3.2 大模型交互方式2（流式响应，适用于实时展示）"></a>1.3.2 大模型交互方式2（流式响应，适用于实时展示）</h3><p>流式打印，每次返回响应的一个小块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stream = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好!请介绍一下你自己&quot;</span>&#125;],</span><br><span class="line">    stream=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> stream:</span><br><span class="line">    <span class="keyword">if</span> chunk.choices[<span class="number">0</span>].delta.content <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(chunk.choices[<span class="number">0</span>].delta.content, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="1-4-Chat-Completion-API-详细参数"><a href="#1-4-Chat-Completion-API-详细参数" class="headerlink" title="1.4 Chat Completion API 详细参数"></a>1.4 Chat Completion API 详细参数</h2><h3 id="1-4-1-参数说明表"><a href="#1-4-1-参数说明表" class="headerlink" title="1.4.1 参数说明表"></a>1.4.1 参数说明表</h3><table><thead><tr><th>参数</th><th>是否必选</th><th>说明</th><th>默认值&#x2F;取值范围</th></tr></thead><tbody><tr><td>model</td><td>必选</td><td>大模型的名称</td><td>—</td></tr><tr><td>messages</td><td>必选</td><td>提示词（可包含角色设定）</td><td>—</td></tr><tr><td>max_tokens</td><td>可选</td><td>返回结果的 token 数量</td><td>—</td></tr><tr><td>temperature</td><td>可选</td><td>采样温度。数值越小生成文本越保守；较高时文本多样</td><td>默认 1，范围 0-2</td></tr><tr><td>top_p</td><td>可选</td><td>控制输出文本的随机性，建议调节 temperature</td><td>默认 1，范围 0-1</td></tr><tr><td>n</td><td>可选</td><td>表示同一提示返回几个 Completion</td><td>默认 1</td></tr><tr><td>stream</td><td>可选</td><td>响应方式。False 一次性返回；True 流式返回</td><td>默认 False</td></tr><tr><td>logprobs</td><td>可选</td><td>返回每个 token 的前 N 个概率及对数概率</td><td>默认 null</td></tr><tr><td>stop</td><td>可选</td><td>指定生成文本的停止信号（一个或多个字符串）</td><td>默认 null</td></tr><tr><td>presence_penalty</td><td>可选</td><td>调整生成新内容的倾向性，较高值更易生成新内容</td><td>默认 0，范围 [-2, 2]</td></tr><tr><td>frequency_penalty</td><td>可选</td><td>调整模型重复自身的倾向性，较高值避免重复</td><td>默认 0，范围 [-2, 2]</td></tr><tr><td>logit_bias</td><td>可选</td><td>调整特定 token 的对数概率偏置</td><td>—</td></tr><tr><td>tools</td><td>可选</td><td>可调用的函数列表</td><td>—</td></tr><tr><td>tool_choice</td><td>可选</td><td>调用函数的策略</td><td>—</td></tr><tr><td>functions</td><td>废弃</td><td>可调用的函数（已废弃）</td><td>—</td></tr><tr><td>function_call</td><td>废弃</td><td>调用函数的策略（已废弃）</td><td>—</td></tr></tbody></table><h3 id="1-4-2-messages-可以包含多条信息"><a href="#1-4-2-messages-可以包含多条信息" class="headerlink" title="1.4.2 messages 可以包含多条信息"></a>1.4.2 messages 可以包含多条信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># messages 可以包含多条信息，但模型只会对最后一条用户信息进行回答</span></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好!请介绍一下你自己&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请问，中国的首都是？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-4-3-message-角色设定"><a href="#1-4-3-message-角色设定" class="headerlink" title="1.4.3 message 角色设定"></a>1.4.3 message 角色设定</h3><p>示例一：单用户信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;假设你是一名资深的AI大模型专家，请帮我回答，什么是AI大模型？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><p>示例二：先设定 system 后用户提问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一名AI大模型资深专家&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请问什么是AI大模型？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><blockquote><p>注意：若 user 消息在前，system 消息将不生效！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请问什么是AI大模型？&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一名幽默的脱口秀演员，回答问题时语言要幽默&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-4-4-message-之-Few-shot-效果演示"><a href="#1-4-4-message-之-Few-shot-效果演示" class="headerlink" title="1.4.4 message 之 Few-shot 效果演示"></a>1.4.4 message 之 Few-shot 效果演示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Q1 = <span class="string">&#x27;小米有6个气球，她又买了3袋，每袋有10个气球，请问她现在总共有多少个气球？&#x27;</span></span><br><span class="line">A1 = <span class="string">&#x27;现在小米总共有36个气球。&#x27;</span></span><br><span class="line">Q2 = <span class="string">&#x27;小明总共有10个苹果，吃了3个苹果，然后又买了5个苹果，请问现在小明总共有多少个苹果？&#x27;</span></span><br><span class="line">A2 = <span class="string">&#x27;现在小明总共有12个苹果。&#x27;</span></span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-4&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: Q1&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: A1&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: Q2&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><p>也可以将提示示例写入 system 信息中作为背景信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;Q: &#x27;</span> + Q1 + <span class="string">&#x27; A: &#x27;</span> + A1&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;Q: &#x27;</span> + Q2 &#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-4-5-message-之-Zero-shot-CoT-效果"><a href="#1-4-5-message-之-Zero-shot-CoT-效果" class="headerlink" title="1.4.5 message 之 Zero-shot-CoT 效果"></a>1.4.5 message 之 Zero-shot-CoT 效果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">prompt_temp_cot = <span class="string">&#x27;请一步步思考并解决问题&#x27;</span></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt_temp_cot&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: Q1&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-4-6-message-之实现简易知识库"><a href="#1-4-6-message-之实现简易知识库" class="headerlink" title="1.4.6 message 之实现简易知识库"></a>1.4.6 message 之实现简易知识库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">text = (<span class="string">&#x27;西瓜老师，男，1988年6月16日出生于云南省大理市\n&#x27;</span></span><br><span class="line">        <span class="string">&#x27;2011年毕业于云南大学计算机专业。\n&#x27;</span></span><br><span class="line">        <span class="string">&#x27;毕业后的西瓜老师在北京的一家著名科技公司工作了12年，专注于人工智能方面的研究。&#x27;</span>)</span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: text&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请问西瓜老师出生于哪儿？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h2 id="1-5-借助本地知识库实现简易版多轮对话机器人"><a href="#1-5-借助本地知识库实现简易版多轮对话机器人" class="headerlink" title="1.5 借助本地知识库实现简易版多轮对话机器人"></a>1.5 借助本地知识库实现简易版多轮对话机器人</h2><h3 id="1-5-1-测试大模型（无知识背景）"><a href="#1-5-1-测试大模型（无知识背景）" class="headerlink" title="1.5.1 测试大模型（无知识背景）"></a>1.5.1 测试大模型（无知识背景）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;null&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你知道陈思诚导演的《消失的她》的电影里角色有哪些吗？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-5-2-读取本地知识库"><a href="#1-5-2-读取本地知识库" class="headerlink" title="1.5.2 读取本地知识库"></a>1.5.2 读取本地知识库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;消失的她.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    chatCompletion_kg = f.read()</span><br></pre></td></tr></table></figure><h3 id="1-5-3-问答测试"><a href="#1-5-3-问答测试" class="headerlink" title="1.5.3 问答测试"></a>1.5.3 问答测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: chatCompletion_kg&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你知道《消失的她》的电影里角色有哪些吗？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-5-4-添加多轮对话效果"><a href="#1-5-4-添加多轮对话效果" class="headerlink" title="1.5.4 添加多轮对话效果"></a>1.5.4 添加多轮对话效果</h3><p>定义一个函数实现多轮对话：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">chat_with_model</span>(<span class="params">messages</span>):</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">        messages=messages</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gpt_chat_with_model</span>():</span><br><span class="line">    <span class="comment"># 初始问候，加入本地知识库作为背景</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: chatCompletion_kg&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好！&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好！我是一个AIGC智能助理，有什么问题我可以帮助你？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="built_in">print</span>(chat_with_model(messages))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进行对话</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        user_input = <span class="built_in">input</span>(<span class="string">&quot;用户：&quot;</span>)</span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;)</span><br><span class="line">        assistant_response = chat_with_model(messages)</span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: assistant_response&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;助理：&quot;</span> + assistant_response)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断是否结束对话</span></span><br><span class="line">        <span class="keyword">if</span> user_input.lower() == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">gpt_chat_with_model()</span><br></pre></td></tr></table></figure><blockquote><p> 说明：Prompt 模式对比表</p><table><thead><tr><th>Prompt模式</th><th>描述</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>Zero-Shot</td><td>直接给出任务，不提供任何示例或上下文。</td><td>快速、简单，不需要事先准备数据；适合任务明确且模型能力较强时使用。</td><td>性能可能较低，尤其是对于复杂任务；需要模型在少量信息下能推理出答案。</td><td>基本任务，尤其是当任务说明非常清晰时；要求模型能根据任务直接给出答案。</td></tr><tr><td>Few-Shot</td><td>给出任务和少量的示例（通常1-5个例子），让模型学习如何解决任务。</td><td>提供上下文和实例，帮助模型更好地理解任务；提高任务复杂度时更有效。</td><td>需要选择合适的示例，示例选择不当可能影响性能；对任务的多样性要求较高。</td><td>任务明确但具有复杂性，或需要模型在少量示例的帮助下推理。</td></tr><tr><td>COT (Chain of Thought)</td><td>引导模型通过一步步的推理过程来得出答案，通常会增加一系列中间推理步骤。</td><td>提高模型的推理能力，尤其是复杂问题；能够更好地处理需要推理和逻辑的任务。</td><td>生成的推理链可能过于冗长或不清晰；有时可能难以判断推理链的有效性。</td><td>需要复杂推理或逻辑步骤的任务，如数学题解、复杂推理问题等。</td></tr><tr><td>SC (Self-Consistent)</td><td>通过多次生成不同答案并通过投票或比较来确定最一致的答案。</td><td>提高答案的准确性，减少模型单次输出的误差。</td><td>需要更多的计算资源和时间；可能导致重复的输出，增加冗余。</td><td>对准确性要求较高的任务，尤其是在高不确定性或模糊情况下。</td></tr><tr><td>TOT (Task-Oriented Thought)</td><td>在任务过程中，针对特定目标进行思维引导，通常会持续关注任务目标，而不是所有推理步骤。</td><td>提高效率，模型更加关注任务的最终目标；适用于长时间的任务。</td><td>可能忽视其他重要信息，只关注目标；推理过程可能不全面。</td><td>长期任务，或需要明确目标导向的任务，例如文本生成、翻译等。</td></tr><tr><td>Step-Back</td><td>在解答问题的过程中，如果当前步骤失败，回退到前一步重新评估或推理。</td><td>增强模型处理复杂任务时的容错能力；帮助模型在推理过程中纠错。</td><td>回退可能导致更多的计算，增加处理时间；并非所有任务都适合反向推理。</td><td>复杂任务或多步骤问题，特别是在模型可能犯错时。</td></tr></tbody></table></blockquote><h1 id="2-Function-Calling"><a href="#2-Function-Calling" class="headerlink" title="2. Function Calling"></a>2. Function Calling</h1><h2 id="2-1-Function-Calling详细流程剖析"><a href="#2-1-Function-Calling详细流程剖析" class="headerlink" title="2.1 Function Calling详细流程剖析"></a>2.1 Function Calling详细流程剖析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line"></span><br><span class="line">openai.api_base=<span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=openai.api_key ,base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例函数 - 孙悟空算法</span></span><br><span class="line"><span class="comment"># 该函数用于接收一个数据表（字符串形式），对数据进行处理并返回JSON格式结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sunwukong_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    孙悟空算法函数，该函数定义了数据集计算过程</span></span><br><span class="line"><span class="string">    :param data: 必要参数，表示带入计算的数据表，用字符串进行表示</span></span><br><span class="line"><span class="string">    :return: sunwukong_function函数计算后的结果，返回结果为JSON格式的Dataframe类型对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new[<span class="string">&#x27;x1&#x27;</span>] * <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个示例数据集</span></span><br><span class="line"></span><br><span class="line">df_str = pd.DataFrame(&#123;<span class="string">&#x27;x1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;x2&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>]&#125;).to_string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个完整的对话流程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_conversation</span>():</span><br><span class="line">    <span class="comment"># Step 1: 初始化对话，发送数据集和函数信息</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;数据集data：%s，数据集以字符串形式呈现&quot;</span> % df_str&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请在数据集data上执行孙悟空算法&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义工具（函数）</span></span><br><span class="line">    tools = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">            <span class="string">&quot;function&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;sunwukong_function&quot;</span>,</span><br><span class="line">                <span class="string">&quot;description&quot;</span>: <span class="string">&quot;用于执行孙悟空算法函数，定义了一种特殊的数据集计算过程&quot;</span>,</span><br><span class="line">                <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;data&quot;</span>: &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;执行孙悟空算法的数据集&quot;</span>&#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;data&quot;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2: 发送初次请求</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">        messages=messages,</span><br><span class="line">        tools=tools,</span><br><span class="line">        tool_choice=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取模型返回的消息</span></span><br><span class="line">    response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line">    tool_calls = response_message.tool_calls</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3: 判断模型是否要调用函数</span></span><br><span class="line">    <span class="keyword">if</span> tool_calls:</span><br><span class="line">        available_functions = &#123;<span class="string">&quot;sunwukong_function&quot;</span>: sunwukong_function&#125;  <span class="comment"># 这里可以扩展多种函数</span></span><br><span class="line">        messages.append(response_message)  <span class="comment"># 将模型返回结果加入消息列表</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 4: 执行函数，并将返回结果传回模型</span></span><br><span class="line">        <span class="keyword">for</span> tool_call <span class="keyword">in</span> tool_calls:</span><br><span class="line">            function_name = tool_call.function.name</span><br><span class="line">            function_to_call = available_functions[function_name]</span><br><span class="line">            function_args = json.loads(tool_call.function.arguments)</span><br><span class="line">            function_response = function_to_call(**function_args)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将函数结果传回对话上下文</span></span><br><span class="line">            messages.append(&#123;</span><br><span class="line">                <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span>,</span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: function_name,</span><br><span class="line">                <span class="string">&quot;content&quot;</span>: function_response,</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 5: 发送最终请求，获取完整回答</span></span><br><span class="line">        second_response = client.chat.completions.create(</span><br><span class="line">            model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">            messages=messages,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> second_response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行对话流程并输出最终结果</span></span><br><span class="line">result = run_conversation()</span><br><span class="line"><span class="built_in">print</span>(result.choices[<span class="number">0</span>].message.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用StringIO将字符串转换为文件对象</span></span><br><span class="line"></span><br><span class="line">df_str = <span class="string">&#x27;\n    x1\n0  10\n1  20\n.&#x27;</span></span><br><span class="line">data = io.StringIO(df_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用read_csv()函数读取数据，并设置第一列为索引</span></span><br><span class="line"></span><br><span class="line">df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(df_new)</span><br></pre></td></tr></table></figure><blockquote><p>详解：function_response &#x3D; function_to_call(**function_args)</p><ol><li><code>function_to_call</code> 代表某个函数（动态决定调用哪个函数）。</li><li><code>function_args</code> 是一个字典，<code>**</code> 解包它，把键值对作为参数传入函数。</li><li><code>function_response</code> 接收函数返回值。</li></ol></blockquote><h2 id="2-2-Function-Calling函数封装"><a href="#2-2-Function-Calling函数封装" class="headerlink" title="2.2 Function Calling函数封装"></a>2.2 Function Calling函数封装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数：自动生成Chat模型所需的functions参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auto_functions</span>(<span class="params">functions_list</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据输入的函数列表，自动生成符合Chat模型functions参数格式的描述字典</span></span><br><span class="line"><span class="string">    :param functions_list: 包含一个或多个函数对象的列表</span></span><br><span class="line"><span class="string">    :return: 符合Chat模型functions参数要求的functions对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">functions_generate</span>(<span class="params">functions_list</span>):</span><br><span class="line">        functions = []</span><br><span class="line">        <span class="comment"># 遍历每个函数对象</span></span><br><span class="line">        <span class="keyword">for</span> function <span class="keyword">in</span> functions_list:</span><br><span class="line">            <span class="comment"># 获取函数的说明文档和名称</span></span><br><span class="line">            function_description = inspect.getdoc(function)</span><br><span class="line">            function_name = function.__name__</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置提示词，生成符合JSON格式的函数描述</span></span><br><span class="line">            system_prompt = <span class="string">&#x27;以下是某的函数说明：%s&#x27;</span> % function_description</span><br><span class="line">            user_prompt = <span class="string">&#x27;根据这个函数的函数说明，请帮我创建一个JSON格式的字典，这个字典有如下5点要求：\</span></span><br><span class="line"><span class="string">                           1.字典总共有三个键值对；\</span></span><br><span class="line"><span class="string">                           2.第一个键值对的Key是字符串name，value是该函数的名字：%s，也是字符串；\</span></span><br><span class="line"><span class="string">                           3.第二个键值对的Key是字符串description，value是该函数的函数的功能说明，也是字符串；\</span></span><br><span class="line"><span class="string">                           4.第三个键值对的Key是字符串parameters，value是一个JSON Schema对象，用于说明该函数的参数输入规范。\</span></span><br><span class="line"><span class="string">                           5.输出结果必须是一个JSON格式的字典，只输出这个字典即可，前后不需要任何前后修饰或说明的语句&#x27;</span> % function_name</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 调用Chat模型生成函数描述</span></span><br><span class="line">            response = client.chat.completions.create(</span><br><span class="line">                model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">                messages=[</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_prompt&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_prompt&#125;</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解析返回的JSON字符串</span></span><br><span class="line">            json_function_description = json.loads(response.choices[<span class="number">0</span>].message.content.replace(<span class="string">&quot;```&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;json&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">            json_str = &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>, <span class="string">&quot;function&quot;</span>: json_function_description&#125;</span><br><span class="line">            functions.append(json_str)</span><br><span class="line">        <span class="keyword">return</span> functions</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大尝试4次，防止异常</span></span><br><span class="line">    max_attempts = <span class="number">4</span></span><br><span class="line">    attempts = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> attempts &lt; max_attempts:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            functions = functions_generate(functions_list)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            attempts += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;发生错误：&quot;</span>, e)</span><br><span class="line">            <span class="keyword">if</span> attempts == max_attempts:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;已达到最大尝试次数，程序终止。&quot;</span>)</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;正在重新运行...&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> functions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义孙悟空算法函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sunwukong_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    孙悟空算法，给数据集所有数值乘以10</span></span><br><span class="line"><span class="string">    :param data: 输入数据集，字符串形式</span></span><br><span class="line"><span class="string">    :return: 返回处理后的数据集，JSON格式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new * <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义唐僧算法函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tangseng_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    唐僧算法，给数据集所有数值乘以1000000</span></span><br><span class="line"><span class="string">    :param data: 输入数据集，字符串形式</span></span><br><span class="line"><span class="string">    :return: 返回处理后的数据集，JSON格式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new * <span class="number">1000000</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将函数列表传入，生成tools参数</span></span><br><span class="line">functions_list = [sunwukong_function, tangseng_function]</span><br><span class="line">tools = auto_functions(functions_list)</span><br><span class="line"><span class="built_in">print</span>(tools)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据集</span></span><br><span class="line"></span><br><span class="line">df_str = pd.DataFrame(&#123;<span class="string">&#x27;x1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;x2&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>]&#125;).to_string()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义第一组对话，调用孙悟空算法</span></span><br><span class="line">messages = [</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;数据集data：%s，数据集以字符串形式呈现&quot;</span> % df_str&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请在数据集data上执行孙悟空算法&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=messages,</span><br><span class="line">    tools=tools,</span><br><span class="line">    tool_choice=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义第二组对话，调用唐僧算法</span></span><br><span class="line">messages = [</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;数据集data：%s，数据集以字符串形式呈现&quot;</span> % df_str&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请在数据集data上执行唐僧算法函数&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=messages,</span><br><span class="line">    tools=tools,</span><br><span class="line">    tool_choice=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message)</span><br></pre></td></tr></table></figure><h2 id="2-3-封装调用2轮response的函数-增加多轮对话的效果"><a href="#2-3-封装调用2轮response的函数-增加多轮对话的效果" class="headerlink" title="2.3 封装调用2轮response的函数+增加多轮对话的效果"></a>2.3 封装调用2轮response的函数+增加多轮对话的效果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sunwukong_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    孙悟空算法函数，该函数定义了数据集计算过程</span></span><br><span class="line"><span class="string">    :param data: 必要参数，表示带入计算的数据表，用字符串进行表示</span></span><br><span class="line"><span class="string">    :return：sunwukong_function函数计算后的结果，返回结果为表示为JSON格式的Dataframe类型对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new * <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tangseng_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    唐僧算法函数，该函数定义了数据集计算过程</span></span><br><span class="line"><span class="string">    :param data: 必要参数，表示带入计算的数据表，用字符串进行表示</span></span><br><span class="line"><span class="string">    :return：tangseng_function函数计算后的结果，返回结果为表示为JSON格式的Dataframe类型对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new * <span class="number">1000000</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auto_functions</span>(<span class="params">functions_list</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Chat模型的functions参数编写函数</span></span><br><span class="line"><span class="string">    :param functions_list: 包含一个或者多个函数对象的列表；</span></span><br><span class="line"><span class="string">    :return：满足Chat模型functions参数要求的functions对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">functions_generate</span>(<span class="params">functions_list</span>):</span><br><span class="line">        <span class="comment"># 创建空列表，用于保存每个函数的描述字典</span></span><br><span class="line">        functions = []</span><br><span class="line">        <span class="comment"># 对每个外部函数进行循环</span></span><br><span class="line">        <span class="keyword">for</span> function <span class="keyword">in</span> functions_list:</span><br><span class="line">            <span class="comment"># 读取函数对象的函数说明</span></span><br><span class="line">            function_description = inspect.getdoc(function)</span><br><span class="line">            <span class="comment"># 读取函数的函数名字符串</span></span><br><span class="line">            function_name = function.__name__</span><br><span class="line"></span><br><span class="line">            system_prompt = <span class="string">&#x27;以下是某的函数说明：%s&#x27;</span> % function_description</span><br><span class="line">            user_prompt = <span class="string">&#x27;根据这个函数的函数说明，请帮我创建一个JSON格式的字典，这个字典有如下5点要求：\</span></span><br><span class="line"><span class="string">                           1.字典总共有三个键值对；\</span></span><br><span class="line"><span class="string">                           2.第一个键值对的Key是字符串name，value是该函数的名字：%s，也是字符串；\</span></span><br><span class="line"><span class="string">                           3.第二个键值对的Key是字符串description，value是该函数的函数的功能说明，也是字符串；\</span></span><br><span class="line"><span class="string">                           4.第三个键值对的Key是字符串parameters，value是一个JSON Schema对象，用于说明该函数的参数输入规范。\</span></span><br><span class="line"><span class="string">                           5.输出结果必须是一个JSON格式的字典，只输出这个字典即可，前后不需要任何前后修饰或说明的语句&#x27;</span> % function_name</span><br><span class="line"></span><br><span class="line">            response = client.chat.completions.create(</span><br><span class="line">                model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">                messages=[</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_prompt&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_prompt&#125;</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line">            json_function_description = json.loads(</span><br><span class="line">                response.choices[<span class="number">0</span>].message.content.replace(<span class="string">&quot;```&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;json&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">            json_str = &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>, <span class="string">&quot;function&quot;</span>: json_function_description&#125;</span><br><span class="line">            functions.append(json_str)</span><br><span class="line">        <span class="keyword">return</span> functions</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 最大可以尝试4次</span></span><br><span class="line">    max_attempts = <span class="number">4</span></span><br><span class="line">    attempts = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> attempts &lt; max_attempts:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            functions = functions_generate(functions_list)</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 如果代码成功执行，跳出循环</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            attempts += <span class="number">1</span>  <span class="comment"># 增加尝试次数</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;发生错误：&quot;</span>, e)</span><br><span class="line">            <span class="keyword">if</span> attempts == max_attempts:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;已达到最大尝试次数，程序终止。&quot;</span>)</span><br><span class="line">                <span class="keyword">raise</span>  <span class="comment"># 重新引发最后一个异常</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;正在重新运行...&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> functions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_conversation</span>(<span class="params">messages, functions_list=<span class="literal">None</span>, model=<span class="string">&quot;gpt-3.5-turbo&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    能够自动执行外部函数调用的对话模型</span></span><br><span class="line"><span class="string">    :param messages: 必要参数，字典类型，输入到Chat模型的messages参数对象</span></span><br><span class="line"><span class="string">    :param functions_list: 可选参数，默认为None，可以设置为包含全部外部函数的列表对象</span></span><br><span class="line"><span class="string">    :param model: Chat模型，可选参数，默认模型为gpt-3.5-turbo</span></span><br><span class="line"><span class="string">    :return：Chat模型输出结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 如果没有外部函数库，则执行普通的对话任务</span></span><br><span class="line">    <span class="keyword">if</span> functions_list == <span class="literal">None</span>:</span><br><span class="line">        response = client.chat.completions.create(</span><br><span class="line">            model=model,</span><br><span class="line">            messages=messages,</span><br><span class="line">        )</span><br><span class="line">        response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line">        final_response = response_message.content</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若存在外部函数库，则需要灵活选取外部函数并进行回答</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 创建functions对象</span></span><br><span class="line">        tools = auto_functions(functions_list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建外部函数库字典</span></span><br><span class="line">        available_functions = &#123;func.__name__: func <span class="keyword">for</span> func <span class="keyword">in</span> functions_list&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第一次调用大模型</span></span><br><span class="line">        response = client.chat.completions.create(</span><br><span class="line">            model=model,</span><br><span class="line">            messages=messages,</span><br><span class="line">            tools=tools,</span><br><span class="line">            tool_choice=<span class="string">&quot;auto&quot;</span>, )</span><br><span class="line">        response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line"></span><br><span class="line">        tool_calls = response_message.tool_calls</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tool_calls:</span><br><span class="line"></span><br><span class="line">            messages.append(response_message)</span><br><span class="line">            <span class="keyword">for</span> tool_call <span class="keyword">in</span> tool_calls:</span><br><span class="line">                function_name = tool_call.function.name</span><br><span class="line">                function_to_call = available_functions[function_name]</span><br><span class="line">                function_args = json.loads(tool_call.function.arguments)</span><br><span class="line">                <span class="comment">## 真正执行外部函数的就是这儿的代码</span></span><br><span class="line">                function_response = function_to_call(**function_args)</span><br><span class="line">                messages.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span>,</span><br><span class="line">                        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;name&quot;</span>: function_name,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span>: function_response,</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">                <span class="comment">## 第二次调用模型</span></span><br><span class="line">            second_response = client.chat.completions.create(</span><br><span class="line">                model=model,</span><br><span class="line">                messages=messages,</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># 获取最终结果</span></span><br><span class="line">            final_response = second_response.choices[<span class="number">0</span>].message.content</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            final_response = response_message.content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> final_response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chat_with_model</span>(<span class="params">functions_list=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                    prompt=<span class="string">&quot;你好&quot;</span>,</span></span><br><span class="line"><span class="params">                    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span></span><br><span class="line"><span class="params">                    system_message=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是小智助手。&quot;</span>&#125;]</span>):</span><br><span class="line">    messages = system_message</span><br><span class="line">    messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        answer = run_conversation(messages=messages,</span><br><span class="line">                                  functions_list=functions_list,</span><br><span class="line">                                  model=model)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;智能助手回答: <span class="subst">&#123;answer&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 询问用户是否还有其他问题</span></span><br><span class="line">        user_input = <span class="built_in">input</span>(<span class="string">&quot;您还有其他问题吗？(输入退出以结束对话): &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_input == <span class="string">&quot;退出&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录用户回答</span></span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">functions_list = [sunwukong_function, tangseng_function]</span><br><span class="line">chat_with_model(functions_list, prompt=<span class="string">&quot;你好&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="3-ChatGPT-Plugin"><a href="#3-ChatGPT-Plugin" class="headerlink" title="3.ChatGPT Plugin"></a>3.ChatGPT Plugin</h1><h2 id="3-1-ChatGPT-Plugin-的核心概念"><a href="#3-1-ChatGPT-Plugin-的核心概念" class="headerlink" title="3.1 ChatGPT Plugin 的核心概念"></a>3.1 ChatGPT Plugin 的核心概念</h2><p>ChatGPT Plugin 的本质是一个 API 服务，让 ChatGPT 能调用你的接口，扩展功能。例如查询数据库、获取实时数据、操作第三方服务等等。</p><ol><li><p>API：提供功能的接口，通常是 RESTful API</p></li><li><p>OpenAPI 规范：描述 API 的功能、参数、返回结果</p></li><li><p>Manifest 文件：定义插件的元数据（比如名称、描述、授权等）</p></li></ol><h2 id="3-2-搭建-API-服务"><a href="#3-2-搭建-API-服务" class="headerlink" title="3.2 搭建 API 服务"></a>3.2 搭建 API 服务</h2><p>创建一个 Web 服务，提供 REST API。你可以用 Flask (Python)、Express (Node.js)、FastAPI 等框架。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_weather&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>():</span><br><span class="line">    city = request.args.get(<span class="string">&#x27;city&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;city&quot;</span>: city, <span class="string">&quot;weather&quot;</span>: <span class="string">&quot;sunny&quot;</span>, <span class="string">&quot;temperature&quot;</span>: <span class="string">&quot;25°C&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><ul><li>定义路由（API 端点）</li><li>处理参数和返回 JSON</li><li>部署到公网可访问服务器</li></ul><h2 id="3-3-创建-OpenAPI-规范文件"><a href="#3-3-创建-OpenAPI-规范文件" class="headerlink" title="3.3 创建 OpenAPI 规范文件"></a>3.3 创建 OpenAPI 规范文件</h2><p>创建一个 <code>openapi.yaml</code> 文件，描述 API。ChatGPT 需要它理解你的插件怎么调用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openapi:</span> <span class="number">3.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Weather</span> <span class="string">Plugin</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">A</span> <span class="string">plugin</span> <span class="string">that</span> <span class="string">provides</span> <span class="string">weather</span> <span class="string">information</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://your-plugin-domain.com</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/get_weather:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">getWeather</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">Get</span> <span class="string">weather</span> <span class="string">information</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">city</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">City</span> <span class="string">name</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&#x27;200&#x27;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Weather</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">                <span class="attr">properties:</span></span><br><span class="line">                  <span class="attr">city:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                  <span class="attr">weather:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                  <span class="attr">temperature:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><h2 id="3-4-创建插件的-Manifest-文件"><a href="#3-4-创建插件的-Manifest-文件" class="headerlink" title="3.4 创建插件的 Manifest 文件"></a>3.4 创建插件的 Manifest 文件</h2><p>创建 <code>ai-plugin.json</code> 文件，提供插件的元数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;schema_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name_for_model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weather_plugin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name_for_human&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Weather Plugin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description_for_model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Provides weather information for a given city.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description_for_human&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Get real-time weather data for any city.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auth&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openapi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://your-plugin-domain.com/openapi.yaml&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;logo_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://your-plugin-domain.com/logo.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;contact_email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;support@yourdomain.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;legal_info_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://yourdomain.com/legal&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>name_for_model</code>: 确保简短且便于 ChatGPT 识别</li><li><code>auth</code>: 支持 <code>none</code>（公开）、<code>oauth</code>（需要登录授权）</li><li><code>api</code>: 指定 OpenAPI 文件地址</li><li><code>logo_url</code>: 让插件界面更专业</li></ul><h2 id="3-5-部署插件服务"><a href="#3-5-部署插件服务" class="headerlink" title="3.5 部署插件服务"></a>3.5 部署插件服务</h2><p>确保你的服务可以被外网访问，可以选择：</p><ol><li><p>Cloudflare Pages &#x2F; Workers（轻量级）</p></li><li><p>Vercel &#x2F; Render（适合前后端一起托管）</p></li><li><p>AWS &#x2F; GCP &#x2F; Azure（大型项目）</p></li></ol><p>确保 API 支持 HTTPS，否则 ChatGPT 无法调用。</p><blockquote><p>Function calling VS ChatGPT Plugin</p><p><img src="/images/3.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9C%A8%E7%BA%BF%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91/image-20250317113459547.png" alt="image-20250317113459547"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Agent实战基础之大模型基础</title>
      <link href="/2025/03/15/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/03/15/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1-transformer"><a href="#1-transformer" class="headerlink" title="1. transformer"></a>1. transformer</h1><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315135636248.png" alt="image-20250315135636248"></p><h2 id="1-1-输入部分"><a href="#1-1-输入部分" class="headerlink" title="1.1 输入部分"></a>1.1 输入部分</h2><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315135837941.png" alt="image-20250315135837941"></p><h3 id="1-1-1-框架"><a href="#1-1-1-框架" class="headerlink" title="1.1.1 框架"></a>1.1.1 框架</h3><ol><li>源文本：嵌入层以及位置编码器</li><li>目标文本：嵌入层以及位置编码器</li></ol><h3 id="1-1-2-组件"><a href="#1-1-2-组件" class="headerlink" title="1.1.2 组件"></a>1.1.2 组件</h3><h4 id="1-1-2-1-文本嵌入层-Embedding"><a href="#1-1-2-1-文本嵌入层-Embedding" class="headerlink" title="1.1.2.1 文本嵌入层 (Embedding)"></a>1.1.2.1 文本嵌入层 (Embedding)</h4><ul><li><p>概念：<br>文本嵌入层用于将离散的词或符号转化为连续的向量表示，使得每个词都拥有一个固定长度的语义表示。</p></li><li><p>作用：  </p><ul><li>将词汇转换为低维向量，便于后续的计算处理。  </li><li>捕获词与词之间的语义关系，为模型理解文本提供基础信息。</li></ul></li></ul><h4 id="1-1-2-2-位置编码器-Positional-Encoding"><a href="#1-1-2-2-位置编码器-Positional-Encoding" class="headerlink" title="1.1.2.2 位置编码器 (Positional Encoding)"></a>1.1.2.2 位置编码器 (Positional Encoding)</h4><ul><li><p>概念：<br>位置编码器为嵌入向量添加位置信息，由于嵌入层本身不包含词序信息，位置编码器弥补了这一不足。</p></li><li><p>作用：  </p><ul><li>注入序列中各词的相对或绝对位置信息，帮助模型识别词序。  </li><li>保持语法结构，确保模型理解句子内部的依赖关系。</li></ul></li></ul><h2 id="1-2-输出部分"><a href="#1-2-输出部分" class="headerlink" title="1.2 输出部分"></a>1.2 输出部分</h2><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315140112908.png" alt="image-20250315140112908"></p><h3 id="1-2-1-框架"><a href="#1-2-1-框架" class="headerlink" title="1.2.1 框架"></a>1.2.1 框架</h3><ol><li>线性层  </li><li>softmax 处理器</li></ol><h2 id="1-3-解码器部分"><a href="#1-3-解码器部分" class="headerlink" title="1.3 解码器部分"></a>1.3 解码器部分</h2><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315140122384.png" alt="image-20250315140122384"></p><h3 id="1-3-1-框架"><a href="#1-3-1-框架" class="headerlink" title="1.3.1 框架"></a>1.3.1 框架</h3><ol><li>由 N 个编码器堆叠  </li><li>每个编码器包含两个子层：<ul><li>第一个子层：多头自注意力子层 + 规范化层 + 残差连接  </li><li>第二个子层：前馈全连接子层 + 规范化层 + 残差连接</li></ul></li></ol><h3 id="1-3-2-组件"><a href="#1-3-2-组件" class="headerlink" title="1.3.2 组件"></a>1.3.2 组件</h3><h4 id="1-3-2-1-掩码张量-mask"><a href="#1-3-2-1-掩码张量-mask" class="headerlink" title="1.3.2.1 掩码张量 (mask)"></a>1.3.2.1 掩码张量 (mask)</h4><ul><li><p>概念：<br>掩码张量用于屏蔽掉不应参与计算的信息，例如填充符号或在生成任务中需要屏蔽未来的信息。</p></li><li><p>作用：  </p><ul><li>防止模型在计算注意力分数时考虑到无关或不允许访问的信息。  </li><li>确保训练过程中的因果关系（例如在自回归生成模型中屏蔽未来时刻）。</li></ul></li></ul><h4 id="1-3-2-2-自注意力机制"><a href="#1-3-2-2-自注意力机制" class="headerlink" title="1.3.2.2 自注意力机制"></a>1.3.2.2 自注意力机制</h4><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315143826474.png" alt="image-20250315143826474"></p><p>$$<br>\text{Attention}(Q, K, V) &#x3D; \text{softmax} \left( \frac{QK^T}{\sqrt{d_k}} \right) V<br>$$</p><ul><li><p>概念：<br>自注意力机制允许模型在计算当前词的表示时，同时考虑序列中所有其他位置的词，从而捕捉全局依赖关系。</p></li><li><p>作用：  </p><ul><li>动态调整每个词在整体语义表示中的权重。  </li><li>提升模型对长距离依赖关系的捕捉能力。</li></ul></li></ul><blockquote><p>说明： 输入的 Q、K、V 通常中，K 与 V 是相同的，而 Q 可以不同；特殊情况下 Q&#x3D;K&#x3D;V 则称为标准的自注意力机制。</p></blockquote><h4 id="1-3-2-3-多头注意力机制"><a href="#1-3-2-3-多头注意力机制" class="headerlink" title="1.3.2.3 多头注意力机制"></a>1.3.2.3 多头注意力机制</h4><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315144535063.png" alt="image-20250315144535063"></p><ul><li><p>概念：<br>多头注意力机制通过将输入的特征向量划分为多个子空间（head），在每个子空间上分别计算注意力，然后将结果合并，获得更丰富的表示。</p></li><li><p>作用：  </p><ul><li>使模型能在不同的子空间中捕捉多种语义信息。  </li><li>增强模型的表达能力和稳定性，避免单一注意力头的局限性。</li></ul></li></ul><h2 id="2-Open-GPT不同版本对比"><a href="#2-Open-GPT不同版本对比" class="headerlink" title="2. Open GPT不同版本对比"></a>2. Open GPT不同版本对比</h2><h3 id="2-1-不同模型对比"><a href="#2-1-不同模型对比" class="headerlink" title="2.1 不同模型对比"></a>2.1 不同模型对比</h3><table><thead><tr><th>模型</th><th>结构</th><th>位置编码</th><th>激活函数</th><th>Layer Norm方法</th></tr></thead><tbody><tr><td>原生</td><td>Encoder-Decoder</td><td>Sinusoidal编码</td><td>ReLU</td><td>Post Layer Norm</td></tr><tr><td>Transformer</td><td>Encoder-Decoder</td><td>Sinusoidal编码</td><td>ReLU</td><td>Post Layer Norm</td></tr><tr><td>BERT</td><td>Encoder</td><td>绝对位置编码</td><td>GeLU</td><td>Post Layer Norm</td></tr><tr><td>LLaMA</td><td>Casual Decoder</td><td>RoPE</td><td>SwiGLU</td><td>Pre RMS Norm</td></tr><tr><td>ChatGLM-6B</td><td>Prefix Decoder</td><td>RoPE</td><td>GeGLU</td><td>Post Deep Norm</td></tr><tr><td>Bloom</td><td>Casual Decoder</td><td>ALiBi</td><td>GeLU</td><td>Pre Layer Norm</td></tr></tbody></table><h3 id="2-2-GPT不同版本对比"><a href="#2-2-GPT不同版本对比" class="headerlink" title="2.2 GPT不同版本对比"></a>2.2 GPT不同版本对比</h3><table><thead><tr><th>对比维度</th><th>GPT1</th><th>GPT2</th><th>GPT3</th><th>GPT3.5</th><th>GPT4.0</th></tr></thead><tbody><tr><td>模型规模</td><td>117M</td><td>1.5B</td><td>175B</td><td>175B</td><td>万亿级别</td></tr><tr><td>Transformer层数</td><td>12</td><td>48</td><td>96</td><td>96</td><td>120</td></tr><tr><td>主要贡献</td><td>多任务学习</td><td>prompt engineering</td><td>少样本学习</td><td>ChatGPT发布</td><td>规模与性能提升</td></tr><tr><td>发布日期</td><td>2018年</td><td>2019年</td><td>2020年</td><td>2022年</td><td>2023年</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.AI大模型应用开发工程师课程导读</title>
      <link href="/2025/03/14/1.AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%AF%BE%E7%A8%8B%E5%AF%BC%E8%AF%BB/"/>
      <url>/2025/03/14/1.AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%AF%BE%E7%A8%8B%E5%AF%BC%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="🎯-第一阶段：打好基础"><a href="#🎯-第一阶段：打好基础" class="headerlink" title="🎯 第一阶段：打好基础"></a>🎯 <strong>第一阶段：打好基础</strong></h1><p><strong>目标</strong>：理解大模型基础知识，掌握Agent开发核心概念和工具<br> 📌 <strong>课程模块</strong>：</p><ol><li>AI大模型应用开发工程师课程导读</li><li>Agent实战基础之大模型基础</li><li>Agent实战基础之在线大模型开发</li><li>Agent实战基础之提示词工程和Function进阶实战</li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>熟悉大模型概念、原理和开发环境</li><li>掌握提示词工程、Function调用，提高模型交互能力</li></ul><h1 id="🚀-第二阶段：强化多模态与Agent架构实战"><a href="#🚀-第二阶段：强化多模态与Agent架构实战" class="headerlink" title="🚀 第二阶段：强化多模态与Agent架构实战"></a>🚀 <strong>第二阶段：强化多模态与Agent架构实战</strong></h1><p><strong>目标</strong>：掌握多模态大模型开发，熟悉Agent架构与落地方案<br> 📌 <strong>课程模块</strong>： </p><ol start="5"><li><p>Agent实战基础之多模态大模型实战</p></li><li><p>Agent实战基础之Agent架构与落地方案</p></li><li><p>Agent实战基础之ReAct架构实战</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>理解多模态大模型（图像、文本、语音）融合开发</li><li>熟悉Agent架构（传统+ReAct思路），掌握多场景落地实现</li></ul><h1 id="🔧-第三阶段：进阶开发技能强化"><a href="#🔧-第三阶段：进阶开发技能强化" class="headerlink" title="🔧 第三阶段：进阶开发技能强化"></a>🔧 <strong>第三阶段：进阶开发技能强化</strong></h1><p><strong>目标</strong>：熟练掌握核心工具链，提升开发效率和应用能力<br> 📌 <strong>课程模块</strong>： </p><ol start="8"><li><p>Agent实战技能之Dify智能应用开发</p></li><li><p>Agent实战技能之Assistants API</p></li><li><p>Agent实战技能之LangChain全面剖析</p></li><li><p>Agent实战技能之LangGraph深度实战</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>上手Dify等智能应用开发平台</li><li>深入掌握LangChain、LangGraph，实现复杂业务逻辑编排</li></ul><h1 id="🏗️-第四阶段：大型项目实战演练"><a href="#🏗️-第四阶段：大型项目实战演练" class="headerlink" title="🏗️ 第四阶段：大型项目实战演练"></a>🏗️ <strong>第四阶段：大型项目实战演练</strong></h1><p><strong>目标</strong>：完成从0到1的大型商业项目开发，积累实战经验<br> 📌 <strong>课程模块</strong>： </p><ol start="12"><li><p>Agent大型项目实战1:百亿级智能数据分析平台</p></li><li><p>Agent大型项目实战2:多模态Agent商业平台</p></li><li><p>Agent大型项目实战3:ChatBI即席查询平台</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>具备大规模数据分析平台搭建能力</li><li>熟悉多模态Agent在商业场景落地开发</li><li>掌握ChatBI查询平台的完整设计与实现</li></ul><h1 id="🧠-第五阶段：RAG架构与性能优化突破"><a href="#🧠-第五阶段：RAG架构与性能优化突破" class="headerlink" title="🧠 第五阶段：RAG架构与性能优化突破"></a>🧠 <strong>第五阶段：RAG架构与性能优化突破</strong></h1><p><strong>目标</strong>：掌握RAG（检索增强生成）技术，解决大模型知识瓶颈<br> 📌 <strong>课程模块</strong>： </p><ol start="15"><li><p>RAG实战基础之RAG架构演进之路</p></li><li><p>RAG实战基础之RAG技术选型</p></li><li><p>RAG实战基础之性能优化</p></li><li><p>RAG实战进阶之GraphRAG实战</p></li><li><p>RAG项目实战:高性能RAG商业项目</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>理解RAG原理与架构演进</li><li>掌握RAG系统搭建与性能优化策略</li><li>上手GraphRAG进阶玩法，落地高性能RAG项目</li></ul><h1 id="🔥-第六阶段：DeepSeek专题深度研习"><a href="#🔥-第六阶段：DeepSeek专题深度研习" class="headerlink" title="🔥 第六阶段：DeepSeek专题深度研习"></a>🔥 <strong>第六阶段：DeepSeek专题深度研习</strong></h1><p><strong>目标</strong>：深入探索大模型领域最新技术趋势，完成企业级项目交付<br> 📌 <strong>课程模块</strong>： </p><ol start="20"><li><p>DeepSeek专题之大模型API实战</p></li><li><p>DeepSeek专题之统一多模态模型</p></li><li><p>DeepSeek专题之微调行业大模型</p></li><li><p>DeepSeek专题之蒸馏专属大模型</p></li><li><p>DeepSeek专题之企业级智能体客服项目</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>掌握DeepSeek API与多模态模型开发</li><li>理解大模型微调、蒸馏与专属模型打造</li><li>完成企业级智能体客服系统落地</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
