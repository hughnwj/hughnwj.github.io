<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>3.Agent实战基础之在线大模型开发</title>
      <link href="/2025/03/16/3.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9C%A8%E7%BA%BF%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91/"/>
      <url>/2025/03/16/3.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9C%A8%E7%BA%BF%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Agent实战基础之在线大模型开发"><a href="#Agent实战基础之在线大模型开发" class="headerlink" title="Agent实战基础之在线大模型开发"></a>Agent实战基础之在线大模型开发</h1><h2 id="Chat-Completion-API"><a href="#Chat-Completion-API" class="headerlink" title="Chat Completion API"></a>Chat Completion API</h2><ul><li><strong>Completion API（×）</strong></li><li><strong>Chat Completion API（√）</strong></li></ul><blockquote><p><strong>说明：</strong></p><ul><li>Chat 模型核心能力在于对话交互</li><li>Completion 模型本质上是文本补全模型</li><li>Chat 模型是对 Completion 模型的升级</li><li>同时支持 Function Calling 和 ChatGPT Plugin</li></ul></blockquote><h3 id="Chat-Completion-API环境部署"><a href="#Chat-Completion-API环境部署" class="headerlink" title="Chat Completion API环境部署"></a>Chat Completion API环境部署</h3><h4 id="服务器-anaconda-环境部署"><a href="#服务器-anaconda-环境部署" class="headerlink" title="服务器 anaconda 环境部署"></a>服务器 anaconda 环境部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n AI python=3.9</span><br><span class="line">conda activate AI</span><br><span class="line">pip install openai</span><br></pre></td></tr></table></figure><h4 id="PyCharm-远程连接服务器开发"><a href="#PyCharm-远程连接服务器开发" class="headerlink" title="PyCharm 远程连接服务器开发"></a>PyCharm 远程连接服务器开发</h4><ul><li>使用 PyCharm 配置远程 Python 解释器</li><li>配置 SSH 隧道（若需）</li></ul><h4 id="购买-API-及代理"><a href="#购买-API-及代理" class="headerlink" title="购买 API 及代理"></a>购买 API 及代理</h4><ul><li>淘宝购买 OpenAI API 及相应代理服务</li></ul><h4 id="初始化客户端"><a href="#初始化客户端" class="headerlink" title="初始化客户端"></a>初始化客户端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 OpenAI 客户端</span></span><br><span class="line">openai.api_key = <span class="string">&quot;api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;api_base&quot;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=openai.api_key, base_url=openai.api_base)</span><br></pre></td></tr></table></figure><h4 id="大模型交互方式1（最常用）"><a href="#大模型交互方式1（最常用）" class="headerlink" title="大模型交互方式1（最常用）"></a>大模型交互方式1（最常用）</h4><p>直接通过 chat 接口进行交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">completion = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好!请介绍一下你自己&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(completion)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(completion.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h4 id="大模型交互方式2（流式响应，适用于实时展示）"><a href="#大模型交互方式2（流式响应，适用于实时展示）" class="headerlink" title="大模型交互方式2（流式响应，适用于实时展示）"></a>大模型交互方式2（流式响应，适用于实时展示）</h4><p>流式打印，每次返回响应的一个小块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stream = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好!请介绍一下你自己&quot;</span>&#125;],</span><br><span class="line">    stream=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> stream:</span><br><span class="line">    <span class="keyword">if</span> chunk.choices[<span class="number">0</span>].delta.content <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(chunk.choices[<span class="number">0</span>].delta.content, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Chat-Completion-API详细参数"><a href="#Chat-Completion-API详细参数" class="headerlink" title="Chat Completion API详细参数"></a>Chat Completion API详细参数</h3><h4 id="参数说明表"><a href="#参数说明表" class="headerlink" title="参数说明表"></a>参数说明表</h4><table><thead><tr><th>参数</th><th>是否必选</th><th>说明</th><th>默认值&#x2F;取值范围</th></tr></thead><tbody><tr><td><strong>model</strong></td><td>必选</td><td>大模型的名称</td><td>—</td></tr><tr><td><strong>messages</strong></td><td>必选</td><td>提示词（可包含角色设定）</td><td>—</td></tr><tr><td><strong>max_tokens</strong></td><td>可选</td><td>返回结果的 token 数量</td><td>—</td></tr><tr><td><strong>temperature</strong></td><td>可选</td><td>采样温度。数值越小生成文本越保守；较高时文本多样</td><td>默认 1，范围 0-2</td></tr><tr><td><strong>top_p</strong></td><td>可选</td><td>控制输出文本的随机性，建议调节 temperature</td><td>默认 1，范围 0-1</td></tr><tr><td><strong>n</strong></td><td>可选</td><td>表示同一提示返回几个 Completion</td><td>默认 1</td></tr><tr><td><strong>stream</strong></td><td>可选</td><td>响应方式。False 一次性返回；True 流式返回</td><td>默认 False</td></tr><tr><td><strong>logprobs</strong></td><td>可选</td><td>返回每个 token 的前 N 个概率及对数概率</td><td>默认 null</td></tr><tr><td><strong>stop</strong></td><td>可选</td><td>指定生成文本的停止信号（一个或多个字符串）</td><td>默认 null</td></tr><tr><td><strong>presence_penalty</strong></td><td>可选</td><td>调整生成新内容的倾向性，较高值更易生成新内容</td><td>默认 0，范围 [-2, 2]</td></tr><tr><td><strong>frequency_penalty</strong></td><td>可选</td><td>调整模型重复自身的倾向性，较高值避免重复</td><td>默认 0，范围 [-2, 2]</td></tr><tr><td><strong>logit_bias</strong></td><td>可选</td><td>调整特定 token 的对数概率偏置</td><td>—</td></tr><tr><td><strong>tools</strong></td><td>可选</td><td>可调用的函数列表</td><td>—</td></tr><tr><td><strong>tool_choice</strong></td><td>可选</td><td>调用函数的策略</td><td>—</td></tr><tr><td><strong>functions</strong></td><td>废弃</td><td>可调用的函数（已废弃）</td><td>—</td></tr><tr><td><strong>function_call</strong></td><td>废弃</td><td>调用函数的策略（已废弃）</td><td>—</td></tr></tbody></table><h3 id="messages-可以包含多条信息"><a href="#messages-可以包含多条信息" class="headerlink" title="messages 可以包含多条信息"></a>messages 可以包含多条信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># messages 可以包含多条信息，但模型只会对最后一条用户信息进行回答</span></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好!请介绍一下你自己&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请问，中国的首都是？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="message-角色设定"><a href="#message-角色设定" class="headerlink" title="message 角色设定"></a>message 角色设定</h3><p>示例一：单用户信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;假设你是一名资深的AI大模型专家，请帮我回答，什么是AI大模型？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><p>示例二：先设定 system 后用户提问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一名AI大模型资深专家&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请问什么是AI大模型？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 若 user 消息在前，system 消息将不生效！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请问什么是AI大模型？&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一名幽默的脱口秀演员，回答问题时语言要幽默&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="message-之-Few-shot-效果演示"><a href="#message-之-Few-shot-效果演示" class="headerlink" title="message 之 Few-shot 效果演示"></a>message 之 Few-shot 效果演示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Q1 = <span class="string">&#x27;小米有6个气球，她又买了3袋，每袋有10个气球，请问她现在总共有多少个气球？&#x27;</span></span><br><span class="line">A1 = <span class="string">&#x27;现在小米总共有36个气球。&#x27;</span></span><br><span class="line">Q2 = <span class="string">&#x27;小明总共有10个苹果，吃了3个苹果，然后又买了5个苹果，请问现在小明总共有多少个苹果？&#x27;</span></span><br><span class="line">A2 = <span class="string">&#x27;现在小明总共有12个苹果。&#x27;</span></span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-4&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: Q1&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: A1&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: Q2&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><p>也可以将提示示例写入 system 信息中作为背景信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;Q: &#x27;</span> + Q1 + <span class="string">&#x27; A: &#x27;</span> + A1&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;Q: &#x27;</span> + Q2 &#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="message-之-Zero-shot-CoT-效果"><a href="#message-之-Zero-shot-CoT-效果" class="headerlink" title="message 之 Zero-shot-CoT 效果"></a>message 之 Zero-shot-CoT 效果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">prompt_temp_cot = <span class="string">&#x27;请一步步思考并解决问题&#x27;</span></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt_temp_cot&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: Q1&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="message-之实现简易知识库"><a href="#message-之实现简易知识库" class="headerlink" title="message 之实现简易知识库"></a>message 之实现简易知识库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">text = (<span class="string">&#x27;西瓜老师，男，1988年6月16日出生于云南省大理市\n&#x27;</span></span><br><span class="line">        <span class="string">&#x27;2011年毕业于云南大学计算机专业。\n&#x27;</span></span><br><span class="line">        <span class="string">&#x27;毕业后的西瓜老师在北京的一家著名科技公司工作了12年，专注于人工智能方面的研究。&#x27;</span>)</span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: text&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请问西瓜老师出生于哪儿？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="借助本地知识库实现简易版多轮对话机器人"><a href="#借助本地知识库实现简易版多轮对话机器人" class="headerlink" title="借助本地知识库实现简易版多轮对话机器人"></a>借助本地知识库实现简易版多轮对话机器人</h3><h4 id="1-测试大模型（无知识背景）"><a href="#1-测试大模型（无知识背景）" class="headerlink" title="1. 测试大模型（无知识背景）"></a>1. 测试大模型（无知识背景）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;null&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你知道陈思诚导演的《消失的她》的电影里角色有哪些吗？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h4 id="2-读取本地知识库"><a href="#2-读取本地知识库" class="headerlink" title="2. 读取本地知识库"></a>2. 读取本地知识库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;消失的她.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    chatCompletion_kg = f.read()</span><br></pre></td></tr></table></figure><h4 id="3-问答测试"><a href="#3-问答测试" class="headerlink" title="3. 问答测试"></a>3. 问答测试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: chatCompletion_kg&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你知道《消失的她》的电影里角色有哪些吗？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h4 id="4-添加多轮对话效果"><a href="#4-添加多轮对话效果" class="headerlink" title="4. 添加多轮对话效果"></a>4. 添加多轮对话效果</h4><p>定义一个函数实现多轮对话：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">chat_with_model</span>(<span class="params">messages</span>):</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">        messages=messages</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gpt_chat_with_model</span>():</span><br><span class="line">    <span class="comment"># 初始问候，加入本地知识库作为背景</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: chatCompletion_kg&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好！&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好！我是一个AIGC智能助理，有什么问题我可以帮助你？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="built_in">print</span>(chat_with_model(messages))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进行对话</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        user_input = <span class="built_in">input</span>(<span class="string">&quot;用户：&quot;</span>)</span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;)</span><br><span class="line">        assistant_response = chat_with_model(messages)</span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: assistant_response&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;助理：&quot;</span> + assistant_response)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断是否结束对话</span></span><br><span class="line">        <span class="keyword">if</span> user_input.lower() == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">gpt_chat_with_model()</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong>Prompt 模式对比表</p><table><thead><tr><th align="left"><strong>Prompt模式</strong></th><th><strong>描述</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th><th><strong>适用场景</strong></th></tr></thead><tbody><tr><td align="left"><strong>Zero-Shot</strong></td><td>直接给出任务，不提供任何示例或上下文。</td><td>快速、简单，不需要事先准备数据；适合任务明确且模型能力较强时使用。</td><td>性能可能较低，尤其是对于复杂任务；需要模型在少量信息下能推理出答案。</td><td>基本任务，尤其是当任务说明非常清晰时；要求模型能根据任务直接给出答案。</td></tr><tr><td align="left"><strong>Few-Shot</strong></td><td>给出任务和少量的示例（通常1-5个例子），让模型学习如何解决任务。</td><td>提供上下文和实例，帮助模型更好地理解任务；提高任务复杂度时更有效。</td><td>需要选择合适的示例，示例选择不当可能影响性能；对任务的多样性要求较高。</td><td>任务明确但具有复杂性，或需要模型在少量示例的帮助下推理。</td></tr><tr><td align="left"><strong>COT (Chain of Thought)</strong></td><td>引导模型通过一步步的推理过程来得出答案，通常会增加一系列中间推理步骤。</td><td>提高模型的推理能力，尤其是复杂问题；能够更好地处理需要推理和逻辑的任务。</td><td>生成的推理链可能过于冗长或不清晰；有时可能难以判断推理链的有效性。</td><td>需要复杂推理或逻辑步骤的任务，如数学题解、复杂推理问题等。</td></tr><tr><td align="left"><strong>SC (Self-Consistent)</strong></td><td>通过多次生成不同答案并通过投票或比较来确定最一致的答案。</td><td>提高答案的准确性，减少模型单次输出的误差。</td><td>需要更多的计算资源和时间；可能导致重复的输出，增加冗余。</td><td>对准确性要求较高的任务，尤其是在高不确定性或模糊情况下。</td></tr><tr><td align="left"><strong>TOT (Task-Oriented Thought)</strong></td><td>在任务过程中，针对特定目标进行思维引导，通常会持续关注任务目标，而不是所有推理步骤。</td><td>提高效率，模型更加关注任务的最终目标；适用于长时间的任务。</td><td>可能忽视其他重要信息，只关注目标；推理过程可能不全面。</td><td>长期任务，或需要明确目标导向的任务，例如文本生成、翻译等。</td></tr><tr><td align="left"><strong>Step-Back</strong></td><td>在解答问题的过程中，如果当前步骤失败，回退到前一步重新评估或推理。</td><td>增强模型处理复杂任务时的容错能力；帮助模型在推理过程中纠错。</td><td>回退可能导致更多的计算，增加处理时间；并非所有任务都适合反向推理。</td><td>复杂任务或多步骤问题，特别是在模型可能犯错时。</td></tr></tbody></table></blockquote><h2 id="Function-Calling"><a href="#Function-Calling" class="headerlink" title="Function Calling"></a>Function Calling</h2><h3 id="Function-Calling详细流程剖析"><a href="#Function-Calling详细流程剖析" class="headerlink" title="Function Calling详细流程剖析"></a>Function Calling详细流程剖析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line"></span><br><span class="line">openai.api_base=<span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=openai.api_key ,base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例函数 - 孙悟空算法</span></span><br><span class="line"><span class="comment"># 该函数用于接收一个数据表（字符串形式），对数据进行处理并返回JSON格式结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sunwukong_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    孙悟空算法函数，该函数定义了数据集计算过程</span></span><br><span class="line"><span class="string">    :param data: 必要参数，表示带入计算的数据表，用字符串进行表示</span></span><br><span class="line"><span class="string">    :return: sunwukong_function函数计算后的结果，返回结果为JSON格式的Dataframe类型对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new[<span class="string">&#x27;x1&#x27;</span>] * <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个示例数据集</span></span><br><span class="line"></span><br><span class="line">df_str = pd.DataFrame(&#123;<span class="string">&#x27;x1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;x2&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>]&#125;).to_string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个完整的对话流程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_conversation</span>():</span><br><span class="line">    <span class="comment"># Step 1: 初始化对话，发送数据集和函数信息</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;数据集data：%s，数据集以字符串形式呈现&quot;</span> % df_str&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请在数据集data上执行孙悟空算法&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义工具（函数）</span></span><br><span class="line">    tools = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">            <span class="string">&quot;function&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;sunwukong_function&quot;</span>,</span><br><span class="line">                <span class="string">&quot;description&quot;</span>: <span class="string">&quot;用于执行孙悟空算法函数，定义了一种特殊的数据集计算过程&quot;</span>,</span><br><span class="line">                <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;data&quot;</span>: &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;执行孙悟空算法的数据集&quot;</span>&#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;data&quot;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2: 发送初次请求</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">        messages=messages,</span><br><span class="line">        tools=tools,</span><br><span class="line">        tool_choice=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取模型返回的消息</span></span><br><span class="line">    response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line">    tool_calls = response_message.tool_calls</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3: 判断模型是否要调用函数</span></span><br><span class="line">    <span class="keyword">if</span> tool_calls:</span><br><span class="line">        available_functions = &#123;<span class="string">&quot;sunwukong_function&quot;</span>: sunwukong_function&#125;  <span class="comment"># 这里可以扩展多种函数</span></span><br><span class="line">        messages.append(response_message)  <span class="comment"># 将模型返回结果加入消息列表</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 4: 执行函数，并将返回结果传回模型</span></span><br><span class="line">        <span class="keyword">for</span> tool_call <span class="keyword">in</span> tool_calls:</span><br><span class="line">            function_name = tool_call.function.name</span><br><span class="line">            function_to_call = available_functions[function_name]</span><br><span class="line">            function_args = json.loads(tool_call.function.arguments)</span><br><span class="line">            function_response = function_to_call(**function_args)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将函数结果传回对话上下文</span></span><br><span class="line">            messages.append(&#123;</span><br><span class="line">                <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span>,</span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: function_name,</span><br><span class="line">                <span class="string">&quot;content&quot;</span>: function_response,</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 5: 发送最终请求，获取完整回答</span></span><br><span class="line">        second_response = client.chat.completions.create(</span><br><span class="line">            model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">            messages=messages,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> second_response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行对话流程并输出最终结果</span></span><br><span class="line">result = run_conversation()</span><br><span class="line"><span class="built_in">print</span>(result.choices[<span class="number">0</span>].message.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用StringIO将字符串转换为文件对象</span></span><br><span class="line"></span><br><span class="line">df_str = <span class="string">&#x27;\n    x1\n0  10\n1  20\n.&#x27;</span></span><br><span class="line">data = io.StringIO(df_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用read_csv()函数读取数据，并设置第一列为索引</span></span><br><span class="line"></span><br><span class="line">df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(df_new)</span><br></pre></td></tr></table></figure><blockquote><p><strong>详解：</strong>function_response &#x3D; function_to_call(**function_args)</p><ol><li><strong><code>function_to_call</code></strong> 代表某个函数（动态决定调用哪个函数）。</li><li><strong><code>function_args</code></strong> 是一个字典，<code>**</code> 解包它，把键值对作为参数传入函数。</li><li><strong><code>function_response</code></strong> 接收函数返回值。</li></ol></blockquote><h3 id="Function-Calling函数封装"><a href="#Function-Calling函数封装" class="headerlink" title="Function Calling函数封装"></a>Function Calling函数封装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数：自动生成Chat模型所需的functions参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auto_functions</span>(<span class="params">functions_list</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据输入的函数列表，自动生成符合Chat模型functions参数格式的描述字典</span></span><br><span class="line"><span class="string">    :param functions_list: 包含一个或多个函数对象的列表</span></span><br><span class="line"><span class="string">    :return: 符合Chat模型functions参数要求的functions对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">functions_generate</span>(<span class="params">functions_list</span>):</span><br><span class="line">        functions = []</span><br><span class="line">        <span class="comment"># 遍历每个函数对象</span></span><br><span class="line">        <span class="keyword">for</span> function <span class="keyword">in</span> functions_list:</span><br><span class="line">            <span class="comment"># 获取函数的说明文档和名称</span></span><br><span class="line">            function_description = inspect.getdoc(function)</span><br><span class="line">            function_name = function.__name__</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置提示词，生成符合JSON格式的函数描述</span></span><br><span class="line">            system_prompt = <span class="string">&#x27;以下是某的函数说明：%s&#x27;</span> % function_description</span><br><span class="line">            user_prompt = <span class="string">&#x27;根据这个函数的函数说明，请帮我创建一个JSON格式的字典，这个字典有如下5点要求：\</span></span><br><span class="line"><span class="string">                           1.字典总共有三个键值对；\</span></span><br><span class="line"><span class="string">                           2.第一个键值对的Key是字符串name，value是该函数的名字：%s，也是字符串；\</span></span><br><span class="line"><span class="string">                           3.第二个键值对的Key是字符串description，value是该函数的函数的功能说明，也是字符串；\</span></span><br><span class="line"><span class="string">                           4.第三个键值对的Key是字符串parameters，value是一个JSON Schema对象，用于说明该函数的参数输入规范。\</span></span><br><span class="line"><span class="string">                           5.输出结果必须是一个JSON格式的字典，只输出这个字典即可，前后不需要任何前后修饰或说明的语句&#x27;</span> % function_name</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 调用Chat模型生成函数描述</span></span><br><span class="line">            response = client.chat.completions.create(</span><br><span class="line">                model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">                messages=[</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_prompt&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_prompt&#125;</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解析返回的JSON字符串</span></span><br><span class="line">            json_function_description = json.loads(response.choices[<span class="number">0</span>].message.content.replace(<span class="string">&quot;```&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;json&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">            json_str = &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>, <span class="string">&quot;function&quot;</span>: json_function_description&#125;</span><br><span class="line">            functions.append(json_str)</span><br><span class="line">        <span class="keyword">return</span> functions</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大尝试4次，防止异常</span></span><br><span class="line">    max_attempts = <span class="number">4</span></span><br><span class="line">    attempts = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> attempts &lt; max_attempts:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            functions = functions_generate(functions_list)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            attempts += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;发生错误：&quot;</span>, e)</span><br><span class="line">            <span class="keyword">if</span> attempts == max_attempts:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;已达到最大尝试次数，程序终止。&quot;</span>)</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;正在重新运行...&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> functions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义孙悟空算法函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sunwukong_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    孙悟空算法，给数据集所有数值乘以10</span></span><br><span class="line"><span class="string">    :param data: 输入数据集，字符串形式</span></span><br><span class="line"><span class="string">    :return: 返回处理后的数据集，JSON格式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new * <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义唐僧算法函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tangseng_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    唐僧算法，给数据集所有数值乘以1000000</span></span><br><span class="line"><span class="string">    :param data: 输入数据集，字符串形式</span></span><br><span class="line"><span class="string">    :return: 返回处理后的数据集，JSON格式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new * <span class="number">1000000</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将函数列表传入，生成tools参数</span></span><br><span class="line">functions_list = [sunwukong_function, tangseng_function]</span><br><span class="line">tools = auto_functions(functions_list)</span><br><span class="line"><span class="built_in">print</span>(tools)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据集</span></span><br><span class="line"></span><br><span class="line">df_str = pd.DataFrame(&#123;<span class="string">&#x27;x1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;x2&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>]&#125;).to_string()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义第一组对话，调用孙悟空算法</span></span><br><span class="line">messages = [</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;数据集data：%s，数据集以字符串形式呈现&quot;</span> % df_str&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请在数据集data上执行孙悟空算法&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=messages,</span><br><span class="line">    tools=tools,</span><br><span class="line">    tool_choice=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义第二组对话，调用唐僧算法</span></span><br><span class="line">messages = [</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;数据集data：%s，数据集以字符串形式呈现&quot;</span> % df_str&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请在数据集data上执行唐僧算法函数&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=messages,</span><br><span class="line">    tools=tools,</span><br><span class="line">    tool_choice=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message)</span><br></pre></td></tr></table></figure><h3 id="封装调用2轮response的函数-增加多轮对话的效果"><a href="#封装调用2轮response的函数-增加多轮对话的效果" class="headerlink" title="封装调用2轮response的函数+增加多轮对话的效果"></a>封装调用2轮response的函数+增加多轮对话的效果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sunwukong_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    孙悟空算法函数，该函数定义了数据集计算过程</span></span><br><span class="line"><span class="string">    :param data: 必要参数，表示带入计算的数据表，用字符串进行表示</span></span><br><span class="line"><span class="string">    :return：sunwukong_function函数计算后的结果，返回结果为表示为JSON格式的Dataframe类型对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new * <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tangseng_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    唐僧算法函数，该函数定义了数据集计算过程</span></span><br><span class="line"><span class="string">    :param data: 必要参数，表示带入计算的数据表，用字符串进行表示</span></span><br><span class="line"><span class="string">    :return：tangseng_function函数计算后的结果，返回结果为表示为JSON格式的Dataframe类型对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new * <span class="number">1000000</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auto_functions</span>(<span class="params">functions_list</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Chat模型的functions参数编写函数</span></span><br><span class="line"><span class="string">    :param functions_list: 包含一个或者多个函数对象的列表；</span></span><br><span class="line"><span class="string">    :return：满足Chat模型functions参数要求的functions对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">functions_generate</span>(<span class="params">functions_list</span>):</span><br><span class="line">        <span class="comment"># 创建空列表，用于保存每个函数的描述字典</span></span><br><span class="line">        functions = []</span><br><span class="line">        <span class="comment"># 对每个外部函数进行循环</span></span><br><span class="line">        <span class="keyword">for</span> function <span class="keyword">in</span> functions_list:</span><br><span class="line">            <span class="comment"># 读取函数对象的函数说明</span></span><br><span class="line">            function_description = inspect.getdoc(function)</span><br><span class="line">            <span class="comment"># 读取函数的函数名字符串</span></span><br><span class="line">            function_name = function.__name__</span><br><span class="line"></span><br><span class="line">            system_prompt = <span class="string">&#x27;以下是某的函数说明：%s&#x27;</span> % function_description</span><br><span class="line">            user_prompt = <span class="string">&#x27;根据这个函数的函数说明，请帮我创建一个JSON格式的字典，这个字典有如下5点要求：\</span></span><br><span class="line"><span class="string">                           1.字典总共有三个键值对；\</span></span><br><span class="line"><span class="string">                           2.第一个键值对的Key是字符串name，value是该函数的名字：%s，也是字符串；\</span></span><br><span class="line"><span class="string">                           3.第二个键值对的Key是字符串description，value是该函数的函数的功能说明，也是字符串；\</span></span><br><span class="line"><span class="string">                           4.第三个键值对的Key是字符串parameters，value是一个JSON Schema对象，用于说明该函数的参数输入规范。\</span></span><br><span class="line"><span class="string">                           5.输出结果必须是一个JSON格式的字典，只输出这个字典即可，前后不需要任何前后修饰或说明的语句&#x27;</span> % function_name</span><br><span class="line"></span><br><span class="line">            response = client.chat.completions.create(</span><br><span class="line">                model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">                messages=[</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_prompt&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_prompt&#125;</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line">            json_function_description = json.loads(</span><br><span class="line">                response.choices[<span class="number">0</span>].message.content.replace(<span class="string">&quot;```&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;json&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">            json_str = &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>, <span class="string">&quot;function&quot;</span>: json_function_description&#125;</span><br><span class="line">            functions.append(json_str)</span><br><span class="line">        <span class="keyword">return</span> functions</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 最大可以尝试4次</span></span><br><span class="line">    max_attempts = <span class="number">4</span></span><br><span class="line">    attempts = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> attempts &lt; max_attempts:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            functions = functions_generate(functions_list)</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 如果代码成功执行，跳出循环</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            attempts += <span class="number">1</span>  <span class="comment"># 增加尝试次数</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;发生错误：&quot;</span>, e)</span><br><span class="line">            <span class="keyword">if</span> attempts == max_attempts:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;已达到最大尝试次数，程序终止。&quot;</span>)</span><br><span class="line">                <span class="keyword">raise</span>  <span class="comment"># 重新引发最后一个异常</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;正在重新运行...&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> functions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_conversation</span>(<span class="params">messages, functions_list=<span class="literal">None</span>, model=<span class="string">&quot;gpt-3.5-turbo&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    能够自动执行外部函数调用的对话模型</span></span><br><span class="line"><span class="string">    :param messages: 必要参数，字典类型，输入到Chat模型的messages参数对象</span></span><br><span class="line"><span class="string">    :param functions_list: 可选参数，默认为None，可以设置为包含全部外部函数的列表对象</span></span><br><span class="line"><span class="string">    :param model: Chat模型，可选参数，默认模型为gpt-3.5-turbo</span></span><br><span class="line"><span class="string">    :return：Chat模型输出结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 如果没有外部函数库，则执行普通的对话任务</span></span><br><span class="line">    <span class="keyword">if</span> functions_list == <span class="literal">None</span>:</span><br><span class="line">        response = client.chat.completions.create(</span><br><span class="line">            model=model,</span><br><span class="line">            messages=messages,</span><br><span class="line">        )</span><br><span class="line">        response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line">        final_response = response_message.content</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若存在外部函数库，则需要灵活选取外部函数并进行回答</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 创建functions对象</span></span><br><span class="line">        tools = auto_functions(functions_list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建外部函数库字典</span></span><br><span class="line">        available_functions = &#123;func.__name__: func <span class="keyword">for</span> func <span class="keyword">in</span> functions_list&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第一次调用大模型</span></span><br><span class="line">        response = client.chat.completions.create(</span><br><span class="line">            model=model,</span><br><span class="line">            messages=messages,</span><br><span class="line">            tools=tools,</span><br><span class="line">            tool_choice=<span class="string">&quot;auto&quot;</span>, )</span><br><span class="line">        response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line"></span><br><span class="line">        tool_calls = response_message.tool_calls</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tool_calls:</span><br><span class="line"></span><br><span class="line">            messages.append(response_message)</span><br><span class="line">            <span class="keyword">for</span> tool_call <span class="keyword">in</span> tool_calls:</span><br><span class="line">                function_name = tool_call.function.name</span><br><span class="line">                function_to_call = available_functions[function_name]</span><br><span class="line">                function_args = json.loads(tool_call.function.arguments)</span><br><span class="line">                <span class="comment">## 真正执行外部函数的就是这儿的代码</span></span><br><span class="line">                function_response = function_to_call(**function_args)</span><br><span class="line">                messages.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span>,</span><br><span class="line">                        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;name&quot;</span>: function_name,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span>: function_response,</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">                <span class="comment">## 第二次调用模型</span></span><br><span class="line">            second_response = client.chat.completions.create(</span><br><span class="line">                model=model,</span><br><span class="line">                messages=messages,</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># 获取最终结果</span></span><br><span class="line">            final_response = second_response.choices[<span class="number">0</span>].message.content</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            final_response = response_message.content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> final_response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chat_with_model</span>(<span class="params">functions_list=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                    prompt=<span class="string">&quot;你好&quot;</span>,</span></span><br><span class="line"><span class="params">                    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span></span><br><span class="line"><span class="params">                    system_message=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是小智助手。&quot;</span>&#125;]</span>):</span><br><span class="line">    messages = system_message</span><br><span class="line">    messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        answer = run_conversation(messages=messages,</span><br><span class="line">                                  functions_list=functions_list,</span><br><span class="line">                                  model=model)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;智能助手回答: <span class="subst">&#123;answer&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 询问用户是否还有其他问题</span></span><br><span class="line">        user_input = <span class="built_in">input</span>(<span class="string">&quot;您还有其他问题吗？(输入退出以结束对话): &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_input == <span class="string">&quot;退出&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录用户回答</span></span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">functions_list = [sunwukong_function, tangseng_function]</span><br><span class="line">chat_with_model(functions_list, prompt=<span class="string">&quot;你好&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="ChatGPT-Plugin"><a href="#ChatGPT-Plugin" class="headerlink" title="ChatGPT Plugin"></a>ChatGPT Plugin</h2><h3 id="ChatGPT-Plugin-的核心概念"><a href="#ChatGPT-Plugin-的核心概念" class="headerlink" title="ChatGPT Plugin 的核心概念"></a>ChatGPT Plugin 的核心概念</h3><p>ChatGPT Plugin 的本质是一个 <strong>API 服务</strong>，让 ChatGPT 能调用你的接口，扩展功能。例如查询数据库、获取实时数据、操作第三方服务等等。<br>核心组成部分包括：</p><ul><li><strong>API</strong>：提供功能的接口，通常是 RESTful API</li><li><strong>OpenAPI 规范</strong>：描述 API 的功能、参数、返回结果</li><li><strong>Manifest 文件</strong>：定义插件的元数据（比如名称、描述、授权等）</li></ul><h3 id="搭建-API-服务"><a href="#搭建-API-服务" class="headerlink" title="搭建 API 服务"></a>搭建 API 服务</h3><p>创建一个 Web 服务，提供 REST API。你可以用 <strong>Flask (Python)<strong>、</strong>Express (Node.js)<strong>、</strong>FastAPI</strong> 等框架。  </p><p>示例代码 (Flask)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_weather&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>():</span><br><span class="line">    city = request.args.get(<span class="string">&#x27;city&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;city&quot;</span>: city, <span class="string">&quot;weather&quot;</span>: <span class="string">&quot;sunny&quot;</span>, <span class="string">&quot;temperature&quot;</span>: <span class="string">&quot;25°C&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><ul><li>定义路由（API 端点）</li><li>处理参数和返回 JSON</li><li>部署到公网可访问服务器</li></ul><h3 id="创建-OpenAPI-规范文件"><a href="#创建-OpenAPI-规范文件" class="headerlink" title="创建 OpenAPI 规范文件"></a>创建 OpenAPI 规范文件</h3><p>创建一个 <code>openapi.yaml</code> 文件，描述 API。ChatGPT 需要它理解你的插件怎么调用。</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openapi:</span> <span class="number">3.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Weather</span> <span class="string">Plugin</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">A</span> <span class="string">plugin</span> <span class="string">that</span> <span class="string">provides</span> <span class="string">weather</span> <span class="string">information</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://your-plugin-domain.com</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/get_weather:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">getWeather</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">Get</span> <span class="string">weather</span> <span class="string">information</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">city</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">City</span> <span class="string">name</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&#x27;200&#x27;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Weather</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">                <span class="attr">properties:</span></span><br><span class="line">                  <span class="attr">city:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                  <span class="attr">weather:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                  <span class="attr">temperature:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><h3 id="创建插件的-Manifest-文件"><a href="#创建插件的-Manifest-文件" class="headerlink" title="创建插件的 Manifest 文件"></a>创建插件的 Manifest 文件</h3><p>创建 <code>ai-plugin.json</code> 文件，提供插件的元数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;schema_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name_for_model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weather_plugin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name_for_human&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Weather Plugin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description_for_model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Provides weather information for a given city.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description_for_human&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Get real-time weather data for any city.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auth&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openapi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://your-plugin-domain.com/openapi.yaml&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;logo_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://your-plugin-domain.com/logo.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;contact_email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;support@yourdomain.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;legal_info_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://yourdomain.com/legal&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>name_for_model</code></strong>: 确保简短且便于 ChatGPT 识别</li><li><strong><code>auth</code></strong>: 支持 <code>none</code>（公开）、<code>oauth</code>（需要登录授权）</li><li><strong><code>api</code></strong>: 指定 OpenAPI 文件地址</li><li><strong><code>logo_url</code></strong>: 让插件界面更专业</li></ul><h3 id="部署插件服务"><a href="#部署插件服务" class="headerlink" title="部署插件服务"></a>部署插件服务</h3><p>确保你的服务可以被外网访问，可以选择：</p><ul><li><strong>Cloudflare Pages &#x2F; Workers</strong>（轻量级）</li><li><strong>Vercel &#x2F; Render</strong>（适合前后端一起托管）</li><li><strong>AWS &#x2F; GCP &#x2F; Azure</strong>（大型项目）</li></ul><p>确保 API 支持 <strong>HTTPS</strong>，否则 ChatGPT 无法调用。</p><blockquote><p> <strong>Function calling VS ChatGPT Plugin</strong></p><p><img src="/images/3.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9C%A8%E7%BA%BF%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91/image-20250317113459547.png" alt="image-20250317113459547"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Agent实战基础之大模型基础</title>
      <link href="/2025/03/15/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/03/15/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Agent实战基础之大模型基础"><a href="#Agent实战基础之大模型基础" class="headerlink" title="Agent实战基础之大模型基础"></a>Agent实战基础之大模型基础</h1><h2 id="transformer"><a href="#transformer" class="headerlink" title="transformer"></a>transformer</h2><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315135636248.png" alt="image-20250315135636248"></p><h3 id="输入部分"><a href="#输入部分" class="headerlink" title="输入部分"></a>输入部分</h3><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315135837941.png" alt="image-20250315135837941"></p><p><strong>框架：</strong></p><ol><li><strong>源文本</strong>：嵌入层以及位置编码器</li><li><strong>目标文本</strong>：嵌入层以及位置编码器</li></ol><p><strong>组件：</strong></p><h4 id="文本嵌入层-Embedding"><a href="#文本嵌入层-Embedding" class="headerlink" title="文本嵌入层 (Embedding)"></a>文本嵌入层 (Embedding)</h4><ul><li><p><strong>概念：</strong><br>文本嵌入层用于将离散的词或符号转化为连续的向量表示，使得每个词都拥有一个固定长度的语义表示。</p></li><li><p><strong>作用：</strong>  </p><ul><li>将词汇转换为低维向量，便于后续的计算处理。  </li><li>捕获词与词之间的语义关系，为模型理解文本提供基础信息。</li></ul></li></ul><h4 id="位置编码器-Positional-Encoding"><a href="#位置编码器-Positional-Encoding" class="headerlink" title="位置编码器 (Positional Encoding)"></a>位置编码器 (Positional Encoding)</h4><ul><li><p><strong>概念：</strong><br>位置编码器为嵌入向量添加位置信息，由于嵌入层本身不包含词序信息，位置编码器弥补了这一不足。</p></li><li><p><strong>作用：</strong>  </p><ul><li>注入序列中各词的相对或绝对位置信息，帮助模型识别词序。  </li><li>保持语法结构，确保模型理解句子内部的依赖关系。</li></ul></li></ul><h3 id="输出部分"><a href="#输出部分" class="headerlink" title="输出部分"></a>输出部分</h3><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315140112908.png" alt="image-20250315140112908"></p><p><strong>框架：</strong></p><ol><li>线性层  </li><li>softmax 处理器</li></ol><h3 id="解码器部分"><a href="#解码器部分" class="headerlink" title="解码器部分"></a>解码器部分</h3><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315140122384.png" alt="image-20250315140122384"></p><p><strong>框架：</strong></p><ol><li>由 N 个编码器堆叠  </li><li>每个编码器包含两个子层：<ul><li><strong>第一个子层：</strong> 多头自注意力子层 + 规范化层 + 残差连接  </li><li><strong>第二个子层：</strong> 前馈全连接子层 + 规范化层 + 残差连接</li></ul></li></ol><p><strong>组件：</strong></p><h4 id="掩码张量-mask"><a href="#掩码张量-mask" class="headerlink" title="掩码张量 (mask)"></a>掩码张量 (mask)</h4><ul><li><p><strong>概念：</strong><br>掩码张量用于屏蔽掉不应参与计算的信息，例如填充符号或在生成任务中需要屏蔽未来的信息。</p></li><li><p><strong>作用：</strong>  </p><ul><li>防止模型在计算注意力分数时考虑到无关或不允许访问的信息。  </li><li>确保训练过程中的因果关系（例如在自回归生成模型中屏蔽未来时刻）。</li></ul></li></ul><h4 id="自注意力机制"><a href="#自注意力机制" class="headerlink" title="自注意力机制"></a>自注意力机制</h4><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315143826474.png" alt="image-20250315143826474"></p><p>$$<br>\text{Attention}(Q, K, V) &#x3D; \text{softmax} \left( \frac{QK^T}{\sqrt{d_k}} \right) V<br>$$</p><ul><li><p><strong>概念：</strong><br>自注意力机制允许模型在计算当前词的表示时，同时考虑序列中所有其他位置的词，从而捕捉全局依赖关系。</p></li><li><p><strong>作用：</strong>  </p><ul><li>动态调整每个词在整体语义表示中的权重。  </li><li>提升模型对长距离依赖关系的捕捉能力。</li></ul></li></ul><blockquote><p><strong>说明：</strong> 输入的 Q、K、V 通常中，K 与 V 是相同的，而 Q 可以不同；特殊情况下 Q&#x3D;K&#x3D;V 则称为标准的自注意力机制。</p></blockquote><h4 id="多头注意力机制"><a href="#多头注意力机制" class="headerlink" title="多头注意力机制"></a>多头注意力机制</h4><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315144535063.png" alt="image-20250315144535063"></p><ul><li><p><strong>概念：</strong><br>多头注意力机制通过将输入的特征向量划分为多个子空间（head），在每个子空间上分别计算注意力，然后将结果合并，获得更丰富的表示。</p></li><li><p><strong>作用：</strong>  </p><ul><li>使模型能在不同的子空间中捕捉多种语义信息。  </li><li>增强模型的表达能力和稳定性，避免单一注意力头的局限性。</li></ul></li></ul><h4 id="前馈全连接层"><a href="#前馈全连接层" class="headerlink" title="前馈全连接层"></a>前馈全连接层</h4><ul><li><p><strong>概念：</strong><br>前馈全连接层通常由两层线性变换及其中间的非线性激活函数（如 ReLU 或 GeLU）构成，针对每个序列位置独立操作。</p></li><li><p><strong>作用：</strong>  </p><ul><li>进一步提取并组合特征信息，提升模型的非线性表达能力。  </li><li>对每个位置的表示进行独立变换，增强特征的抽象性。</li></ul></li></ul><h4 id="规范化层"><a href="#规范化层" class="headerlink" title="规范化层"></a>规范化层</h4><ul><li><p><strong>概念：</strong><br>规范化层（例如 Layer Normalization）用于对输入特征进行标准化处理，使得数据分布更均匀稳定。</p></li><li><p><strong>作用：</strong>  </p><ul><li>加速模型训练收敛，防止梯度爆炸或消失。  </li><li>保证各层输出处于合理的数值范围内，提高整体稳定性。</li></ul></li></ul><h4 id="残差连接"><a href="#残差连接" class="headerlink" title="残差连接"></a>残差连接</h4><ul><li><p><strong>概念：</strong><br>残差连接（Residual Connection）通过将输入直接加到输出上，形成捷径，帮助缓解深层网络中的梯度消失问题。</p></li><li><p><strong>作用：</strong>  </p><ul><li>促进深层网络中信息的传递。  </li><li>提升训练效率，使得网络在堆叠多层后仍能保持良好性能。</li></ul></li></ul><h3 id="编码器部分"><a href="#编码器部分" class="headerlink" title="编码器部分"></a>编码器部分</h3><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315140132700.png" alt="image-20250315140132700"></p><p><strong>框架：</strong></p><ol><li>由 N 个解码器堆叠  </li><li>每个编码器包含三个子层：<ul><li><strong>第一个子层：</strong> 多头自注意力子层 + 规范化层 + 残差连接  </li><li><strong>第二个子层：</strong> 多头注意力子层 + 规范化层 + 残差连接  </li><li><strong>第三个子层：</strong> 前馈全连接子层 + 规范化层 + 残差连接</li></ul></li></ol><h2 id="Open-GPT不同版本对比"><a href="#Open-GPT不同版本对比" class="headerlink" title="Open GPT不同版本对比"></a>Open GPT不同版本对比</h2><h3 id="不同模型对比"><a href="#不同模型对比" class="headerlink" title="不同模型对比"></a>不同模型对比</h3><table><thead><tr><th><strong>模型</strong></th><th><strong>结构</strong></th><th><strong>位置编码</strong></th><th><strong>激活函数</strong></th><th><strong>Layer Norm方法</strong></th></tr></thead><tbody><tr><td>原生</td><td>Encoder-Decoder</td><td>Sinusoidal编码</td><td>ReLU</td><td>Post Layer Norm</td></tr><tr><td>Transformer</td><td>Encoder-Decoder</td><td>Sinusoidal编码</td><td>ReLU</td><td>Post Layer Norm</td></tr><tr><td>BERT</td><td>Encoder</td><td>绝对位置编码</td><td>GeLU</td><td>Post Layer Norm</td></tr><tr><td>LLaMA</td><td>Casual Decoder</td><td>RoPE</td><td>SwiGLU</td><td>Pre RMS Norm</td></tr><tr><td>ChatGLM-6B</td><td>Prefix Decoder</td><td>RoPE</td><td>GeGLU</td><td>Post Deep Norm</td></tr><tr><td>Bloom</td><td>Casual Decoder</td><td>ALiBi</td><td>GeLU</td><td>Pre Layer Norm</td></tr></tbody></table><h3 id="GPT不同版本对比"><a href="#GPT不同版本对比" class="headerlink" title="GPT不同版本对比"></a>GPT不同版本对比</h3><table><thead><tr><th><strong>对比维度</strong></th><th><strong>GPT1</strong></th><th><strong>GPT2</strong></th><th><strong>GPT3</strong></th><th><strong>GPT3.5</strong></th><th><strong>GPT4.0</strong></th></tr></thead><tbody><tr><td><strong>模型规模</strong></td><td>117M</td><td>1.5B</td><td>175B</td><td>175B</td><td>万亿级别</td></tr><tr><td><strong>Transformer层数</strong></td><td>12</td><td>48</td><td>96</td><td>96</td><td>120</td></tr><tr><td><strong>预训练数据集</strong></td><td>Books1, 英语维基百科</td><td>Books1&#x2F;2, 英语维基百科, Web Text2, Common Crawl</td><td>大量的互联网文本，如维基百科、新闻、小说、博客等</td><td>未公开</td><td>未公开</td></tr><tr><td><strong>主要贡献</strong></td><td>1) 提出了基于生成式预训练的语言理解方法</td><td>1) 提出了无监督多任务学习的语言模型</td><td>1) 引入了少样本学习的能力</td><td>发布了全世界顶级的产品，ChatGPT, 让全世界都认识大模型</td><td>1) 展示了预训练和训练数据集规模对模型性能的影响</td></tr><tr><td></td><td>2) 扩展了模型规模</td><td>2) 提出了prompt engineering</td><td>2) 展示了预训练和训练数据集规模对模型性能的提升</td><td>3) 进一步增大了模型规模和训练数据集规模</td><td>2) 展示了大模型在多种下游任务上的性能提升</td></tr><tr><td><strong>发布日期</strong></td><td>2018年</td><td>2019年</td><td>2020年</td><td>2022年</td><td>2023年</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.AI大模型应用开发工程师课程导读</title>
      <link href="/2025/03/14/1.AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%AF%BE%E7%A8%8B%E5%AF%BC%E8%AF%BB/"/>
      <url>/2025/03/14/1.AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%AF%BE%E7%A8%8B%E5%AF%BC%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="AI大模型应用开发工程师课程导读"><a href="#AI大模型应用开发工程师课程导读" class="headerlink" title="AI大模型应用开发工程师课程导读"></a>AI大模型应用开发工程师课程导读</h1><h3 id="🎯-第一阶段：打好基础"><a href="#🎯-第一阶段：打好基础" class="headerlink" title="🎯 第一阶段：打好基础"></a>🎯 <strong>第一阶段：打好基础</strong></h3><p><strong>目标</strong>：理解大模型基础知识，掌握Agent开发核心概念和工具<br> 📌 <strong>课程模块</strong>：</p><ol><li>AI大模型应用开发工程师课程导读</li><li>Agent实战基础之大模型基础</li><li>Agent实战基础之在线大模型开发</li><li>Agent实战基础之提示词工程和Function进阶实战</li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>熟悉大模型概念、原理和开发环境</li><li>掌握提示词工程、Function调用，提高模型交互能力</li></ul><hr><h3 id="🚀-第二阶段：强化多模态与Agent架构实战"><a href="#🚀-第二阶段：强化多模态与Agent架构实战" class="headerlink" title="🚀 第二阶段：强化多模态与Agent架构实战"></a>🚀 <strong>第二阶段：强化多模态与Agent架构实战</strong></h3><p><strong>目标</strong>：掌握多模态大模型开发，熟悉Agent架构与落地方案<br> 📌 <strong>课程模块</strong>： 5. Agent实战基础之多模态大模型实战</p><ol start="6"><li>Agent实战基础之Agent架构与落地方案</li><li>Agent实战基础之ReAct架构实战</li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>理解多模态大模型（图像、文本、语音）融合开发</li><li>熟悉Agent架构（传统+ReAct思路），掌握多场景落地实现</li></ul><hr><h3 id="🔧-第三阶段：进阶开发技能强化"><a href="#🔧-第三阶段：进阶开发技能强化" class="headerlink" title="🔧 第三阶段：进阶开发技能强化"></a>🔧 <strong>第三阶段：进阶开发技能强化</strong></h3><p><strong>目标</strong>：熟练掌握核心工具链，提升开发效率和应用能力<br> 📌 <strong>课程模块</strong>： </p><ol start="8"><li><p>Agent实战技能之Dify智能应用开发</p></li><li><p>Agent实战技能之Assistants API</p></li><li><p>Agent实战技能之LangChain全面剖析</p></li><li><p>Agent实战技能之LangGraph深度实战</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>上手Dify等智能应用开发平台</li><li>深入掌握LangChain、LangGraph，实现复杂业务逻辑编排</li></ul><hr><h3 id="🏗️-第四阶段：大型项目实战演练"><a href="#🏗️-第四阶段：大型项目实战演练" class="headerlink" title="🏗️ 第四阶段：大型项目实战演练"></a>🏗️ <strong>第四阶段：大型项目实战演练</strong></h3><p><strong>目标</strong>：完成从0到1的大型商业项目开发，积累实战经验<br> 📌 <strong>课程模块</strong>： </p><ol start="12"><li><p>Agent大型项目实战1:百亿级智能数据分析平台</p></li><li><p>Agent大型项目实战2:多模态Agent商业平台</p></li><li><p>Agent大型项目实战3:ChatBI即席查询平台</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>具备大规模数据分析平台搭建能力</li><li>熟悉多模态Agent在商业场景落地开发</li><li>掌握ChatBI查询平台的完整设计与实现</li></ul><hr><h3 id="🧠-第五阶段：RAG架构与性能优化突破"><a href="#🧠-第五阶段：RAG架构与性能优化突破" class="headerlink" title="🧠 第五阶段：RAG架构与性能优化突破"></a>🧠 <strong>第五阶段：RAG架构与性能优化突破</strong></h3><p><strong>目标</strong>：掌握RAG（检索增强生成）技术，解决大模型知识瓶颈<br> 📌 <strong>课程模块</strong>： </p><ol start="15"><li><p>RAG实战基础之RAG架构演进之路</p></li><li><p>RAG实战基础之RAG技术选型</p></li><li><p>RAG实战基础之性能优化</p></li><li><p>RAG实战进阶之GraphRAG实战</p></li><li><p>RAG项目实战:高性能RAG商业项目</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>理解RAG原理与架构演进</li><li>掌握RAG系统搭建与性能优化策略</li><li>上手GraphRAG进阶玩法，落地高性能RAG项目</li></ul><hr><h3 id="🔥-第六阶段：DeepSeek专题深度研习"><a href="#🔥-第六阶段：DeepSeek专题深度研习" class="headerlink" title="🔥 第六阶段：DeepSeek专题深度研习"></a>🔥 <strong>第六阶段：DeepSeek专题深度研习</strong></h3><p><strong>目标</strong>：深入探索大模型领域最新技术趋势，完成企业级项目交付<br> 📌 <strong>课程模块</strong>： 20. DeepSeek专题之大模型API实战</p><ol start="21"><li>DeepSeek专题之统一多模态模型</li><li>DeepSeek专题之微调行业大模型</li><li>DeepSeek专题之蒸馏专属大模型</li><li>DeepSeek专题之企业级智能体客服项目</li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>掌握DeepSeek API与多模态模型开发</li><li>理解大模型微调、蒸馏与专属模型打造</li><li>完成企业级智能体客服系统落地</li></ul><hr><p>✨ <strong>🔚 最终成果</strong></p><ul><li>掌握大模型开发全流程，从基础到实战全覆盖</li><li>理解多模态Agent、RAG、DeepSeek等前沿技术</li><li>具备独立开发和交付大型商业项目能力</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
