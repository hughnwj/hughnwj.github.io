<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>8.Agent实战技能之Dify智能应用开发</title>
      <link href="/2025/03/23/8.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BDify%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
      <url>/2025/03/23/8.Agent%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B9%8BDify%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Agent实战基础之ReAct架构实战</title>
      <link href="/2025/03/23/7.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BReAct%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/"/>
      <url>/2025/03/23/7.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BReAct%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Agent流行的工作方式"><a href="#1-Agent流行的工作方式" class="headerlink" title="1. Agent流行的工作方式"></a>1. Agent流行的工作方式</h1><p><img src="/images/7.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BReAct%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/image-20250323144652133.png" alt="image-20250323144652133"></p><h1 id="2-手动实现ReAct智能应用框架"><a href="#2-手动实现ReAct智能应用框架" class="headerlink" title="2. 手动实现ReAct智能应用框架"></a>2. 手动实现ReAct智能应用框架</h1><h2 id="2-1-ReAct-架构"><a href="#2-1-ReAct-架构" class="headerlink" title="2.1 ReAct 架构"></a>2.1 ReAct 架构</h2><p><img src="/images/7.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BReAct%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/image-20250323145522620.png" alt="image-20250323145522620"></p><p>&emsp;&emsp;ReAct Agent 也称为 <code>ReAct</code>，是一个用于提示大语言模型的框架，它首次在 2022 年 10 月的论文<a href="https://arxiv.org/pdf/2210.03629">《ReAct：Synergizing Reasoning and Acting in Language Models》</a>中引入，并于2023 年 3 月修订。该框架的开发是为了协同大语言模型中的推理和行动，使它们更加强大、通用和可解释。通过交叉推理和行动，ReAct 使智能体能够动态地在产生想法和特定于任务的行动之间交替。</p><p>&emsp;&emsp;ReAct 框架有两个过程，由 <code>Reason</code> 和 <code>Act</code> 结合而来。从本质上讲，这种方法的灵感来自于人类如何通过和谐地结合思维和行动来执行任务，就像我们上面“我想去北京旅游”这个真实示例一样。</p><p>&emsp;&emsp;首先第一部分 Reason，它基于一种推理技术——<a href="https://arxiv.org/pdf/2201.11903">思想链（CoT）</a>， CoT是一种提示工程，通过将输入分解为多个逻辑思维步骤，帮助大语言模型执行推理并解决复杂问题。这使得大模型能够按顺序规划和解决任务的每个部分，从而更准确地获得最终结果，具体包括：</p><ul><li>分解问题：当面对复杂的任务时，CoT 方法不是通过单个步骤解决它，而是将任务分解为更小的步骤，每个步骤解决不同方面的问题。</li><li>顺序思维：思维链中的每一步都建立在上一步的结果之上。这样，模型就能从头到尾构造出一条逻辑推理链。</li></ul><h2 id="2-2-提示词设计"><a href="#2-2-提示词设计" class="headerlink" title="2.2 提示词设计"></a>2.2 提示词设计</h2><h3 id="2-2-1-指定角色"><a href="#2-2-1-指定角色" class="headerlink" title="2.2.1 指定角色"></a>2.2.1 指定角色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">您在一个由“思考、行动、观察、回答<span class="string">&quot;组成的循环中运行。</span></span><br><span class="line"><span class="string">在循环的最后，您输出一个答案。</span></span><br><span class="line"><span class="string">使用“思考”来描述您对所提问题的思考。</span></span><br><span class="line"><span class="string">使用“行动&quot;</span>来执行您可用的动作之一-。</span><br><span class="line">“观察”将是执行这些动作的结果。</span><br><span class="line">“回答”将是分析“观察<span class="string">&quot;结果后得出的答案。</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-指定工具"><a href="#2-2-2-指定工具" class="headerlink" title="2.2.2 指定工具"></a>2.2.2 指定工具</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">您可用的动作包括:</span><br><span class="line">calculate (计算) :</span><br><span class="line">例如: calculate:<span class="number">4</span>*<span class="number">7</span>/<span class="number">3</span></span><br><span class="line">执行计算并返回数字。使用Python,如有必要请确保使用浮点数语法</span><br><span class="line">wikipedia (维基百科) :</span><br><span class="line">例如: wikipedia: Django</span><br><span class="line">返回从维基百料搜索的摘要</span><br></pre></td></tr></table></figure><h3 id="2-2-3-给出示例"><a href="#2-2-3-给出示例" class="headerlink" title="2.2.3 给出示例"></a>2.2.3 给出示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例会话:</span><br><span class="line">问题:法国的首都是什么?</span><br><span class="line">思考:我应该在维基百科上查找关于法国的信息</span><br><span class="line">行动: wikipedia: France</span><br><span class="line">然后您应该调用适当的动作，并从结果中确定答案</span><br><span class="line">您然后输出:</span><br><span class="line">回答:法国的首都是巴黎</span><br></pre></td></tr></table></figure><h2 id="2-3-手写ReAct-Agent"><a href="#2-3-手写ReAct-Agent" class="headerlink" title="2.3 手写ReAct Agent"></a>2.3 手写ReAct Agent</h2><h3 id="2-3-1-定义大模型接口"><a href="#2-3-1-定义大模型接口" class="headerlink" title="2.3.1 定义大模型接口"></a>2.3.1 定义大模型接口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChatBot</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, system=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.system = system</span><br><span class="line">        <span class="variable language_">self</span>.messages = []</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.system:</span><br><span class="line">            <span class="variable language_">self</span>.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="variable language_">self</span>.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: message&#125;)</span><br><span class="line">        result = <span class="variable language_">self</span>.execute()</span><br><span class="line">        <span class="variable language_">self</span>.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: result&#125;)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line">        completion = client.chat.completions.create(model=<span class="string">&quot;gpt-4o&quot;</span>, messages=<span class="variable language_">self</span>.messages)</span><br><span class="line">        <span class="keyword">return</span> completion.choices[<span class="number">0</span>].message.content</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;如上所示，这段代码定义了一个<code>ChatBot</code>的类，用来创建和处理一个基于<code>OpenAI GPT-4</code>模型的聊天机器人。下面是每个部分的具体解释：</p><ul><li><strong>init</strong> 方法用来接收系统提示(System Prompt)，并追加到全局的消息列表中。</li><li><strong>call</strong> 方法是 <code>Python</code> 类的一个特殊方法, 当对一个类的实例像调用函数一样传递参数并执行时，实际上就是在调用这个类的 <strong>call</strong> 方法。其内部会 调用<code>execute</code> 方法。</li><li>execute 方法实际上就是与<code>OpenAI</code>的API进行交互，发送累积的消息历史（包括系统消息、用户消息和之前的回应）到OpenAI的聊天模型,返回最终的响应。</li></ul></blockquote><h3 id="2-3-2-定义代理循环逻辑"><a href="#2-3-2-定义代理循环逻辑" class="headerlink" title="2.3.2 定义代理循环逻辑"></a>2.3.2 定义代理循环逻辑</h3><p>&emsp;&emsp;从<code>Thought</code> 到 <code>Action</code> ， 最后到 <code>Observation</code> 状态，是一个循环的逻辑，而循环的次数，取决于大模型将用户的原始 <code>Goal</code> 分成了多少个子任务。 所有在这样的逻辑中，我们需要去处理的是：</p><ol><li>判断大模型当前处于哪一个状态阶段</li><li>如果停留在 <code>Action</code> 阶段，需要像调用 Function Calling 的过程一样，先执行工具，再将工具的执行结果传递给<code>Obversation</code> 状态阶段。</li></ol><p>&emsp;由此，我们定义了如下的一个 <code>AgentExecutor</code>函数。该函数实现一个循环，检测状态并使用正则表达式提取当前停留的状态阶段。不断地迭代，直到没有更多的（或者我们已达到最大迭代次数）调用操作，再返回最终的响应。完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">action_re = re.<span class="built_in">compile</span>(<span class="string">&#x27;^Action: (\w+): (.*)$&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AgentExecutor</span>(<span class="params">question, max_turns=<span class="number">5</span></span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    bot = ChatBot(system_prompt)</span><br><span class="line">    <span class="comment"># 通过 next_prompt 标识每一个子任务的阶段性输入</span></span><br><span class="line">    next_prompt = question</span><br><span class="line">    <span class="keyword">while</span> i &lt; max_turns:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 这里调用的就是 ChatBot 类的 __call__ 方法</span></span><br><span class="line">        result = bot(next_prompt)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;result:<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 在这里通过正则判断是否到了需要调用函数的Action阶段</span></span><br><span class="line">        actions = [action_re.<span class="keyword">match</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> result.split(<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">if</span> action_re.<span class="keyword">match</span>(a)]</span><br><span class="line">        <span class="keyword">if</span> actions:</span><br><span class="line">            <span class="comment"># 提取调用的工具名和工具所需的入参</span></span><br><span class="line">            action, action_input = actions[<span class="number">0</span>].groups()</span><br><span class="line">            <span class="keyword">if</span> action <span class="keyword">not</span> <span class="keyword">in</span> available_actions:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&quot;Unknown action: &#123;&#125;: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(action, action_input))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;running: <span class="subst">&#123;action&#125;</span> <span class="subst">&#123;action_input&#125;</span>&quot;</span>)</span><br><span class="line">            observation = available_actions[action](action_input)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Observation: <span class="subst">&#123;observation&#125;</span>&quot;</span>)</span><br><span class="line">            next_prompt = <span class="string">&quot;Observation: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(observation)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> bot.messages</span><br></pre></td></tr></table></figure><h3 id="2-3-3-LangChain内置的ReAct框架"><a href="#2-3-3-LangChain内置的ReAct框架" class="headerlink" title="2.3.3 LangChain内置的ReAct框架"></a>2.3.3 LangChain内置的ReAct框架</h3><p>&emsp;&emsp;就目前的AI Agent 现状而言，流行的代理框架都有内置的 ReAct 代理，比如<code>Langchain</code>、<code>LlamaIndex</code>中的代理，或者 <code>CrewAI</code>这种新兴起的AI Agent开发框架，都是基于ReAct理念的一种变种。LangChain 的 ReAct 代理工程描述 👇</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Answer the following questions <span class="keyword">as</span> best you can. You have access </span><br><span class="line">to the following tools:</span><br><span class="line"></span><br><span class="line">&#123;tools&#125;</span><br><span class="line"></span><br><span class="line">Use the following <span class="built_in">format</span>:</span><br><span class="line"></span><br><span class="line">Question: the <span class="built_in">input</span> question you must answer</span><br><span class="line">Thought: you should always think about what to do</span><br><span class="line">Action: the action to take, should be one of [&#123;tool_names&#125;]</span><br><span class="line">Action Input: the <span class="built_in">input</span> to the action</span><br><span class="line">Observation: the result of the action</span><br><span class="line"><span class="meta">... </span>(this Thought/Action/Action Input/Observation can repeat N times)</span><br><span class="line">Thought: I now know the final answer</span><br><span class="line">Final Answer: the final answer to the original <span class="built_in">input</span> question</span><br><span class="line"></span><br><span class="line">Begin!</span><br><span class="line"></span><br><span class="line">Question: &#123;<span class="built_in">input</span>&#125;</span><br><span class="line">Thought:&#123;agent_scratchpad&#125;</span><br><span class="line"></span><br><span class="line">There are three placeholders &#123;tool&#125;, &#123;<span class="built_in">input</span>&#125;, <span class="keyword">and</span> &#123;agent_scratchpad&#125; <span class="keyword">in</span> this prompt. These will be replaced <span class="keyword">with</span> the appropriate text before sending it to LLM.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">尽你所能回答以下问题。您有访问权限</span><br><span class="line">使用以下工具：</span><br><span class="line"></span><br><span class="line">&#123;tool&#125;</span><br><span class="line"></span><br><span class="line">使用以下格式：</span><br><span class="line"></span><br><span class="line">问题：您必须回答的输入问题</span><br><span class="line">思考：你应该始终思考该做什么</span><br><span class="line">操作：要采取的操作，应该是〔｛tool_names｝〕之一</span><br><span class="line">动作输入：动作的输入</span><br><span class="line">观察：行动的结果</span><br><span class="line">…（这个想法/行动/行动输入/观察可以重复N次）</span><br><span class="line">想：我现在知道最终答案了</span><br><span class="line">最终答案：原始输入问题的最终答案</span><br><span class="line"></span><br><span class="line">开始！</span><br><span class="line"></span><br><span class="line">问题：&#123;<span class="built_in">input</span>&#125;</span><br><span class="line">思考：&#123;agent_scratchpad&#125;</span><br><span class="line"></span><br><span class="line">此提示中有三个占位符&#123;tool&#125;、&#123;<span class="built_in">input</span>&#125;和&#123;agent_scratchpad&#125;。在发送给LLM之前，这些将被替换为适当的文本。</span><br></pre></td></tr></table></figure><h1 id="3-基于-ReAct-Agent-实现智能客服"><a href="#3-基于-ReAct-Agent-实现智能客服" class="headerlink" title="3. 基于 ReAct Agent 实现智能客服"></a>3. 基于 ReAct Agent 实现智能客服</h1><h2 id="3-1-提示词设计"><a href="#3-1-提示词设计" class="headerlink" title="3.1 提示词设计"></a>3.1 提示词设计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.system_prompt = <span class="string">&quot;&quot;&quot; 你是一位智能的电子商务平台客服助手。必须及时回答用户关于产品的咨询。如果问题与具体产品无关，你可以直接回答。 输出格式为：Answer: [你的回答]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">示例： Answer: 还有什么我可以帮您的吗？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果涉及具体产品信息，你需要进入思考-行动-观察的循环模式。 使用Thought来描述你的分析过程。 使用Action来运行一个可用的工具——然后等待Observation。 当你得出最终答案时，输出格式为：Answer: [你的回答]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可用工具：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">query_by_product_name: 查询数据库，检索与指定产品名称匹配或包含该名称的产品列表。此功能可用于帮助客户通过在线平台或客服界面按名称查找产品。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">read_store_promotions: 读取商店的促销文件，查找与提供的产品名称相关的具体促销信息。此功能会扫描文本文件，寻找包含产品名称的促销条目。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">calculate: 结合产品的售价和优惠信息，计算最终交易价格。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用Action时，始终按以下格式： Action: tool_name: argument1, argument2, ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">示例： Human: 你们店里有卖足球吗？如果有的话，现在有什么优惠政策？我现在买的话，最后多少钱？ Thought: 要回答这个问题，我需要先查询后台的数据库。 Action: query_by_product_name: football</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Observation: 目前我已查到足球有库存，价格为120元。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Thought: 我需要进一步查询关于足球的优惠政策 Action: read_store_promotions: football</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Observation: 目前足球的促销政策是：购买享受9折优惠</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Thought: 现在我需要结合足球的售价和优惠政策，计算最终交易价格 Action: calculate: 120 * 0.9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Observation: 足球最终价格为108.0元</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Thought: 我已经获得了回答问题所需的全部信息。 Answer: 根据您的咨询，我们店里确实有足球出售，当前售价为120元。目前购买享受9折优惠，因此如果您现在购买，最终成交价格是108元。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：你必须用中文回答最终结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">现在轮到你了： &quot;&quot;&quot;</span>.strip()</span><br></pre></td></tr></table></figure><h2 id="3-2-Agent定义"><a href="#3-2-Agent定义" class="headerlink" title="3.2 Agent定义"></a>3.2 Agent定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomerServiceAgent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, client, config</span>):</span><br><span class="line">        <span class="variable language_">self</span>.client = client</span><br><span class="line">        <span class="variable language_">self</span>.config = config</span><br><span class="line">        <span class="variable language_">self</span>.messages = []</span><br><span class="line">        <span class="variable language_">self</span>.system_prompt = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        You are a Intelligent customer service assistant for e-commerce platform. It is necessary to answer the user&#x27;s consultation about the product in a timely manner. If it has nothing to do with the specific product, you can answer it directly.</span></span><br><span class="line"><span class="string">        output it as Answer: [Your answer here].</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">        Example :</span></span><br><span class="line"><span class="string">        Answer: Is there anything else I can help you with</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        If specific information about the product is involved, You run in a loop of Thought, Action, Observation.</span></span><br><span class="line"><span class="string">        Use Thought to describe your analysis process.</span></span><br><span class="line"><span class="string">        Use Action to run one of the available tools - then wait for an Observation.</span></span><br><span class="line"><span class="string">        When you have a final answer, output it as Answer: [Your answer here].</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Available tools:</span></span><br><span class="line"><span class="string">        1. query_by_product_name: Query the database to retrieve a list of products that match or contain the specified product name. This function can be used to assist customers in finding products by name via an online platform or customer support interface</span></span><br><span class="line"><span class="string">        2. read_store_promotions: Read the store&#x27;s promotion document to find specific promotions related to the provided product name. This function scans a text document for any promotional entries that include the product name.</span></span><br><span class="line"><span class="string">        3. calculate: Calculate the final transaction price by combining the selling price and preferential information of the product</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        When using an Action, always format it as:</span></span><br><span class="line"><span class="string">        Action: tool_name: argument1, argument2, ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Example :</span></span><br><span class="line"><span class="string">        Human: Do you sell football in your shop? If you sell soccer balls, what are the preferential policies now? If I buy it now, how much will I get in the end?</span></span><br><span class="line"><span class="string">        Thought: To answer this question, I need to check the database of the background first.</span></span><br><span class="line"><span class="string">        Action: query_by_product_name: football</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Observation: At present, I have checked that the ball is in stock, and I know its price is 120 yuan.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Thought: I need to further inquire about the preferential policy of football</span></span><br><span class="line"><span class="string">        Action: read_store_promotions: football</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Observation: The current promotional policy for this ball is: 10% discount upon purchase</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Thought: Now I need to combine the selling price and preferential policies of the ball to calculate the final transaction price</span></span><br><span class="line"><span class="string">        Action: calculate: 120 * 0.9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Observation: The final price of the ball was 108.0 yuan</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Thought: I now have all the information needed to answer the question.</span></span><br><span class="line"><span class="string">        Answer:  According to your enquiry, we do sell soccer balls in our store, the current price is 120 yuan. At present, we offer a 10% discount on the purchase of football. Therefore, if you buy now, the final transaction price will be 108 yuan.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Note: You must reply to the final result in Chinese</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Now it&#x27;s your turn:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.strip()</span><br><span class="line">        <span class="variable language_">self</span>.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="variable language_">self</span>.system_prompt&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __call__ 方法可以使得一个类的实例可以被像函数那样调用，提供了类实例的“可调用”能力。</span></span><br><span class="line">    <span class="comment"># 当使用类实例后面跟着括号并传递参数时，就会触发 __call__ 方法。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="variable language_">self</span>.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: message&#125;)</span><br><span class="line">        response = <span class="variable language_">self</span>.execute()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(response, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">f&quot;Expected string response from execute, got <span class="subst">&#123;<span class="built_in">type</span>(response)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: response&#125;)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查 self.client 是否是 OllamaClient 类的一个实例。这是类型安全的一种做法，确保 self.client 具有执行接下来代码所需的方法和属性。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(<span class="variable language_">self</span>.client, OllamaClient):</span><br><span class="line">            completion = <span class="variable language_">self</span>.client.chat_completions_create(</span><br><span class="line">                model=<span class="variable language_">self</span>.config[<span class="string">&quot;ollama&quot;</span>][<span class="string">&#x27;model_name&#x27;</span>],</span><br><span class="line">                messages=<span class="variable language_">self</span>.messages,</span><br><span class="line">                temperature=<span class="variable language_">self</span>.config[<span class="string">&quot;ollama&quot;</span>][<span class="string">&#x27;temperature&#x27;</span>]</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果 completion 是一个字典并且包含一个键为 message 的项，则尝试从 message 中提取 content 键对应的值。如果没有 content，则返回一个空字符串。</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(completion, <span class="built_in">dict</span>) <span class="keyword">and</span> <span class="string">&#x27;message&#x27;</span> <span class="keyword">in</span> completion:</span><br><span class="line">                <span class="keyword">return</span> completion[<span class="string">&#x27;message&#x27;</span>].get(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="comment"># 如果 completion 直接是一个字符串，则直接返回这个字符串。</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(completion, <span class="built_in">str</span>):</span><br><span class="line">                <span class="keyword">return</span> completion</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unexpected response structure from OllamaClient: <span class="subst">&#123;completion&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 使用 OpenAI 的 GPT 系列模型</span></span><br><span class="line">            completion = <span class="variable language_">self</span>.client.chat.completions.create(</span><br><span class="line">                model=<span class="variable language_">self</span>.config[<span class="string">&#x27;openai&#x27;</span>][<span class="string">&#x27;model_name&#x27;</span>],</span><br><span class="line">                messages=<span class="variable language_">self</span>.messages,</span><br><span class="line">            )</span><br><span class="line">            response = completion.choices[<span class="number">0</span>].message.content</span><br><span class="line">            <span class="keyword">if</span> response != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> completion.choices[<span class="number">0</span>].message.content</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;当前没有正常的生成回复，请重新思考当前的问题，并再次进行尝试&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-主代码设计"><a href="#3-3-主代码设计" class="headerlink" title="3.3 主代码设计"></a>3.3 主代码设计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 加载配置文件，获取API相关配置</span></span><br><span class="line">    config = load_config()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取服务端实例（支持 OpenAI API 或 Ollama Restful API）</span></span><br><span class="line">        client = get_client(config)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建客服代理实例</span></span><br><span class="line">        agent = CustomerServiceAgent(client, config)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 初始化失败时的异常处理</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error initializing the AI client: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Please check your configuration and ensure the AI service is running.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义工具集，每个工具对应一个具体功能的函数</span></span><br><span class="line">    tools = &#123;</span><br><span class="line">        <span class="string">&quot;query_by_product_name&quot;</span>: query_by_product_name,  <span class="comment"># 查询商品信息</span></span><br><span class="line">        <span class="string">&quot;read_store_promotions&quot;</span>: read_store_promotions,  <span class="comment"># 查询商店促销信息</span></span><br><span class="line">        <span class="string">&quot;calculate&quot;</span>: calculate,  <span class="comment"># 计算最终价格</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主循环：允许用户多次提问</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        query = <span class="built_in">input</span>(<span class="string">&quot;输入您的问题或输入 &#x27;退出&#x27; 来结束: &quot;</span>)  <span class="comment"># 获取用户输入</span></span><br><span class="line">        <span class="keyword">if</span> query.lower() == <span class="string">&#x27;退出&#x27;</span>:  <span class="comment"># 支持输入“退出”来结束程序</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        iteration = <span class="number">0</span></span><br><span class="line">        max_iterations = get_max_iterations(config)  <span class="comment"># 获取配置中允许的最大迭代次数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 内部循环处理单个用户问题，支持复杂问题的多轮解析</span></span><br><span class="line">        <span class="keyword">while</span> iteration &lt; max_iterations:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 通过Agent处理用户输入，生成初步结果</span></span><br><span class="line">                result = agent(query)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;result:<span class="subst">&#123;result&#125;</span>&quot;</span>)  <span class="comment"># 打印AI生成的结果，方便调试</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 正则表达式识别“Action”操作指令</span></span><br><span class="line">                action_re = re.<span class="built_in">compile</span>(<span class="string">&#x27;^Action: (\w+): (.*)$&#x27;</span>)</span><br><span class="line">                actions = [action_re.<span class="keyword">match</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> result.split(<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">if</span> action_re.<span class="keyword">match</span>(a)]</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 如果识别到Action指令，解析工具名和参数</span></span><br><span class="line">                <span class="keyword">if</span> actions:</span><br><span class="line">                    action_parts = result.split(<span class="string">&quot;Action:&quot;</span>, <span class="number">1</span>)[<span class="number">1</span>].strip().split(<span class="string">&quot;: &quot;</span>, <span class="number">1</span>)</span><br><span class="line">                    tool_name = action_parts[<span class="number">0</span>]  <span class="comment"># 提取工具名称</span></span><br><span class="line">                    tool_args = action_parts[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(action_parts) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;&quot;</span>  <span class="comment"># 提取参数</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 如果工具名有效，则调用对应工具</span></span><br><span class="line">                    <span class="keyword">if</span> tool_name <span class="keyword">in</span> tools:</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            <span class="comment"># 执行工具函数，获取观察结果</span></span><br><span class="line">                            observation = tools[tool_name](tool_args)</span><br><span class="line">                            query = <span class="string">f&quot;Observation: <span class="subst">&#123;observation&#125;</span>&quot;</span></span><br><span class="line">                            <span class="built_in">print</span>(query)  <span class="comment"># 打印观察结果</span></span><br><span class="line">                        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                            <span class="comment"># 工具执行失败的异常处理</span></span><br><span class="line">                            query = <span class="string">f&quot;Observation: Error occurred while executing the tool: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="comment"># 工具名未找到的情况</span></span><br><span class="line">                        query = <span class="string">f&quot;Observation: Tool &#x27;<span class="subst">&#123;tool_name&#125;</span>&#x27; not found&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 如果识别到“Answer”字段，输出最终答案并结束内部循环</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="string">&quot;Answer:&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;客服回复：<span class="subst">&#123;result.split(<span class="string">&#x27;Answer:&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].strip()&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果没有识别到有效的Action或Answer，返回提示</span></span><br><span class="line">                    query = <span class="string">&quot;Observation: No valid action or answer found. Please provide a clear action or answer.&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="comment"># 捕获主循环中的异常</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;An error occurred while processing the query: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Please check your configuration and ensure the AI service is running.&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 迭代计数，防止无限循环</span></span><br><span class="line">            iteration += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果达到最大迭代次数仍未给出答案，提示用户</span></span><br><span class="line">        <span class="keyword">if</span> iteration == max_iterations:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Reached maximum number of iterations without a final answer.&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Agent实战基础之Agent架构与落地方案</title>
      <link href="/2025/03/21/6.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BAgent%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%90%BD%E5%9C%B0%E6%96%B9%E6%A1%88/"/>
      <url>/2025/03/21/6.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BAgent%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%90%BD%E5%9C%B0%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="1-大模型产业落地趋势"><a href="#1-大模型产业落地趋势" class="headerlink" title="1. 大模型产业落地趋势"></a>1. 大模型产业落地趋势</h1><h2 id="1-1-业务融合阶段"><a href="#1-1-业务融合阶段" class="headerlink" title="1.1 业务融合阶段"></a>1.1 业务融合阶段</h2><p><strong>技术架构</strong>：各种办公类软件<br><strong>案例</strong>：  </p><ol><li><strong>智能客服系统</strong>：集成到企业客服平台，提供自动化问答和问题解决。  </li><li><strong>人力资源系统</strong>：用于员工招聘、培训、绩效管理等场景。  </li><li><strong>内部知识管理</strong>：帮助企业整理和检索内部文档、流程和知识库。</li></ol><p><strong>特点</strong>：<br>• 将AI技术嵌入现有办公软件，提升工作效率。<br>• 主要用于辅助业务流程，而非独立决策。  </p><h2 id="1-2-辅助决策阶段"><a href="#1-2-辅助决策阶段" class="headerlink" title="1.2 辅助决策阶段"></a>1.2 辅助决策阶段</h2><p><strong>技术架构</strong>：RAG（Retrieval-Augmented Generation）架构构建知识库<br><strong>案例</strong>：  </p><ol><li><strong>医生助手系统</strong>：结合医学知识库，为医生提供诊断建议和治疗方案。  </li><li><strong>法律咨询服务</strong>：基于法律条文和案例库，提供法律建议和风险评估。  </li><li><strong>金融风险管理</strong>：分析金融市场数据，提供风险预警和投资建议。  </li><li><strong>教育辅导</strong>：根据学生需求，提供个性化学习计划和答疑服务。  </li><li><strong>智能旅游系统</strong>：结合旅游数据，为用户推荐行程和景点。</li></ol><p><strong>特点</strong>：<br>• 通过知识库增强AI的决策能力，提供更专业的建议。<br>• 主要用于辅助人类决策，而非完全自主决策。  </p><h2 id="1-3-自主决策阶段"><a href="#1-3-自主决策阶段" class="headerlink" title="1.3 自主决策阶段"></a>1.3 自主决策阶段</h2><p><strong>技术架构</strong>：Agent（智能代理）<br><strong>案例</strong>：<br>• <strong>自动化任务执行</strong>：如自动调度、资源分配、流程优化等。<br>• <strong>智能机器人</strong>：在无人干预的情况下完成复杂任务，如仓储管理、自动驾驶等。  </p><p><strong>特点</strong>：<br>• AI能够独立分析、决策和执行任务，无需人类干预。<br>• 适用于高度自动化和复杂决策的场景。 </p><h1 id="2-Agent原理剖析"><a href="#2-Agent原理剖析" class="headerlink" title="2. Agent原理剖析"></a>2. Agent原理剖析</h1><h2 id="2-1-Agent设计理念"><a href="#2-1-Agent设计理念" class="headerlink" title="2.1 Agent设计理念"></a>2.1 Agent设计理念</h2><p><img src="/images/6.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BAgent%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%90%BD%E5%9C%B0%E6%96%B9%E6%A1%88/image-20250323003827083.png" alt="image-20250323003827083"></p><h2 id="2-2-Agent设计模式"><a href="#2-2-Agent设计模式" class="headerlink" title="2.2 Agent设计模式"></a>2.2 Agent设计模式</h2><h3 id="2-2-1-Reflection（反射模式）"><a href="#2-2-1-Reflection（反射模式）" class="headerlink" title="2.2.1 Reflection（反射模式）"></a>2.2.1 Reflection（反射模式）</h3><p><strong>定义</strong>：反射模式允许AI Agent审视自身生成的输出，并进行自我修正。这种自我监督的能力使得AI能够在执行任务时不断优化策略，提高准确性和效率。</p><p><strong>示例</strong>：一个AI Agent可能会生成一段代码，然后自我检查并修复潜在的错误，从而提升代码质量。</p><p><strong>关键点</strong>：<br>• <strong>自我监督</strong>：AI能够自我检查和修正。<br>• <strong>优化策略</strong>：通过反思，AI能够不断改进其策略。<br>• <strong>提高效率</strong>：通过减少错误和优化输出，AI能够更高效地完成任务。</p><h3 id="2-2-2-Tools-Use（工具使用模式）"><a href="#2-2-2-Tools-Use（工具使用模式）" class="headerlink" title="2.2.2 Tools Use（工具使用模式）"></a>2.2.2 Tools Use（工具使用模式）</h3><p><strong>定义</strong>：工具使用模式是指AI Agent能够调用外部工具和API来增强自身的功能。这种模式使得AI能够超越自身的知识库，通过与外部系统的交互来获取信息、执行操作或生成内容，极大地扩展了AI的应用范围和灵活性。</p><p><strong>示例</strong>：AI可以通过调用天气API来获取实时天气信息，或者通过调用翻译API来实现多语言翻译。</p><p><strong>关键点</strong>：<br>• <strong>外部工具</strong>：AI能够使用外部工具和API。<br>• <strong>增强功能</strong>：通过工具使用，AI的功能得到扩展。<br>• <strong>灵活性</strong>：AI能够适应多种任务和场景。</p><h3 id="2-2-3-思维链方式（规划模式）"><a href="#2-2-3-思维链方式（规划模式）" class="headerlink" title="2.2.3 思维链方式（规划模式）"></a>2.2.3 思维链方式（规划模式）</h3><p><strong>定义</strong>：规划模式赋予AI Agent将复杂任务分解为多个步骤并有序执行的能力。通过这种方式，AI能够更系统地处理问题，制定出有效的行动计划，并按照计划逐步推进任务完成。</p><p><strong>示例</strong>：在市场分析中，AI可以将任务分解为数据收集、数据分析、趋势预测等步骤，并逐步完成。</p><p><strong>关键点</strong>：<br>• <strong>任务分解</strong>：AI能够将复杂任务分解为多个步骤。<br>• <strong>系统处理</strong>：AI能够更系统地处理问题。<br>• <strong>有效计划</strong>：AI能够制定并执行有效的行动计划。</p><h3 id="2-2-4-多Agent（多代理模式）"><a href="#2-2-4-多Agent（多代理模式）" class="headerlink" title="2.2.4 多Agent（多代理模式）"></a>2.2.4 多Agent（多代理模式）</h3><p><strong>定义</strong>：多Agent模式涉及多个AI Agent之间的合作。通过这种模式，不同的AI Agent可以扮演不同的角色，共同完成一个复杂的任务。这种协作不仅能够模拟真实世界中的团队工作流程，还能够通过代理间的互补和协同作用，提高整体的执行效率和创新能力。</p><p><strong>示例</strong>：在项目管理中，不同的AI Agent可以分别负责任务分配、进度跟踪、资源管理等，共同完成项目。</p><p><strong>关键点</strong>：<br>• <strong>角色分工</strong>：不同的AI Agent扮演不同的角色。<br>• <strong>团队协作</strong>：模拟真实世界中的团队工作流程。<br>• <strong>协同作用</strong>：通过代理间的互补和协同，提高效率和创新能力。</p><h1 id="3-Agent架构设计落地方案"><a href="#3-Agent架构设计落地方案" class="headerlink" title="3. Agent架构设计落地方案"></a>3. Agent架构设计落地方案</h1><table><thead><tr><th><strong>方案</strong></th><th><strong>技术选型</strong></th></tr></thead><tbody><tr><td><strong>方案1</strong>：适合公司内部快速实现一些简单的需求，但不开源。</td><td>COZE (扣子)，Dify 等</td></tr><tr><td><strong>方案2</strong>：适合公司内部快速实现一些需求，可基于其进行二次开发。</td><td>MetaGPT, AutoGen 等</td></tr><tr><td><strong>方案3</strong>：适合专职的做大模型应用开发工程师。</td><td>LangChain (Agents, LangGraph) 等，Spring AI Alibaba，Swarm</td></tr><tr><td><strong>方案4</strong>：适合专职的做大模型应用开发工程师。</td><td>不用</td></tr></tbody></table><h1 id="4-o1模型的出现对Agent发展的作用"><a href="#4-o1模型的出现对Agent发展的作用" class="headerlink" title="4. o1模型的出现对Agent发展的作用"></a>4. o1模型的出现对Agent发展的作用</h1><p><img src="/images/6.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BAgent%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%90%BD%E5%9C%B0%E6%96%B9%E6%A1%88/image-20250323005439172.png" alt="image-20250323005439172"></p><p><img src="/images/6.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8BAgent%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%90%BD%E5%9C%B0%E6%96%B9%E6%A1%88/image-20250323005451194.png" alt="image-20250323005451194"></p>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Agent实战基础之多模态大模型实战</title>
      <link href="/2025/03/21/5.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%9A%E6%A8%A1%E6%80%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98/"/>
      <url>/2025/03/21/5.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%9A%E6%A8%A1%E6%80%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.Agent实战基础之提示词工程和Function进阶实战</title>
      <link href="/2025/03/17/4.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%92%8CFunction%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98/"/>
      <url>/2025/03/17/4.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%92%8CFunction%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-面向目标架构"><a href="#1-面向目标架构" class="headerlink" title="1. 面向目标架构"></a>1. 面向目标架构</h1><h2 id="1-1-面向目标开发流程"><a href="#1-1-面向目标开发流程" class="headerlink" title="1.1 面向目标开发流程"></a>1.1 面向目标开发流程</h2><p><img src="/images/4.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%92%8CFunction%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98/image-20250318093723927.png" alt="image-20250318093723927"></p><p>大模型的核心目标是 自动规划、自动调用外部工具、自动生成外部函数，实现智能化执行任务。开发过程中，主要包含以下阶段：</p><ol><li>大模型自动规划</li><li>大模型自动调用外部工具执行</li><li>大模型自动生成外部函数</li></ol><h2 id="1-2-技术选型"><a href="#1-2-技术选型" class="headerlink" title="1.2 技术选型"></a>1.2 技术选型</h2><h3 id="1-2-1-提示词工程与外部函数"><a href="#1-2-1-提示词工程与外部函数" class="headerlink" title="1.2.1 提示词工程与外部函数"></a>1.2.1 提示词工程与外部函数</h3><ol><li><p>提示词工程</p><ul><li>设计清晰、逻辑严谨的 Prompt，引导大模型按目标输出。</li></ul></li><li><p>Function Call</p><ul><li>让大模型在对话过程中调用外部函数，完成复杂数据处理、查询、计算等任务。</li></ul></li><li><p>GLM-4模型</p><ul><li><p>特点：中上等模型，性能优异，中文理解能力强。</p></li><li><p>安装方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install zhipuai</span><br></pre></td></tr></table></figure></li><li><p>接口调用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> zhipuai <span class="keyword">import</span> ZhipuAI</span><br><span class="line"></span><br><span class="line">client = ZhipuAI(api_key=<span class="string">&quot;your_api_key&quot;</span>)</span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;glm-4&quot;</span>,</span><br><span class="line">    messages=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请帮我分析这组数据&quot;</span>&#125;]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>LangChain开发框架</p><ul><li><p>特点：提供多种大模型功能封装，包括记忆、代理、工具调用、RAG等能力。</p></li><li><p>安装方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install langchain</span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line">llm = ChatOpenAI(temperature=<span class="number">0.7</span>)</span><br><span class="line">result = llm.predict(<span class="string">&quot;如何实现自动化数据分析?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="1-2-2-AGENT-设计"><a href="#1-2-2-AGENT-设计" class="headerlink" title="1.2.2 AGENT 设计"></a>1.2.2 AGENT 设计</h3><p>Agent 是自主执行任务的智能体，具备以下能力：</p><ul><li>目标规划：根据用户需求拆解任务，规划执行路径。</li><li>环境感知：根据外部输入调整行为。</li><li>工具调用：动态调用外部工具或函数，完成子任务。</li><li>自主决策：根据上下文和执行结果调整行动策略。</li></ul><h3 id="1-2-3-RAG-设计"><a href="#1-2-3-RAG-设计" class="headerlink" title="1.2.3 RAG 设计"></a>1.2.3 RAG 设计</h3><p>RAG (Retrieval-Augmented Generation)是一种结合检索与生成的方法，提升模型对事实性、知识性的回答能力。</p><ul><li>检索 (Retrieval)：从外部数据库、文档、API等来源查找相关信息。</li><li>生成 (Generation)：在检索到的信息基础上生成高质量回答。</li></ul><h3 id="1-2-4-微调-Fine-tuning"><a href="#1-2-4-微调-Fine-tuning" class="headerlink" title="1.2.4 微调 (Fine-tuning)"></a>1.2.4 微调 (Fine-tuning)</h3><p>微调是针对特定任务优化大模型，让它在指定场景表现更优。</p><ul><li>数据准备：收集领域数据，格式化成训练样本。</li><li>训练执行：用目标任务数据对模型继续训练。</li><li>性能评估：测试微调后的模型表现，确保提升效果。</li></ul><h3 id="1-2-5-预训练-Pre-training"><a href="#1-2-5-预训练-Pre-training" class="headerlink" title="1.2.5 预训练 (Pre-training)"></a>1.2.5 预训练 (Pre-training)</h3><p>预训练是大规模数据训练阶段，让模型具备基础语言理解、推理、知识存储能力。</p><ul><li>大规模文本训练（新闻、百科、论文、对话数据等）</li><li>多任务训练（翻译、问答、摘要、对话、代码理解等）</li><li>跨模态训练（图文理解、图生文、文生图等）</li></ul><h1 id="2-Function-Call-进阶"><a href="#2-Function-Call-进阶" class="headerlink" title="2. Function Call 进阶"></a>2. Function Call 进阶</h1><h2 id="2-1-外部函数调用流程回顾"><a href="#2-1-外部函数调用流程回顾" class="headerlink" title="2.1 外部函数调用流程回顾"></a>2.1 外部函数调用流程回顾</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> zhipuai <span class="keyword">import</span> ZhipuAI</span><br><span class="line"></span><br><span class="line">api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line"></span><br><span class="line">client = ZhipuAI(api_key=api_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例函数 - 孙悟空算法</span></span><br><span class="line"><span class="comment"># 该函数用于接收一个数据表（字符串形式），对数据进行处理并返回JSON格式结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sunwukong_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    孙悟空算法函数，该函数定义了数据集计算过程</span></span><br><span class="line"><span class="string">    :param data: 必要参数，表示带入计算的数据表，用字符串进行表示</span></span><br><span class="line"><span class="string">    :return: sunwukong_function函数计算后的结果，返回结果为JSON格式的Dataframe类型对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new[<span class="string">&#x27;x1&#x27;</span>] * <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个示例数据集</span></span><br><span class="line"></span><br><span class="line">df_str = pd.DataFrame(&#123;<span class="string">&#x27;x1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;x2&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>]&#125;).to_string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个完整的对话流程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_conversation</span>():</span><br><span class="line">    <span class="comment"># Step 1: 初始化对话，发送数据集和函数信息</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;数据集data：%s，数据集以字符串形式呈现&quot;</span> % df_str&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请在数据集data上执行孙悟空算法&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义工具（函数）</span></span><br><span class="line">    tools = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">            <span class="string">&quot;function&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;sunwukong_function&quot;</span>,</span><br><span class="line">                <span class="string">&quot;description&quot;</span>: <span class="string">&quot;用于执行孙悟空算法函数，定义了一种特殊的数据集计算过程&quot;</span>,</span><br><span class="line">                <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;data&quot;</span>: &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;执行孙悟空算法的数据集&quot;</span>&#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;data&quot;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2: 发送初次请求</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;glm-4&quot;</span>,</span><br><span class="line">        messages=messages,</span><br><span class="line">        tools=tools,</span><br><span class="line">        tool_choice=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取模型返回的消息</span></span><br><span class="line">    response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line">    tool_calls = response_message.tool_calls</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3: 判断模型是否要调用函数</span></span><br><span class="line">    <span class="keyword">if</span> tool_calls:</span><br><span class="line">        available_functions = &#123;<span class="string">&quot;sunwukong_function&quot;</span>: sunwukong_function&#125;  <span class="comment"># 这里可以扩展多种函数</span></span><br><span class="line">        messages.append(response_message.model_dump())  <span class="comment"># 将模型返回结果加入消息列表</span></span><br><span class="line">        <span class="built_in">print</span>(messages)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 4: 执行函数，并将返回结果传回模型</span></span><br><span class="line">        <span class="keyword">for</span> tool_call <span class="keyword">in</span> tool_calls:</span><br><span class="line">            function_name = tool_call.function.name</span><br><span class="line">            function_to_call = available_functions[function_name]</span><br><span class="line">            function_args = json.loads(tool_call.function.arguments)</span><br><span class="line">            function_response = function_to_call(**function_args)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将函数结果传回对话上下文</span></span><br><span class="line">            messages.append(&#123;</span><br><span class="line">                <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span>,</span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: function_name,</span><br><span class="line">                <span class="string">&quot;content&quot;</span>: function_response,</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 5: 发送最终请求，获取完整回答</span></span><br><span class="line">        second_response = client.chat.completions.create(</span><br><span class="line">            model=<span class="string">&quot;glm-4&quot;</span>,</span><br><span class="line">            messages=messages,</span><br><span class="line">            tools=tools,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> second_response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行对话流程并输出最终结果</span></span><br><span class="line">result = run_conversation()</span><br><span class="line"><span class="built_in">print</span>(result.choices[<span class="number">0</span>].message.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用StringIO将字符串转换为文件对象</span></span><br><span class="line"></span><br><span class="line">df_str = <span class="string">&#x27;\n    x1\n0  10\n1  20\n.&#x27;</span></span><br><span class="line">data = io.StringIO(df_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用read_csv()函数读取数据，并设置第一列为索引</span></span><br><span class="line"></span><br><span class="line">df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(df_new)</span><br></pre></td></tr></table></figure><blockquote><p>OpenAI 与ZhipuAI 的区别</p><table><thead><tr><th>对比项</th><th>OpenAI 版本</th><th>ZhipuAI 版本</th></tr></thead><tbody><tr><td>第一轮请求</td><td>✅ 需要 <code>tools</code></td><td>✅ 需要 <code>tools</code></td></tr><tr><td>第二轮请求</td><td>❌ 不带 <code>tools</code></td><td>✅ 继续带 <code>tools</code></td></tr><tr><td>消息追加方式</td><td>直接追加</td><td><code>model_dump()</code> 转字典</td></tr></tbody></table></blockquote><h2 id="2-2-四大挑战"><a href="#2-2-四大挑战" class="headerlink" title="2.2 四大挑战"></a>2.2 四大挑战</h2><h3 id="2-2-1-意图识别"><a href="#2-2-1-意图识别" class="headerlink" title="2.2.1 意图识别"></a>2.2.1 意图识别</h3><h4 id="2-2-1-1-误判：是否需要外部函数"><a href="#2-2-1-1-误判：是否需要外部函数" class="headerlink" title="2.2.1.1 误判：是否需要外部函数"></a>2.2.1.1 误判：是否需要外部函数</h4><p>策略1：提供高质量的 JSON Schema</p><ol><li>关键词引导<br> 大模型（如 GLM-4）可能依赖 embedding 相似度选择函数，因此：<ul><li>在 prompt 中嵌入与函数名称高度一致的关键词，提高命中率。</li><li>设置独特的关键词（编号、专有名词等），避免与其他函数混淆。</li></ul></li><li>函数分类标记<br> 在函数名称或描述中增加分类前缀，如 user_、admin_、data_ 等，帮助模型快速定位类别。</li><li>权重提示<br> 对常用函数增加权重提示词，如 primary、core、重要、核心业务 等。</li><li>否定句筛选<br> 在函数描述中增加否定提示，例如“当出现 XXX 语言时，此函数无效”，帮助模型避开不合适的函数。</li></ol><h4 id="2-2-1-2-误选：相似函数名称混淆"><a href="#2-2-1-2-误选：相似函数名称混淆" class="headerlink" title="2.2.1.2 误选：相似函数名称混淆"></a>2.2.1.2 误选：相似函数名称混淆</h4><p>策略2：干预模型选择</p><ol><li>自查 Prompt<br> 在用户提问前，增加“XXX 是否在你的资料库内”的预检 prompt，确认模型是否掌握该知识。</li><li>关键词匹配优先<ul><li>建立业务关键词库，检测到关键词时强制指定 tool_choice 调用特定函数。</li><li>示例场景：用户说“我要点餐”、“我要吃饭”、“服务员过来一下”，均指向 点餐 函数。</li></ul></li></ol><h4 id="2-2-1-3-结果整合失败（即使调用成功，结果仍然有误）"><a href="#2-2-1-3-结果整合失败（即使调用成功，结果仍然有误）" class="headerlink" title="2.2.1.3 结果整合失败（即使调用成功，结果仍然有误）"></a>2.2.1.3 结果整合失败（即使调用成功，结果仍然有误）</h4><p>策略3：优化消息传递格式</p><ol><li><p>旧版方法缺陷<br> 使用 tool 角色传递函数名与结果，但实验显示模型无法有效识别上下文。</p></li><li><p>新版优化方案</p><ul><li><p>改用 assistant 角色传递函数结果，配合额外提示确保模型理解返回结果的来源。</p></li><li><p>示例代码调整：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message.append(&#123;</span><br><span class="line">    <span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>,</span><br><span class="line">    <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你使用了 tools 工具，最终获得的答案是&quot;</span> + <span class="built_in">str</span>(function_response),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>调用校验</p><ul><li><p>增加“是否成功调用了函数”的检测逻辑，防止模型误判：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response_f.choices[<span class="number">0</span>].message.tool_calls[<span class="number">0</span>].function.name</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n被调用的函数是&#123;&#125;&quot;</span>.<span class="built_in">format</span>(response_f.choices[<span class="number">0</span>].message.tool_calls[<span class="number">0</span>].function.name))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n没有函数被成功调用！&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="2-2-2-海量函数"><a href="#2-2-2-海量函数" class="headerlink" title="2.2.2 海量函数"></a>2.2.2 海量函数</h3><ol><li>Token 限制问题</li><li>计算延迟问题</li><li>意图识别困难</li></ol><h4 id="2-2-2-1-优化策略"><a href="#2-2-2-1-优化策略" class="headerlink" title="2.2.2.1 优化策略"></a>2.2.2.1 优化策略</h4><ol><li><p>分层架构指导函数分割<br> 在复杂场景下按层次划分函数库：</p><ul><li>表示层（用户交互逻辑）：注册、登录、更新信息等。</li><li>业务逻辑层（核心功能）：订单管理、商品管理等。</li><li>数据访问层（数据库交互）：数据存取、查询等。</li><li>服务层（内部&#x2F;外部接口）：API 服务、第三方集成等。</li></ul><p>层级筛选流程：先通过高层次意图识别选择层级 → 再在层内精细筛选函数。</p></li><li><p>关键词分割<br> 在 JSON Schema 中引入关键词，如“章节”、“年级”等，先粗略划分函数集合。</p></li><li><p>结合向量数据库 + RAG（检索增强生成）技术</p><ul><li>预处理：将函数描述向量化，存储到向量数据库。</li><li>用户意图向量化：用户输入也进行向量化，进行语义匹配。</li><li>动态加载相关函数：从搜索结果中动态筛选可能相关的函数，再进一步调用。</li></ul></li></ol><h3 id="2-2-3-并发调用"><a href="#2-2-3-并发调用" class="headerlink" title="2.2.3 并发调用"></a>2.2.3 并发调用</h3><h4 id="2-2-3-1-串行调用"><a href="#2-2-3-1-串行调用" class="headerlink" title="2.2.3.1 串行调用"></a>2.2.3.1 串行调用</h4><ul><li>按照特定顺序执行多个函数，保持上下文连贯性。</li></ul><h4 id="2-2-3-2-并行调用"><a href="#2-2-3-2-并行调用" class="headerlink" title="2.2.3.2 并行调用"></a>2.2.3.2 并行调用</h4><ul><li>支持同时调用多个函数，汇总结果后统一返回。</li></ul><h3 id="2-2-4-响应太慢"><a href="#2-2-4-响应太慢" class="headerlink" title="2.2.4 响应太慢"></a>2.2.4 响应太慢</h3><h4 id="2-2-4-1-缓存设计"><a href="#2-2-4-1-缓存设计" class="headerlink" title="2.2.4.1 缓存设计"></a>2.2.4.1 缓存设计</h4><ul><li>针对特定场景（如高频查询、静态数据）设计缓存机制，减少重复调用。</li></ul><h4 id="2-2-4-2-动态调整调用逻辑"><a href="#2-2-4-2-动态调整调用逻辑" class="headerlink" title="2.2.4.2 动态调整调用逻辑"></a>2.2.4.2 动态调整调用逻辑</h4><ul><li>按需调整串行&#x2F;并行策略，确保关键函数优先执行。</li></ul><h4 id="2-2-4-3-延迟反馈"><a href="#2-2-4-3-延迟反馈" class="headerlink" title="2.2.4.3 延迟反馈"></a>2.2.4.3 延迟反馈</h4><ul><li>对时间敏感场景，先返回部分结果，再补充完整信息。</li></ul><h1 id="3-面向目标架构阶段"><a href="#3-面向目标架构阶段" class="headerlink" title="3. 面向目标架构阶段"></a>3. 面向目标架构阶段</h1><h2 id="3-1-以人为主，AI为辅"><a href="#3-1-以人为主，AI为辅" class="headerlink" title="3.1 以人为主，AI为辅"></a>3.1 以人为主，AI为辅</h2><p><img src="/images/4.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%92%8CFunction%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98/image-20250319112047791.png" alt="image-20250319112047791"></p><ol><li><p>人梳理需求</p></li><li><p>大模型帮忙写代码</p></li><li><p>人审核代码</p></li></ol><h3 id="3-1-1-提示词案例："><a href="#3-1-1-提示词案例：" class="headerlink" title="3.1.1 提示词案例："></a>3.1.1 提示词案例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/root/autodl-tmp/面向目标架构落地/data/my_mail数据字典.md&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    md_content = f.read()</span><br><span class="line">    </span><br><span class="line">user_example_content = <span class="string">&quot;请帮我编写一个python函数，用于查看我的mailbox邮箱中最后一封邮件信息，函数要求如下：\</span></span><br><span class="line"><span class="string">                        1.函数参数userId，userId是字符串参数，默认情况下取值为&#x27;me&#x27;，表示查看我的邮件；\</span></span><br><span class="line"><span class="string">                        2.函数返回结果是一个包含最后一封邮件信息的对象，返回结果本身必须是一个json格式对象；\</span></span><br><span class="line"><span class="string">                        3.请将全部功能封装在一个函数内；\</span></span><br><span class="line"><span class="string">                        4.请在函数编写过程中，在函数内部加入中文编写的详细的函数说明文档，用于说明函数功能、函数参数情况以及函数返回结果等信息；&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;%s.py&#x27;</span> % <span class="string">&#x27;code/get_latest_email&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    assistant_example_content = f.read()</span><br><span class="line"></span><br><span class="line">user_content = <span class="string">&quot;请帮我编写一个python函数，用于查看我的mailbox邮箱中总共有多少封邮件，函数要求如下：\</span></span><br><span class="line"><span class="string">                1.函数参数userId，userId是字符串参数，默认情况下取值为&#x27;me&#x27;，表示查看我的邮件；\</span></span><br><span class="line"><span class="string">                2.函数返回结果是当前邮件总数，返回结果本身必须是一个json格式对象；\</span></span><br><span class="line"><span class="string">                3.请将全部功能封装在一个函数内；\</span></span><br><span class="line"><span class="string">                4.请在函数编写过程中，在函数内部加入中文编写的详细的函数说明文档，用于说明函数功能、函数参数情况以及函数返回结果等信息；&quot;</span></span><br><span class="line"></span><br><span class="line">messages=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: md_content&#125;,</span><br><span class="line">          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example_user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_example_content&#125;,</span><br><span class="line">          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example_assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: assistant_example_content&#125;,</span><br><span class="line">          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example_user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_content&#125;]</span><br></pre></td></tr></table></figure><h2 id="3-2-Al和人相互配合"><a href="#3-2-Al和人相互配合" class="headerlink" title="3.2 Al和人相互配合"></a>3.2 Al和人相互配合</h2><p><img src="/images/4.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%92%8CFunction%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98/image-20250319112109227.png" alt="image-20250319112109227"></p><ol><li><p>大模型梳理需求</p></li><li><p>大模型帮忙写代码</p></li><li><p>人审核代码</p></li></ol><h3 id="3-2-1-借助Few-Shot"><a href="#3-2-1-借助Few-Shot" class="headerlink" title="3.2.1 借助Few-Shot"></a>3.2.1 借助Few-Shot</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">get_email_input = <span class="string">&quot;请帮我查下邮箱里最后一封邮件内容。&quot;</span></span><br><span class="line"></span><br><span class="line">get_email_out = <span class="string">&quot;请帮我编写一个python函数，用于查看我的mailbox邮箱中最后一封邮件信息，函数要求如下：\</span></span><br><span class="line"><span class="string">                 1.函数参数userId，userId是字符串参数，默认情况下取值为&#x27;me&#x27;，表示查看我的邮件；\</span></span><br><span class="line"><span class="string">                 2.函数返回结果是一个包含最后一封邮件信息的对象，返回结果本身必须是一个json格式对象；\</span></span><br><span class="line"><span class="string">                 3.请将全部功能封装在一个函数内；\</span></span><br><span class="line"><span class="string">                 4.请在函数编写过程中，在函数内部加入中文编写的详细的函数说明文档，用于说明函数功能、函数参数情况以及函数返回结果等信息；&quot;</span></span><br><span class="line"></span><br><span class="line">email_counts_input = <span class="string">&quot;请帮我查下邮箱里现在总共有多少封邮件。&quot;</span></span><br><span class="line"></span><br><span class="line">email_counts_out = <span class="string">&quot;请帮我编写一个python函数，用于查看我的mailbox邮箱中总共有多少封邮件，函数要求如下：\</span></span><br><span class="line"><span class="string">                    1.函数参数userId，userId是字符串参数，默认情况下取值为&#x27;me&#x27;，表示查看我的邮件；\</span></span><br><span class="line"><span class="string">                    2.函数返回结果是当前邮件总数，返回结果本身必须是一个json格式对象；\</span></span><br><span class="line"><span class="string">                    3.请将全部功能封装在一个函数内；\</span></span><br><span class="line"><span class="string">                    4.请在函数编写过程中，在函数内部加入中文编写的详细的函数说明文档，用于说明函数功能、函数参数情况以及函数返回结果等信息；&quot;</span></span><br><span class="line"></span><br><span class="line">user_content = <span class="string">&quot;请查下我的邮箱里是否有来陆小凤的未读邮件，并解读最近一封未读邮件的内容&quot;</span></span><br><span class="line"><span class="comment"># &#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: md_content&#125;,</span></span><br><span class="line"><span class="comment"># one-shot  few-shot</span></span><br><span class="line"></span><br><span class="line">messages_fewShot_stage1 = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">f&quot;最后输出的是一个说明，举个例子，输出格式如下：<span class="subst">&#123;email_counts_out&#125;</span>&quot;</span>&#125;,</span><br><span class="line">                           &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请模仿下列对话给出的风格，基于我的问题，把我的问题转换成一个说明。注意：不需要有额外输出&quot;</span>&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example1_user&quot;</span>, <span class="string">&quot;content&quot;</span>: get_email_input&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example1_assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: get_email_out&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example2_user&quot;</span>, <span class="string">&quot;content&quot;</span>: email_counts_input&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example2_assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: email_counts_out&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example_user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_content&#125;]</span><br></pre></td></tr></table></figure><h3 id="3-2-2-借助LtM"><a href="#3-2-2-借助LtM" class="headerlink" title="3.2.2 借助LtM"></a>3.2.2 借助LtM</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">system_content1 = <span class="string">&quot;为了更好编写满足用户需求的python函数，我们需要先识别用户需求中的变量，以作为python函数的参数。需要注意的是，当前编写的函数中涉及到的邮件收发查阅等功能，都是通过Python来完成。&quot;</span></span><br><span class="line"></span><br><span class="line">input1 = <span class="string">&quot;请帮我查下mailbox邮箱里最后一封邮件内容。&quot;</span></span><br><span class="line"></span><br><span class="line">pi1 = <span class="string">&quot;当前需求中可以作为函数参数的是：1.查看谁的邮箱。&quot;</span></span><br><span class="line"></span><br><span class="line">input2 = <span class="string">&quot;请帮我给西门吹雪发送一封邮件，请他明天早上9点半来我办公室开会，商量下半年技术开发计划。&quot;</span></span><br><span class="line"></span><br><span class="line">pi2 = <span class="string">&quot;当前需求中可以作为函数参数的是：1.发送邮件的对象；2.发送邮件的主题；3.邮件具体内容&quot;</span></span><br><span class="line"></span><br><span class="line">input3 = <span class="string">&quot;请查下我的邮箱里是否有来自陆小凤的未读邮件，并解读最近一封未读邮件的内容。&quot;</span></span><br><span class="line"></span><br><span class="line">messages_CD = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_content1&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example1_user&quot;</span>, <span class="string">&quot;content&quot;</span>: input1&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example1_assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: pi1&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example2_user&quot;</span>, <span class="string">&quot;content&quot;</span>: input2&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example2_assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: pi2&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;example_user&quot;</span>, <span class="string">&quot;content&quot;</span>: input3&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>​如果在Few-shot的提示下，第一阶段的指令翻译不是每一次都能给出令人满意的结果，首先我们想到的解决问题的办法就是提供一些更加强有力的提示方法：例如LtM提示法。</p><p>​根据LtM多段提示的策略，外加结合当前指令翻译任务考虑，一种更有希望能够引导模型能够顺利完成指令翻译流程的提示方法是：先引导模型拆解当前需求中的“变量”作为后续函数的参数，然后再基于已经确定的变量，引导模型完成翻译工作。 </p><p>​其实就整个指令翻译任务来说，最难的地方也就在于函数参数的理解过程，而一旦模型能够准确的翻译出外部函数需要哪些参数，其他部分的翻译任务自然迎刃而解。</p></blockquote><h3 id="3-2-3全自动功能函数编程"><a href="#3-2-3全自动功能函数编程" class="headerlink" title="3.2.3全自动功能函数编程"></a>3.2.3全自动功能函数编程</h3><h4 id="3-2-3-1-提示词管理"><a href="#3-2-3-1-提示词管理" class="headerlink" title="3.2.3.1 提示词管理"></a>3.2.3.1 提示词管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一阶段LtM_CD阶段提示词及输出结果</span></span><br><span class="line">get_latest_email_CD_input = <span class="string">&quot;请帮我查下mailbox邮箱里最新一封邮件内容。&quot;</span></span><br><span class="line">get_latest_email_pi = <span class="string">&quot;当前需求中可以作为函数参数的是：1.查看谁的邮箱。&quot;</span></span><br><span class="line">get_latest_email_messages_CD = [</span><br><span class="line">                                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: get_latest_email_CD_input&#125;,</span><br><span class="line">                                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: get_latest_email_pi&#125;</span><br><span class="line">                                ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一阶段LtM_CM阶段提示词及输出结果</span></span><br><span class="line">get_latest_email_CM_input = get_latest_email_CD_input + get_latest_email_pi</span><br><span class="line">get_latest_email_description = <span class="string">&quot;请帮我编写一个python函数，用于查看我的mailbox邮箱中最后一封邮件信息，函数要求如下：\</span></span><br><span class="line"><span class="string">                 1.函数参数userId，userId是字符串参数，默认情况下取值为&#x27;me&#x27;，表示查看我的邮件；\</span></span><br><span class="line"><span class="string">                 2.函数返回结果是一个包含最后一封邮件信息的对象，返回结果本身必须是一个json格式对象；\</span></span><br><span class="line"><span class="string">                 3.请将全部功能封装在一个函数内；\</span></span><br><span class="line"><span class="string">                 4.请在函数编写过程中，在函数内部加入中文编写的详细的函数说明文档，用于说明函数功能、函数参数情况以及函数返回结果等信息；&quot;</span></span><br><span class="line">get_latest_email_messages_CM = [</span><br><span class="line">                                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: get_latest_email_CM_input&#125;,</span><br><span class="line">                                &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>:get_latest_email_description&#125;</span><br><span class="line">                                ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段提示词及输出结果</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s/%s_module.py&#x27;</span> % (<span class="string">&#x27;get_latest_email&#x27;</span>, <span class="string">&#x27;get_latest_email&#x27;</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    get_latest_email_function = f.read()</span><br><span class="line">get_latest_email_messages = [</span><br><span class="line">                             &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: get_latest_email_description&#125;,</span><br><span class="line">                             &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>:get_latest_email_function&#125;</span><br><span class="line">                             ]  </span><br><span class="line"></span><br><span class="line">get_latest_email_prompt = &#123;</span><br><span class="line">                            <span class="string">&quot;stage1_CD&quot;</span>: get_latest_email_messages_CD,</span><br><span class="line">                            <span class="string">&quot;stage1_CM&quot;</span>: get_latest_email_messages_CM,</span><br><span class="line">                            <span class="string">&quot;stage2&quot;</span>: get_latest_email_messages</span><br><span class="line">                          &#125;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s/%s_prompt.json&#x27;</span> % (<span class="string">&#x27;get_latest_email&#x27;</span>,<span class="string">&#x27;get_latest_email&#x27;</span>), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(get_latest_email_prompt, f)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们当前提示流程中各阶段的系统提示消息，也需要对其进行整理和本地保存：</span></span><br><span class="line"></span><br><span class="line">system_messages = &#123;<span class="string">&quot;system_message_CD&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: md_content&#125;], </span><br><span class="line">                   <span class="string">&quot;system_message_CM&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>:md_content &#125;], </span><br><span class="line">                   <span class="string">&quot;system_message&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>:md_content&#125;]&#125;</span><br><span class="line">               </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s.json&#x27;</span> % <span class="string">&#x27;system_messages&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(system_messages, f)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义提示词管理的辅助函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_to_tested</span>(<span class="params">function_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将函数同名文件夹由untested文件夹转移至tested文件夹内。\</span></span><br><span class="line"><span class="string">    完成转移则说明函数通过测试，可以使用。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将函数代码写入glmLesson.py文件中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        function_code = f.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 源文件夹路径</span></span><br><span class="line">    src_dir = <span class="string">&#x27;./functions/untested functions/%s&#x27;</span> % function_name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目标文件夹路径</span></span><br><span class="line">    dst_dir = <span class="string">&#x27;./functions/tested functions/%s&#x27;</span> % function_name</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 移动文件夹</span></span><br><span class="line">    shutil.move(src_dir, dst_dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_function_code</span>(<span class="params">s, detail=<span class="number">0</span>, tested=<span class="literal">False</span>, g=<span class="built_in">globals</span>(<span class="params"></span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    函数提取函数，同时执行函数内容，可以选择打印函数信息，并选择代码保存的地址</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_code</span>(<span class="params">s</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        如果输入的字符串s是一个包含Python代码的Markdown格式字符串，提取出代码部分。</span></span><br><span class="line"><span class="string">        否则，返回原字符串。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数:</span></span><br><span class="line"><span class="string">        s: 输入的字符串。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回:</span></span><br><span class="line"><span class="string">        提取出的代码部分，或原字符串。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 判断字符串是否是Markdown格式</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;```python&#x27;</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">&#x27;Python&#x27;</span> <span class="keyword">in</span> s <span class="keyword">or</span><span class="string">&#x27;PYTHON&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">            <span class="comment"># 找到代码块的开始和结束位置</span></span><br><span class="line">            code_start = s.find(<span class="string">&#x27;def&#x27;</span>)</span><br><span class="line">            code_end = s.find(<span class="string">&#x27;```\n&#x27;</span>, code_start)</span><br><span class="line">            <span class="comment"># 提取代码部分</span></span><br><span class="line">            code = s[code_start:code_end]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果字符串不是Markdown格式，返回原字符串</span></span><br><span class="line">            code = s</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> code</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取代码字符串</span></span><br><span class="line">    code = extract_code(s)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取函数名称</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(<span class="string">r&#x27;def (\w+)&#x27;</span>, code)</span><br><span class="line">    function_name = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在untested文件夹内创建函数同名文件夹</span></span><br><span class="line">    directory = <span class="string">&#x27;./functions/untested functions/%s&#x27;</span> % function_name</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">        os.makedirs(directory)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将函数写入本地</span></span><br><span class="line">    <span class="keyword">if</span> tested == <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(code)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 调用remove_to_test函数将函数文件夹转移至tested文件夹内</span></span><br><span class="line">        remove_to_tested(function_name)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(code)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行该函数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">exec</span>(code, g)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;An error occurred while executing the code:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印函数名称</span></span><br><span class="line">    <span class="keyword">if</span> detail == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The function name is:%s&quot;</span> % function_name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> detail == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> tested == <span class="literal">False</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                content = f.read()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:   </span><br><span class="line">                content = f.read()</span><br><span class="line">                </span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> function_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_functions</span>(<span class="params">tested=<span class="literal">False</span>, if_print=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    打印tested或untested文件夹内全部函数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    current_directory = os.getcwd()</span><br><span class="line">    <span class="keyword">if</span> tested == <span class="literal">False</span>:</span><br><span class="line">        directory = current_directory + <span class="string">&#x27;/functions/untested functions&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        directory = current_directory + <span class="string">&#x27;/functions/tested functions&#x27;</span></span><br><span class="line">    files_and_directories = os.listdir(directory)</span><br><span class="line">    <span class="comment"># 过滤结果，只保留.py文件和非__pycache__文件夹</span></span><br><span class="line">    files_and_directories = files_and_directories = [name <span class="keyword">for</span> name <span class="keyword">in</span> files_and_directories <span class="keyword">if</span> (os.path.splitext(name)[<span class="number">1</span>] == <span class="string">&#x27;.py&#x27;</span> <span class="keyword">or</span> os.path.isdir(os.path.join(directory, name))) <span class="keyword">and</span> name != <span class="string">&quot;.ipynb_checkpoints&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> if_print != <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files_and_directories:</span><br><span class="line">            <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> files_and_directories</span><br></pre></td></tr></table></figure><h4 id="3-2-3-2-code-generate全自动编程函数创建方法"><a href="#3-2-3-2-code-generate全自动编程函数创建方法" class="headerlink" title="3.2.3.2 code_generate全自动编程函数创建方法"></a>3.2.3.2 code_generate全自动编程函数创建方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">code_generate</span>(<span class="params">req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=<span class="string">&#x27;glm-4&#x27;</span>, g=<span class="built_in">globals</span>(<span class="params"></span>), detail=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Function calling外部函数自动创建函数，可以根据用户的需求，直接将其翻译为Chat模型可以直接调用的外部函数代码。</span></span><br><span class="line"><span class="string">    :param req: 必要参数，字符串类型，表示输入的用户需求；</span></span><br><span class="line"><span class="string">    :param few_shot: 可选参数，默认取值为字符串all，用于描述Few-shot提示示例的选取方案，当输入字符串all时，则代表提取当前外部函数库中全部测试过的函数作为Few-shot；\</span></span><br><span class="line"><span class="string">    而如果输入的是一个包含了多个函数名称的list，则表示使用这些函数作为Few-shot。</span></span><br><span class="line"><span class="string">    :param model: 可选参数，表示调用的Chat模型，默认选取glm-4；</span></span><br><span class="line"><span class="string">    :param g: 可选参数，表示extract_function_code函数作用域，默认为globals()，即在当前操作空间全域内生效；</span></span><br><span class="line"><span class="string">    :param detail: 可选参数，默认取值为0，还可以取值为1，表示extract_function_code函数打印新创建的外部函数细节；</span></span><br><span class="line"><span class="string">    :return：新创建的函数名称。需要注意的是，在函数创建时，该函数也会在当前操作空间被定义，后续可以直接调用；</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取提示示例的函数名称</span></span><br><span class="line">    <span class="keyword">if</span> few_shot == <span class="string">&#x27;all&#x27;</span>:</span><br><span class="line">        few_shot_functions_name = show_functions(tested=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span>(few_shot) == <span class="built_in">list</span>:</span><br><span class="line">        few_shot_functions_name = few_shot</span><br><span class="line">    <span class="comment"># few_shot_functions = [globals()[name] for name in few_shot_functions_name]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取各阶段系统提示</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/system_messages.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        system_messages = json.load(f)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 各阶段提示message对象</span></span><br><span class="line">    few_shot_messages_CM = []</span><br><span class="line">    few_shot_messages_CD = []</span><br><span class="line">    </span><br><span class="line">    few_shot_messages = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 先保存第一条消息，也就是system message</span></span><br><span class="line">    few_shot_messages_CD += system_messages[<span class="string">&quot;system_message_CD&quot;</span>]</span><br><span class="line">    few_shot_messages_CM += system_messages[<span class="string">&quot;system_message_CM&quot;</span>]</span><br><span class="line">    few_shot_messages += system_messages[<span class="string">&quot;system_message&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建不同阶段提示message</span></span><br><span class="line">    <span class="keyword">for</span> function_name <span class="keyword">in</span> few_shot_functions_name:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s/%s_prompt.json&#x27;</span> % (function_name, function_name), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            msg = json.load(f)</span><br><span class="line">        few_shot_messages_CD += msg[<span class="string">&quot;stage1_CD&quot;</span>]</span><br><span class="line">        few_shot_messages_CM += msg[<span class="string">&quot;stage1_CM&quot;</span>]</span><br><span class="line">        few_shot_messages += msg[<span class="string">&#x27;stage2&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 读取用户需求，作为第一阶段CD环节User content</span></span><br><span class="line">    new_req_CD_input = req</span><br><span class="line">    few_shot_messages_CD.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_CD_input&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一阶段CD环节提示创建完毕，正在进行CD提示...&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 第一阶段CD环节Chat模型调用过程</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">                        model=model,</span><br><span class="line">                        messages=few_shot_messages_CD)</span><br><span class="line">    new_req_pi = response.choices[<span class="number">0</span>].message.content</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一阶段CD环节提示完毕&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 第一阶段CM环节Messages创建</span></span><br><span class="line">    new_req_CM_input = new_req_CD_input + new_req_pi</span><br><span class="line">    few_shot_messages_CM.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_CM_input&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一阶段CM环节提示创建完毕，正在进行第一阶段CM提示...&#x27;</span>)</span><br><span class="line">    <span class="comment"># 第一阶段CM环节Chat模型调用过程</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">                        model=model,</span><br><span class="line">                        messages=few_shot_messages_CM)</span><br><span class="line">    new_req_description = response.choices[<span class="number">0</span>].message.content</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一阶段CM环节提示完毕&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 第二阶段Messages创建过程</span></span><br><span class="line">    few_shot_messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_description&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第二阶段提示创建完毕，正在进行第二阶段提示...&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 第二阶段Chat模型调用过程</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">                        model=model,</span><br><span class="line">                        messages=few_shot_messages)</span><br><span class="line">    new_req_function = response.choices[<span class="number">0</span>].message.content</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第二阶段提示完毕，准备运行函数并编写提示示例&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取函数并运行，创建函数名称对象，统一都写入untested文件夹内</span></span><br><span class="line">    function_name = extract_function_code(s=new_req_function, detail=detail, g=g)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;新函数保存在./functions/untested functions/%s/%s_module.py文件中&#x27;</span> % (function_name, function_name))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建该函数提示示例</span></span><br><span class="line">    new_req_messages_CD = [</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_CD_input&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_pi&#125;</span><br><span class="line">                         ]</span><br><span class="line">    new_req_messages_CM = [</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_CM_input&#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>:new_req_description&#125;</span><br><span class="line">                         ]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        new_req_function = f.read()</span><br><span class="line">    </span><br><span class="line">    new_req_messages = [</span><br><span class="line">                       &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: new_req_description&#125;,</span><br><span class="line">                       &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>:new_req_function&#125;</span><br><span class="line">                      ] </span><br><span class="line">    </span><br><span class="line">    new_req_prompt = &#123;</span><br><span class="line">                     <span class="string">&quot;stage1_CD&quot;</span>: new_req_messages_CD,</span><br><span class="line">                     <span class="string">&quot;stage1_CM&quot;</span>: new_req_messages_CM,</span><br><span class="line">                     <span class="string">&quot;stage2&quot;</span>: new_req_messages</span><br><span class="line">                    &#125;   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_prompt.json&#x27;</span> % (function_name, function_name), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(new_req_prompt, f)</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;新函数提示示例保存在./functions/untested functions/%s/%s_prompt.json文件中&#x27;</span> % (function_name, function_name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> function_name</span><br></pre></td></tr></table></figure><h4 id="3-2-3-3-额外需求测试"><a href="#3-2-3-3-额外需求测试" class="headerlink" title="3.2.3.3 额外需求测试"></a>3.2.3.3 额外需求测试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">few_shot_functions = [<span class="string">&#x27;get_latest_email&#x27;</span>, <span class="string">&#x27;get_email_count&#x27;</span>]</span><br><span class="line">req = <span class="string">&quot;请查下邮箱里，me这个邮箱给陆小凤发过多少封邮件？&quot;</span></span><br><span class="line">function_name = code_generate(req=req, few_shot=few_shot_functions)</span><br><span class="line">functions_list = [function_name]</span><br><span class="line">messages = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我的邮箱号叫me,陆小凤的邮箱号就叫陆小凤&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: req&#125;]</span><br><span class="line">final_response = run_conversation(messages=messages, functions_list=functions_list, model=<span class="string">&quot;glm-4&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(final_response)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-Al为主，以人为辅"><a href="#3-3-Al为主，以人为辅" class="headerlink" title="3.3 Al为主，以人为辅"></a>3.3 Al为主，以人为辅</h2><p><img src="/images/4.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%92%8CFunction%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98/image-20250319112123288.png" alt="image-20250319112123288"></p><ol><li><p>大模型梳理需求</p></li><li><p>大模型帮忙写代码</p></li><li><p>大模型审核代码</p></li></ol><h3 id="3-3-1-审查模型构建方案剖析"><a href="#3-3-1-审查模型构建方案剖析" class="headerlink" title="3.3.1 审查模型构建方案剖析"></a>3.3.1 审查模型构建方案剖析</h3><ol><li>预训练，微调：这些方案需要的数据量很大，我们压根也没有那么多的样本的数据，而且这种方案门槛很高，成本也很高。所以不现实。</li><li>One-Shot，Few-Shot：这些方案在简单场景下有用，复杂场景就不管用了，而且如果我们Few-shot的量大的话，我们的上文的Token就不够用，所以这个方案也行不通。</li><li>外挂本地知识库：大模型本身能力就很强，而且懂的也很多，所以我们换个思路，我们搞一个本地知识库，在本地知识库里激发这个大模型的能力，从而引导这个大模型完成审查任务。</li><li>如何引导和启发一个大语言模型去理解一些陌生的事物？就像老师教学一样，有两个简单高效的方法，其一是是用其已知的知识去类比未知的知识，其二则是将陌生事物视为某些一般概念的特例。例如，当前的外部挂载文档非常重要的一个作用就是要让大语言模型理解现在要审查的多段提示，即要引导大语言模型理解什么是多段提示，但如果从头开始进行相关概念介绍（例如从头介绍两个阶段的提示分别是什么、什么是LtM、什么是问题拆解等）会非常的繁琐且效率很低，因此这里我们可以将多段提示比喻成推理链，借助大语言模型本身对推理链的理解来理解什么是多段提示。</li></ol><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function_name = <span class="string">&#x27;get_latest_email&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s/%s_prompt.json&#x27;</span> % (function_name, function_name), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    msg = json.load(f)</span><br><span class="line">chain_of_prompt = <span class="string">&quot;以下是个一个成功运行的推理链条，推理分为三个阶段，各阶段推理内容如下：%s。&quot;</span> % msg</span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">                        model=<span class="string">&quot;glm-4&quot;</span>,</span><br><span class="line">                        messages=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,  <span class="string">&quot;content&quot;</span>: <span class="string">&quot;以下是一个推理链，用于创建一个满足某个功能的函数，推理链如下：%s。请帮我介绍下这个推理链&quot;</span> % chain_of_prompt&#125;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="3-3-2-审查模型构建方案落地"><a href="#3-3-2-审查模型构建方案落地" class="headerlink" title="3.3.2 审查模型构建方案落地"></a>3.3.2 审查模型构建方案落地</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;复杂需求推理链.md&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    md_content = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(md_content)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是邮箱项目？邮件项目本身由一系列的程序组成，核心功能是根据用户自然语言描述进行相应的邮箱操作，如查阅邮件、收发邮件等。该场景是我们自己构建的一个场景。主要实现的是对我们my_mail数据库里的数据进行增删查改。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>什么是推理链？在智能邮件项目中，推理链特指将用户的需求逐步推导为python函数的过程，也就是说，每个推理链的输入都是用户需求，而推理的结果则是一个可以满足用户需求的函数。每个推理链都有三个推理环节，且都以json格式表示，例如，以下是一个正确的推理链A：</span><br><span class="line"></span><br><span class="line">```json</span><br><span class="line">&#123;<span class="string">&quot;stage1_CD&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;\u8bf7\u67e5\u9605\u6211\u90ae\u7bb1\u91cc\u9762\u672a\u8bfb\u90ae\u4ef6\uff0c\u4ece\u6311\u9009\u6709\u5173\u4f1a\u8bae\u9080\u8bf7\u7684\u90ae\u4ef6\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u4e00\u4e2a\u540d\u79f0\u4e3a\u4f1a\u8bae\u9884\u5b9a\u7684\u6807\u7b7e&quot;</span>&#125;, &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;\u5f53\u524d\u9700\u6c42\u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u7684\u662f\uff1a1.\u67e5\u8be2\u6761\u4ef6\uff1b2.\u6dfb\u52a0\u7684\u6807\u7b7e\u540d\uff1b3.\u67e5\u8be2\u8c01\u7684\u90ae\u7bb1&quot;</span>&#125;], <span class="string">&quot;stage1_CM&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;\u8bf7\u67e5\u9605\u6211\u90ae\u7bb1\u91cc\u9762\u672a\u8bfb\u90ae\u4ef6\uff0c\u4ece\u6311\u9009\u6709\u5173\u4f1a\u8bae\u9080\u8bf7\u7684\u90ae\u4ef6\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u4e00\u4e2a\u540d\u79f0\u4e3a\u4f1a\u8bae\u9884\u5b9a\u7684\u6807\u7b7e\u5f53\u524d\u9700\u6c42\u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u7684\u662f\uff1a1.\u67e5\u8be2\u6761\u4ef6\uff1b2.\u6dfb\u52a0\u7684\u6807\u7b7e\u540d\uff1b3.\u67e5\u8be2\u8c01\u7684\u90ae\u7bb1&quot;</span>&#125;, &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;\u8bf7\u5e2e\u6211\u7f16\u5199\u4e00\u4e2apython\u51fd\u6570\uff0c\u67e5\u8be2\u6211\u6536\u5230\u7684\u6240\u6709\u672a\u8bfb\u90ae\u4ef6\uff0c\u5e76\u5728\u4e0e\u4f1a\u8bae\u9080\u8bf7\u76f8\u5173\u7684\u90ae\u4ef6\u4e0a\u6dfb\u52a0\u4e00\u79cd\u540d\u4e3a\u201c\u4f1a\u8bae\u9884\u5b9a\u201d\u7684\u6807\u7b7e\uff0c\u51fd\u6570\u8981\u6c42\u5982\u4e0b\uff1a                  1.\u51fd\u6570\u53c2\u6570query\u3001tag\u548cuser_id\uff0c\u4e09\u4e2a\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5176\u4e2dquery\u8868\u793a\u8981\u67e5\u8be2\u7684\u6761\u4ef6\uff0ctag\u8868\u793a\u8981\u6dfb\u52a0\u7684\u6807\u7b7e\u540d\uff0cuser_id\u8868\u793a\u8981\u68c0\u7d22\u90ae\u4ef6\u7684\u7528\u6237\u7684ID\u3002\u9ed8\u8ba4\u503c\u662f&#x27;me&#x27;\uff0c\u8868\u793a\u5f53\u524d\u6388\u6743\u7684\u7528\u6237\uff1b                  2.\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u662f\u6dfb\u52a0\u6807\u7b7e\u540e\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u8fd4\u56de\u7ed3\u679c\u672c\u8eab\u5fc5\u987b\u662f\u4e00\u4e2ajson\u683c\u5f0f\u5bf9\u8c61\uff1b                  3.\u8bf7\u5c06\u5168\u90e8\u529f\u80fd\u5c01\u88c5\u5728\u4e00\u4e2a\u51fd\u6570\u5185\uff1b                  4.\u8bf7\u5728\u51fd\u6570\u7f16\u5199\u8fc7\u7a0b\u4e2d\uff0c\u5728\u51fd\u6570\u5185\u90e8\u52a0\u5165\u4e2d\u6587\u7f16\u5199\u7684\u8be6\u7ec6\u7684\u51fd\u6570\u8bf4\u660e\u6587\u6863\uff0c\u7528\u4e8e\u8bf4\u660e\u51fd\u6570\u529f\u80fd\u3001\u51fd\u6570\u53c2\u6570\u60c5\u51b5\u4ee5\u53ca\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u7b49\u4fe1\u606f\uff1b&quot;</span>&#125;], <span class="string">&quot;stage2&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;\u8bf7\u5e2e\u6211\u7f16\u5199\u4e00\u4e2apython\u51fd\u6570\uff0c\u67e5\u8be2\u6211\u6536\u5230\u7684\u6240\u6709\u672a\u8bfb\u90ae\u4ef6\uff0c\u5e76\u5728\u4e0e\u4f1a\u8bae\u9080\u8bf7\u76f8\u5173\u7684\u90ae\u4ef6\u4e0a\u6dfb\u52a0\u4e00\u79cd\u540d\u4e3a\u201c\u4f1a\u8bae\u9884\u5b9a\u201d\u7684\u6807\u7b7e\uff0c\u51fd\u6570\u8981\u6c42\u5982\u4e0b\uff1a                  1.\u51fd\u6570\u53c2\u6570query\u3001tag\u548cuser_id\uff0c\u4e09\u4e2a\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5176\u4e2dquery\u8868\u793a\u8981\u67e5\u8be2\u7684\u6761\u4ef6\uff0ctag\u8868\u793a\u8981\u6dfb\u52a0\u7684\u6807\u7b7e\u540d\uff0cuser_id\u8868\u793a\u8981\u68c0\u7d22\u90ae\u4ef6\u7684\u7528\u6237\u7684ID\u3002\u9ed8\u8ba4\u503c\u662f&#x27;me&#x27;\uff0c\u8868\u793a\u5f53\u524d\u6388\u6743\u7684\u7528\u6237\uff1b                  2.\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u662f\u6dfb\u52a0\u6807\u7b7e\u540e\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u8fd4\u56de\u7ed3\u679c\u672c\u8eab\u5fc5\u987b\u662f\u4e00\u4e2ajson\u683c\u5f0f\u5bf9\u8c61\uff1b                  3.\u8bf7\u5c06\u5168\u90e8\u529f\u80fd\u5c01\u88c5\u5728\u4e00\u4e2a\u51fd\u6570\u5185\uff1b                  4.\u8bf7\u5728\u51fd\u6570\u7f16\u5199\u8fc7\u7a0b\u4e2d\uff0c\u5728\u51fd\u6570\u5185\u90e8\u52a0\u5165\u4e2d\u6587\u7f16\u5199\u7684\u8be6\u7ec6\u7684\u51fd\u6570\u8bf4\u660e\u6587\u6863\uff0c\u7528\u4e8e\u8bf4\u660e\u51fd\u6570\u529f\u80fd\u3001\u51fd\u6570\u53c2\u6570\u60c5\u51b5\u4ee5\u53ca\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u7b49\u4fe1\u606f\uff1b&quot;</span>&#125;, &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;def label_meeting_emails(query, tag, user_id=&#x27;me&#x27;):\n    \&quot;\&quot;\&quot;\n    \u67e5\u8be2\u672a\u8bfb\u90ae\u4ef6\uff0c\u5e76\u7ed9\u4e0e\u4f1a\u8bae\u9080\u8bf7\u76f8\u5173\u7684\u90ae\u4ef6\u6dfb\u52a0\u6807\u7b7e\u3002\n\n    \u53c2\u6570:\n    query: \u8981\u67e5\u8be2\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5bfb\u627e\u5305\u542b\u201c\u4f1a\u8bae\u201d\u6216\u201c\u9080\u8bf7\u201d\u7b49\u5173\u952e\u5b57\u7684\u90ae\u4ef6\u3002\n    tag: \u8981\u6dfb\u52a0\u7684\u6807\u7b7e\u7684\u540d\u5b57\u3002\n    user_id: \u8981\u68c0\u67e5\u7684\u7528\u6237\u7684ID\uff0c\u9ed8\u8ba4\u503c\u4e3a&#x27;me&#x27;\uff0c\u8868\u793a\u5f53\u524d\u6388\u6743\u7684\u7528\u6237\u3002\n\n    \u8fd4\u56de:\n    \u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u5df2\u6dfb\u52a0\u6807\u7b7e\u7684\u90ae\u4ef6\u7684ID\u548c\u4e3b\u9898\u3002\u5426\u5219\uff0c\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u3002\n    \&quot;\&quot;\&quot;\n    # \u4ece\u672c\u5730\u6587\u4ef6\u4e2d\u52a0\u8f7d\u51ed\u636e\n    creds = Credentials.from_authorized_user_file(&#x27;token.json&#x27;)\n\n    # \u521b\u5efa Gmail API \u5ba2\u6237\u5bf9\u8c61\n    service = build(&#x27;gmail&#x27;, &#x27;v1&#x27;, credentials=creds)\n\n    # \u83b7\u53d6\u6ee1\u8db3\u67e5\u8be2\u6761\u4ef6\u7684\u90ae\u4ef6\u5217\u8868\n    results = service.users().messages().list(userId=user_id, q=f&#x27;is:unread &#123;query&#125;&#x27;).execute()\n    messages = results.get(&#x27;messages&#x27;, [])\n\n    if not messages:\n        print(f\&quot;No results for query: &#123;query&#125;\&quot;)\n        return json.dumps(&#123;\&quot;error\&quot;:\&quot;No emails found.\&quot;&#125;)\n\n    # \u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u90ae\u4ef6\u6dfb\u52a0\u6807\u7b7e\n    emails = []\n    for msg in messages:\n        # \u83b7\u53d6\u90ae\u4ef6\u8be6\u60c5\n        msg = service.users().messages().get(userId=user_id, id=msg[&#x27;id&#x27;]).execute()\n\n        # \u6807\u7b7e\u5904\u7406\n        add_label = &#123;\n            &#x27;addLabelIds&#x27;: [tag],\n            &#x27;removeLabelIds&#x27;: []\n        &#125;\n        msg[&#x27;payload&#x27;][&#x27;headers&#x27;][-1].get(&#x27;value&#x27;)\n        res = service.users().messages().modify(userId=user_id, id=msg[&#x27;id&#x27;], body=add_label).execute()\n\n        # \u6dfb\u52a0\u90ae\u4ef6\u4fe1\u606f\n        for d in msg[&#x27;payload&#x27;][&#x27;headers&#x27;]:\n            if d[&#x27;name&#x27;] == &#x27;Subject&#x27;:\n                sub = d[&#x27;value&#x27;]\n        emails.append(&#123;\&quot;id\&quot;: res[&#x27;id&#x27;], \&quot;subject\&quot;: sub&#125;)\n\n    return json.dumps(emails, indent=2)\n&quot;</span>&#125;]&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>对于推理链最后生成的函数，一定要是可以运行的、能够满足用户需求的python函数，且需要有详细的说明文档，说明文档内容包括函数功能、函数参数情况以及函数返回结果等信息；</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>你是一个推理链审查助手，善于检测推理链中是否存在错误。接下来我会给你一个错误的推理链，请你对其进行修改；</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>当你对推理链进行修改之后，请仿造推理链A的格式，以json格式输出修改之后的推理链。注意，请勿返回其他解释说明的文字，只返回一个json格式的修改之后的推理链即可。</span><br></pre></td></tr></table></figure><blockquote><p>这里我们可以简单总结外部挂载文档的5方面信息：</p><ol><li><p>说明当前项目背景（包括编程要求等）；</p></li><li><p>说明审查对象，包括审查对象的性质和形式等；</p></li><li><p>说明审查的目标；</p></li><li><p>进行身份设置；</p></li><li><p>说明审查之后的输出结果。</p></li></ol></blockquote><h3 id="3-3-3-审查模型效果验证"><a href="#3-3-3-审查模型效果验证" class="headerlink" title="3.3.3 审查模型效果验证"></a>3.3.3 审查模型效果验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;复杂需求推理链.md&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    md_content = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./error_function_test/%s/%s_prompt.json&#x27;</span> % (function_name, function_name), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    msg = json.load(f)</span><br><span class="line"></span><br><span class="line">msg_str = json.dumps(msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/my_mail数据字典.md&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data_content = f.read()</span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">                        model=<span class="string">&quot;glm-4&quot;</span>,</span><br><span class="line">                        messages=[</span><br><span class="line">                            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: data_content&#125;,</span><br><span class="line">                            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: md_content&#125;,</span><br><span class="line">                            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;以下是一个错误的邮箱项目的推理链，请你按照要求对其进行修改：%s&#x27;</span> % msg_str&#125;</span><br><span class="line">                          ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3-3-4-基于大模型的自动Debug的函数"><a href="#3-3-4-基于大模型的自动Debug的函数" class="headerlink" title="3.3.4 基于大模型的自动Debug的函数"></a>3.3.4 基于大模型的自动Debug的函数</h3><h4 id="3-3-4-1-定义一个审查函数"><a href="#3-3-4-1-定义一个审查函数" class="headerlink" title="3.3.4.1 定义一个审查函数"></a>3.3.4.1 定义一个审查函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prompt_modified</span>(<span class="params">function_name, system_content=<span class="string">&#x27;./data/推理链.md&#x27;</span>, model=<span class="string">&quot;glm-4&quot;</span>, g=<span class="built_in">globals</span>(<span class="params"></span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    邮箱项目的外部函数审查函数，用于审查外部函数创建流程提示是否正确以及最终创建的代码是否正确</span></span><br><span class="line"><span class="string">    :param function_name: 必要参数，字符串类型，表示审查对象名称；</span></span><br><span class="line"><span class="string">    :param system_content: 可选参数，默认取值为字符串推理链修改.md，表示此时审查函数外部挂载文档名称，需要是markdwon格式文档；</span></span><br><span class="line"><span class="string">    :param model: 可选参数，表示调用的Chat模型，默认选glm-4；</span></span><br><span class="line"><span class="string">    :param g: 可选参数，表示extract_function_code函数作用域，默认为globals()，即在当前操作空间全域内生效；</span></span><br><span class="line"><span class="string">    :return：审查结束后新创建的函数名称</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在执行审查函数，审查对象：%s&quot;</span> % function_name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data/my_mail数据字典.md&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data_content = f.read()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(system_content, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        md_content = f.read()</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 读取原函数全部提示内容</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_prompt.json&#x27;</span> % (function_name, function_name), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        msg = json.load(f)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将其保存为字符串</span></span><br><span class="line">    msg_str = json.dumps(msg)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进行审查</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">                        model=model,</span><br><span class="line">                        messages=[</span><br><span class="line">                            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: data_content&#125;,</span><br><span class="line">                            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: md_content&#125;,</span><br><span class="line">                            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;以下是一个错误的邮箱项目的推理链，请你按照要求对其进行修改：%s&#x27;</span> % msg_str&#125;</span><br><span class="line">                          ]</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    modified_result = response.choices[<span class="number">0</span>].message.content</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_json</span>(<span class="params">s</span>):</span><br><span class="line">        pattern = <span class="string">r&#x27;```[jJ][sS][oO][nN]\s*(&#123;.*?&#125;)\s*```&#x27;</span></span><br><span class="line">        <span class="keyword">match</span> = re.search(pattern, s, re.DOTALL)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">    </span><br><span class="line">    modified_json = extract_json(modified_result)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取函数源码</span></span><br><span class="line">    code = json.loads(modified_json)[<span class="string">&#x27;stage2&#x27;</span>][<span class="number">1</span>][<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取函数名</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(<span class="string">r&#x27;def (\w+)&#x27;</span>, code)</span><br><span class="line">    function_name = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;审查结束，新的函数名称为：%s。\n正在运行该函数定义过程，并保存函数源码与prompt&quot;</span> % function_name)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">exec</span>(code, g)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在untested文件夹内创建函数同名文件夹</span></span><br><span class="line">    directory = <span class="string">&#x27;./functions/untested functions/%s&#x27;</span> % function_name</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">        os.makedirs(directory)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 写入函数</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (function_name, function_name), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(code)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 写入提示</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_prompt.json&#x27;</span> % (function_name, function_name), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(json.loads(modified_json), f)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;新函数提示示例保存在./functions/untested functions/%s/%s_prompt.json文件中&#x27;</span> % (function_name, function_name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s函数已在当前操作空间定义，可以进行效果测试&quot;</span> % function_name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> function_name</span><br></pre></td></tr></table></figure><h4 id="3-3-4-2-构建自动Debug的函数"><a href="#3-3-4-2-构建自动Debug的函数" class="headerlink" title="3.3.4.2 构建自动Debug的函数"></a>3.3.4.2 构建自动Debug的函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function_test</span>(<span class="params">function_name, req, few_shot, model=<span class="string">&quot;glm-4&quot;</span>, g=<span class="built_in">globals</span>(<span class="params"></span>)</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_messages</span>(<span class="params">ueser_content</span>):</span><br><span class="line">        messages = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: data_content&#125;,</span><br><span class="line">                     &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我的邮箱号叫me&quot;</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: ueser_content&#125;]</span><br><span class="line">        <span class="keyword">return</span> messages</span><br><span class="line">            </span><br><span class="line">    messages = test_messages(req)</span><br><span class="line">    </span><br><span class="line">    new_function = <span class="built_in">globals</span>()[function_name]</span><br><span class="line">    functions_list = [new_function]</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;根据既定用户需求req进行%s函数功能测试，请确保当该函数已经在当前操作空间定义...&quot;</span> % function_name)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 有可能在run_conversation环节报错</span></span><br><span class="line">    <span class="comment"># 若没报错，则运行：</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">## 直接调用看当前函数给出来的结果是否正确</span></span><br><span class="line">        <span class="comment">## 有两种可能：1，代码能运行 2. 代码不能运行</span></span><br><span class="line">        final_response = run_conversation(messages=messages, functions_list=functions_list, model=model)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;当前函数运行结果：&#x27;%s&#x27;&quot;</span> % final_response)</span><br><span class="line">        <span class="comment">## 如果代码能运行看一下是否能满足需求</span></span><br><span class="line">        feedback = <span class="built_in">input</span>(<span class="string">&quot;函数功能是否满足要求 (yes/no)? &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> feedback.lower() == <span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;函数功能通过测试，正在将函数写入tested文件夹&quot;</span>)</span><br><span class="line">            <span class="comment">## 如果满足就通过测试</span></span><br><span class="line">            remove_to_tested(function_name)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">## 如果不满足需求</span></span><br><span class="line">            next_step = <span class="built_in">input</span>(<span class="string">&quot;函数功能未通过测试，是1.需要再次进行测试，还是2.进入debug流程？&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> next_step == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;准备再次测试...&quot;</span>)</span><br><span class="line">                <span class="comment">## 再次运行</span></span><br><span class="line">                function_test(function_name, req, few_shot)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">## 进行Debug，选择方案</span></span><br><span class="line">                solution = <span class="built_in">input</span>(<span class="string">&quot;请选择debug方案：\n1.再次执行函数创建流程，并测试结果；\n2.执行审查函数\</span></span><br><span class="line"><span class="string">                \n3.重新输入用户需求；\n4.退出程序，进行手动尝试&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> solution == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    <span class="comment"># 再次运行函数创建过程</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;好的，正在尝试再次创建函数，请稍等...&quot;</span>)</span><br><span class="line">                    few_shot_str = <span class="built_in">input</span>(<span class="string">&quot;准备再次测试，请问是1.采用此前Few-shot方案，还是2.带入全部函数示例进行Few-shot？&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> few_shot_str == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                        function_name = code_generate(req=req, few_shot=few_shot, model=model, g=g)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        function_name = code_generate(req=req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=model, g=g)</span><br><span class="line">                    <span class="comment">## 构建完了以后继续运行</span></span><br><span class="line">                    function_test(function_name=function_name, req=req, few_shot=few_shot, g=g)</span><br><span class="line">                <span class="keyword">elif</span> solution == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    <span class="comment"># 执行审查函数</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;好的，执行审查函数，请稍等...&quot;</span>)</span><br><span class="line">                    function_name = prompt_modified(function_name=function_name, model=<span class="string">&quot;gpt-3.5-turbo-16k-0613&quot;</span>, g=g)</span><br><span class="line">                    <span class="comment"># 接下来带入进行测试</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;新函数已创建，接下来带入进行测试...&quot;</span>)</span><br><span class="line">                    function_test(function_name=function_name, req=req, few_shot=few_shot, g=g)</span><br><span class="line">                <span class="keyword">elif</span> solution == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    <span class="comment">## 用户重新输入需求，也就意味着重新</span></span><br><span class="line">                    new_req = <span class="built_in">input</span>(<span class="string">&quot;好的，请再次输入用户需求，请注意，用户需求描述方法将极大程度影响最终函数创建结果。&quot;</span>)</span><br><span class="line">                    few_shot_str = <span class="built_in">input</span>(<span class="string">&quot;接下来如何运行代码创建函数？1.采用此前Few-shot方案；\n2.使用全部外部函数作为Few-shot&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> few_shot_str == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                        function_name = code_generate(req=new_req, few_shot=few_shot, model=model, g=g)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        function_name = code_generate(req=new_req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=model, g=g)</span><br><span class="line">                    function_test(function_name=function_name, req=new_req, few_shot=few_shot, g=g)</span><br><span class="line">                <span class="keyword">elif</span> solution == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;加油~&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># run_conversation报错时则运行：</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        next_step = <span class="built_in">input</span>(<span class="string">&quot;run_conversation无法正常运行，接下来是1.再次运行运行run_conversation，还是2.进入debug流程？&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> next_step == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            function_test(function_name, req, few_shot)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            solution = <span class="built_in">input</span>(<span class="string">&quot;请选择debug方案：\n1.再次执行函数创建流程，并测试结果；\n2.执行审查函数\</span></span><br><span class="line"><span class="string">            \n3.重新输入用户需求；\n4.退出程序，进行手动尝试&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> solution == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                <span class="comment"># 再次运行函数创建过程</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;好的，正在尝试再次创建函数，请稍等...&quot;</span>)</span><br><span class="line">                few_shot_str = <span class="built_in">input</span>(<span class="string">&quot;准备再次测试，请问是1.采用此前Few-shot方案，还是2.带入全部函数示例进行Few-shot？&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> few_shot_str == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    function_name = code_generate(req=req, few_shot=few_shot, model=model, g=g)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    function_name = code_generate(req=req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=model, g=g)</span><br><span class="line">                function_test(function_name=function_name, req=req, few_shot=few_shot, g=g)</span><br><span class="line">            <span class="keyword">elif</span> solution == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                <span class="comment"># 执行审查函数</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;好的，执行审查函数，请稍等...&quot;</span>)</span><br><span class="line">                max_attempts = <span class="number">3</span></span><br><span class="line">                attempts = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> attempts &lt; max_attempts:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        function_name = prompt_modified(function_name=function_name, model=<span class="string">&quot;gpt-3.5-turbo-16k-0613&quot;</span>, g=g)</span><br><span class="line">                        <span class="keyword">break</span>  <span class="comment"># 如果代码成功执行，跳出循环</span></span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        attempts += <span class="number">1</span>  <span class="comment"># 增加尝试次数</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;发生错误：&quot;</span>, e)</span><br><span class="line">                        <span class="keyword">if</span> attempts == max_attempts:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;已达到最大尝试次数，程序终止。&quot;</span>)</span><br><span class="line">                            <span class="keyword">raise</span>  <span class="comment"># 重新引发最后一个异常</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;正在重新运行审查程序...&quot;</span>)</span><br><span class="line">                <span class="comment"># 接下来带入进行测试</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;新函数已创建，接下来带入进行测试...&quot;</span>)</span><br><span class="line">                function_test(function_name=function_name, req=req, few_shot=few_shot, g=g)</span><br><span class="line">            <span class="keyword">elif</span> solution == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                new_req = <span class="built_in">input</span>(<span class="string">&quot;好的，请再次输入用户需求，请注意，用户需求描述方法将极大程度影响最终函数创建结果。&quot;</span>)</span><br><span class="line">                few_shot_str = <span class="built_in">input</span>(<span class="string">&quot;接下来如何运行代码创建函数？1.采用此前Few-shot方案；\n2.使用全部外部函数作为Few-shot&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> few_shot_str == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    function_name = code_generate(req=new_req, few_shot=few_shot, model=model, g=g)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    function_name = code_generate(req=new_req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=model, g=g)</span><br><span class="line">                function_test(function_name=function_name, req=new_req, few_shot=few_shot, g=g)</span><br><span class="line">            <span class="keyword">elif</span> solution == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;加油~&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-2-4-3-全自动流程代码编写"><a href="#3-2-4-3-全自动流程代码编写" class="headerlink" title="3.2.4.3 全自动流程代码编写"></a>3.2.4.3 全自动流程代码编写</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">req_auto_func</span>(<span class="params">req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=<span class="string">&#x27;glm-4&#x27;</span>, g=<span class="built_in">globals</span>(<span class="params"></span>), detail=<span class="number">0</span></span>):</span><br><span class="line">    function_name = code_generate(req, few_shot=few_shot, model=model, g=g, detail=detail)</span><br><span class="line">    function_test(function_name=function_name, req=req, few_shot=few_shot, model=model, g=g)</span><br></pre></td></tr></table></figure><h3 id="3-2-5-大模型编程的瓶颈"><a href="#3-2-5-大模型编程的瓶颈" class="headerlink" title="3.2.5 大模型编程的瓶颈"></a>3.2.5 大模型编程的瓶颈</h3><h4 id="3-2-5-1-编程性能瓶颈的根源"><a href="#3-2-5-1-编程性能瓶颈的根源" class="headerlink" title="3.2.5.1 编程性能瓶颈的根源"></a>3.2.5.1 编程性能瓶颈的根源</h4><p>大模型在复杂问题上的编程能力不足，主要源于缺乏“长期记忆”，无法持续围绕目标生成长代码块。代码编写本质上是按特定格式创作文本，因此大模型在长文本创作能力不足时，长代码编写也会受到限制，导致复杂需求实现的准确性下降。</p><h4 id="3-2-5-2-提升长代码编写稳定性的策略"><a href="#3-2-5-2-提升长代码编写稳定性的策略" class="headerlink" title="3.2.5.2 提升长代码编写稳定性的策略"></a>3.2.5.2 提升长代码编写稳定性的策略</h4><p>核心问题在于大模型编写长代码能力不足，而非理解需求能力不足。因此，关键在于提高模型的编程能力，而不是进一步优化提示工程。最直接有效的方法是 “列提纲-分段编写-合并”，通过分段完成提升代码稳定性。需要注意代码衔接、变量一致性以及充分利用已有辅助函数提高开发效率。</p><ol><li>第一阶段：复杂需求拆解</li></ol><p>将复杂需求拆解为简单、确定性的子任务，类似CoT（思维链）方式逐步完成。拆分后的子任务需具备明确功能，如“查找邮件”“给邮件打标签”等最小功能单位。为确保拆分准确性，可提供项目背景信息及示例作为Few-shot提示，也可让大模型自行生成拆解示例。子任务需简单易实现，确保代码编写准确性。</p><ol start="2"><li>第二阶段：代码编写与整合</li></ol><p>完成子任务拆解后，进入代码编写与整合阶段。以下是三种方案：</p><p>方案一：高层函数组合</p><ul><li>思路：创建基础功能函数，编写高层函数整合基础函数输出，完成复杂需求。</li><li>优势：便于管理、代码利用率高，可重复使用已有函数。</li><li>劣势：大模型难以准确衔接函数输出输入格式，容易导致运行失败。</li></ul><p>方案二：嵌套函数</p><ul><li>思路：创建嵌套函数，将子任务函数嵌入主函数内，确保输出输入一致。</li><li>优势：减少函数衔接问题，提高代码准确性。</li><li>劣势：需多次提示大模型调整代码逻辑，流程复杂，效率较低。</li></ul><p>方案三：分别创建函数再统一代码（推荐方案）</p><ul><li>思路：<ol><li>拆分子任务，分别创建函数1、函数2，确保单独运行无误。</li><li>提供函数1、2源码作为大模型提示，重新编写满足原始需求的完整函数。</li></ol></li><li>优势：<ul><li>利用大模型代码生成与自我审查能力，提高复杂需求代码准确性。</li><li>函数1、2无需完美衔接，最终函数参考其代码逻辑重新生成完整实现。</li><li>高度复用已有函数生成与测试流程，开发效率显著提升。</li></ul></li></ul><h3 id="3-2-6复杂任务的编程落地"><a href="#3-2-6复杂任务的编程落地" class="headerlink" title="3.2.6复杂任务的编程落地"></a>3.2.6复杂任务的编程落地</h3><h4 id="3-2-6-1-复杂需求拆解"><a href="#3-2-6-1-复杂需求拆解" class="headerlink" title="3.2.6.1 复杂需求拆解"></a>3.2.6.1 复杂需求拆解</h4><p>&emsp;&emsp;首先，我们需要创建一个专门用于复杂问题拆解的模型。根据此前的分析，该模型同时需要外部挂载文档以说明项目背景和复杂任务拆解的目的，同时还需要一些复杂任务拆解的示例作为Few-shot。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/复杂任务拆解.md&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    md_content_plus = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(md_content_plus)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是邮箱项目？邮件项目本身由一系列的程序组成，核心功能是根据用户自然语言描述进行相应的邮箱操作，如查阅邮件、收发邮件等。该场景是我们自己构建的一个场景。</span><br><span class="line">主要实现的是对我们my_mail数据库里的数据进行增删查改。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>什么是任务拆解？在邮箱项目中，任务拆解指的是将用户需求拆解为若干个最小子任务的过程，任务拆解的目标是为了降低完成复杂任务的难度。例如以下就是一个复杂任务拆解过程，原始用户需求为Q：“请帮我查下西门吹雪给我发送了哪些邮件，并对这些邮件内容进行总结”，该需求可以拆分为两个最小子任务，分别是A:“<span class="number">1.</span>查找我和西门吹雪之间通信的邮件列表”，“<span class="number">2.</span>根据某份邮件列表，对这些邮件的主要内容进行总结”；</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>什么是最小子任务？最小子任务指的是在在邮箱项目中，在进行复杂任务拆解时拆解得到的最小任务单元。例如获取我和西门吹雪之间的通信列表、围绕某些邮件进行内容总结，就属于最小子任务。最小子任务不可再进行任务拆解，并且最小子任务往往都是较为简单的任务，是一些可以快速的实现的功能；</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>若一个任务拆解成了多个最小子任务，那么请注意这多个最小子任务的任务顺序，例如此前的例子中，查找邮件列表就应该发生在对邮件内容进行总结之前。</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>你是一名任务拆解助手，负责邮件项目中用户需求拆解。当一个用户需求可以拆解为多个最小子任务时，请对其进行最小子任务的拆解；而当一个用户需求本身就是一个最小子任务时，则无需对其进行拆解。</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接下来继续创建Few-shot的提示示例。这里总共编写了四组难度和复杂度各不相同的四个需求进行拆解，具体提示示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">example1_user = <span class="string">&#x27;Q:请帮我查下西门吹雪给我发送了哪些邮件，并对这些邮件内容进行总结。&#x27;</span></span><br><span class="line">example1_assistent = <span class="string">&#x27;A:1.请帮我整理西门吹雪发给我的邮件列表。2.对某些给定的邮件进行邮件内容总结。&#x27;</span></span><br><span class="line"></span><br><span class="line">example2_user = <span class="string">&#x27;Q:请帮我查下最近一封未读邮件的发件人。&#x27;</span></span><br><span class="line">example2_assistent = <span class="string">&#x27;A:1.请帮我查下最近一封未读邮件的发件人。&#x27;</span></span><br><span class="line"></span><br><span class="line">example3_user = <span class="string">&#x27;Q:请分析我邮箱里全部已收到的邮件，告诉我最常联系的人。&#x27;</span></span><br><span class="line">example3_assistent = <span class="string">&#x27;A:1.请帮我整理邮箱里全部已收到邮件的邮件列表。2.根据某份邮件列表，分析并找出最常联系的人。&#x27;</span></span><br><span class="line"></span><br><span class="line">example4_user = <span class="string">&#x27;Q:请在我邮箱里查找6月5号到6号的未读邮件，并找出工作相关的未读邮件，请依次给这些未读邮件回复说我正在休假，同时请将这些邮件转发给我的助理西门吹雪。&#x27;</span></span><br><span class="line">example4_assistent = <span class="string">&#x27;A:1.请查找并整理我邮箱里6月5号到6号的未读邮件列表。2.根据某份邮件列表，查找并汇总其中和工作有关的列表。3.根据某份邮件列表，对其逐一进行回复，告诉他们我正在休假。4.根据某份邮件列表，将其逐一转发给我的助理西门吹雪。&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，这里我们统一通过Q&amp;A的方式来提示模型不同内容的类型，同时拆解之后的每段文字也都以句号结尾，方便后续进行结构化字符串提取。在创建的四个提示实力中，1、3示例属于一般示例，对于大多数复杂需求来说，拆解为两个子任务基本就基本能够构成较好的自然语言编程引导，而第二个提示示例则是提醒模型，当需求较为简单时，不用进行需求拆解；而最后一个提示的示例，则是一个相对来说非常复杂的需求，总共拆解得到了4个子任务，是为了提醒模型在必要时，可以多拆分一些子任务。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">req = <span class="string">&#x27;请查阅我邮箱里面未读邮件，从挑选有公司的邮件，并将其标签改为紧急&#x27;</span></span><br><span class="line">system_message = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: md_content_plus&#125;]</span><br><span class="line">decomp_few_shot = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: example1_user&#125;,</span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: example1_assistent&#125;, </span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: example2_user&#125;, </span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: example2_assistent&#125;, </span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: example3_user&#125;, </span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: example3_assistent&#125;, </span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: example4_user&#125;, </span><br><span class="line">                   &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: example4_assistent&#125;]</span><br><span class="line">messages = system_message + decomp_few_shot</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/%s.json&#x27;</span> % <span class="string">&#x27;decompose_messages&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(messages, f)</span><br><span class="line">    </span><br><span class="line">messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: req&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sub_req1 = <span class="string">&#x27;查阅邮箱中的未读邮件，并整理出未读邮件列表。&#x27;</span></span><br><span class="line">sub_req2 = <span class="string">&#x27;从未读邮件列表中筛选出包含公司信息的邮件。&#x27;</span></span><br><span class="line">sub_req3 = <span class="string">&#x27;对于筛选出的公司邮件，将其标签改为“紧急”。&#x27;</span></span><br></pre></td></tr></table></figure><p>至此，我们就完成了原始任务的拆解部分工作。当然，我们也可以将上述过程封装为一个完整的函数，方便之后进行灵活调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_decompose_results</span>(<span class="params">req, model=<span class="string">&#x27;glm-4&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    复杂需求拆解函数，能够将用户输入的复杂需求拆解为一系列更容易完成的子任务</span></span><br><span class="line"><span class="string">    :param req: 必选参数，以字符串形式表示，用于表示用户输入的原始需求；</span></span><br><span class="line"><span class="string">    :param model: 拆解需求所使用的大模型；</span></span><br><span class="line"><span class="string">    :return：由子任务所组成的列表；</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    decompose_results = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/decompose_messages.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        decompose_messages = json.load(f)</span><br><span class="line">        </span><br><span class="line">    decompose_messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: req&#125;)</span><br><span class="line">    </span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">                model=model,</span><br><span class="line">                messages=decompose_messages</span><br><span class="line">            )</span><br><span class="line">    </span><br><span class="line">    res = response.choices[<span class="number">0</span>].message.content</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用正则表达式查找以1、2、3开始的句子</span></span><br><span class="line">    matches = re.findall(<span class="string">r&#x27;\d\.(.*?。)&#x27;</span>, res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> matches:</span><br><span class="line">        decompose_results.append(<span class="keyword">match</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> decompose_results</span><br></pre></td></tr></table></figure><h4 id="3-2-6-2-代码编写与整合"><a href="#3-2-6-2-代码编写与整合" class="headerlink" title="3.2.6.2 代码编写与整合"></a>3.2.6.2 代码编写与整合</h4><p>方案三：分别创建函数再统一代码（推荐方案）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">func1_name = code_generate(sub_req1, few_shot=<span class="string">&#x27;all&#x27;</span>, g=<span class="built_in">globals</span>(), detail=<span class="number">1</span>)</span><br><span class="line">func2_name = code_generate(sub_req2, few_shot=<span class="string">&#x27;all&#x27;</span>, g=<span class="built_in">globals</span>(), detail=<span class="number">1</span>)</span><br><span class="line">func3_name = code_generate(sub_req3, few_shot=<span class="string">&#x27;all&#x27;</span>, g=<span class="built_in">globals</span>(), detail=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (func1_name, func1_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    func1_str = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (func2_name, func2_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    func2_str = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (func3_name, func3_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    func3_str = f.read()</span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">  model=<span class="string">&#x27;glm-4&#x27;</span>,</span><br><span class="line">  messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;以下是函数1的代码：%s&#x27;</span> % func1_str&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;以下是函数2的代码：%s&#x27;</span> % func2_str&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;以下是函数3的代码：%s&#x27;</span> % func3_str&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;请将函数1、函数2和函数3的代码功能整合到一个函数中，要求该函数功能完整，并且可以满足以下需求：%s&#x27;</span> % req&#125;</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req_auto_func</span>(<span class="params">req, few_shot=<span class="string">&#x27;all&#x27;</span>, model=<span class="string">&#x27;glm-4&#x27;</span>, g=<span class="built_in">globals</span>(<span class="params"></span>), detail=<span class="number">0</span></span>):</span><br><span class="line">    <span class="comment"># 默认情况下system_messages = None</span></span><br><span class="line">    system_messages = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 尝试进行任务拆解</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decompose_results = get_decompose_results(req=req, model=model)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;代码能执行到这儿吗？&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;暂停1分钟后继续调用模型&#x27;</span>)</span><br><span class="line">        <span class="comment">#time.sleep(60)</span></span><br><span class="line">        decompose_results = get_decompose_results(req=req, model=model)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 如果只拆解得到多个任务，则创建新的基于任务拆解得到的system_message</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(decompose_results) != <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;原始需求将拆分为多个子需求并进行分段代码创建与合并&#x27;</span>)</span><br><span class="line">        <span class="comment"># 读取原始system_message</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/tested functions/system_messages.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            system_messages = json.load(f)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 用于存储全部需求的函数代码</span></span><br><span class="line">        sub_func_all = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 用于存储全部需求</span></span><br><span class="line">        sub_req_all = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 计数器</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> sub_req <span class="keyword">in</span> decompose_results:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 每个需求依次创建子函数</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;第%s个子需求为：%s&#x27;</span> % (i, sub_req))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;正在创建对应子函数&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sub_func_name = code_generate(sub_req, few_shot=few_shot, g=g, detail=detail, model=model)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;暂停1分钟后继续调用模型&#x27;</span>)</span><br><span class="line">                time.sleep(<span class="number">60</span>)</span><br><span class="line">                sub_func_name = code_generate(sub_req, few_shot=few_shot, g=g, detail=detail, model=model)</span><br><span class="line">                </span><br><span class="line">            <span class="comment"># 读取子函数源码</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./functions/untested functions/%s/%s_module.py&#x27;</span> % (sub_func_name, sub_func_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                sub_func_str = f.read()</span><br><span class="line">            <span class="comment"># 对子函数源码进行拼接</span></span><br><span class="line">            sub_func_all += sub_func_str</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 按顺序拼接子需求</span></span><br><span class="line">            sub_req_all += <span class="built_in">str</span>(i)+(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            sub_req_all += sub_req            </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;子需求对应的子函数全部创建完毕，接下来进入到原始需求函数创建过程...&#x27;</span>)</span><br><span class="line">        <span class="comment"># 添加一个system_message</span></span><br><span class="line">        decompose_description = <span class="string">&#x27;对于当前编程需求，可以拆解为若干个子需求，也就是：%s。这些子需求的实现方式可以参考如下代码：%s&#x27;</span> % (sub_req_all, sub_func_all)</span><br><span class="line">        system_messages[<span class="string">&#x27;system_message&#x27;</span>].append(&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: decompose_description&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进行代码创建和代码审查</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        function_name = code_generate(req=req, few_shot=few_shot, model=model, g=g, detail=detail, system_messages=system_messages)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;暂停1分钟后继续调用模型&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">60</span>)</span><br><span class="line">        function_name = code_generate(req=req, few_shot=few_shot, model=model, g=g, detail=detail, system_messages=system_messages)</span><br><span class="line">        </span><br><span class="line">    function_test(function_name=function_name, req=req, few_shot=few_shot, model=model, g=g, system_messages=system_messages)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Agent实战基础之在线大模型开发</title>
      <link href="/2025/03/16/3.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9C%A8%E7%BA%BF%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91/"/>
      <url>/2025/03/16/3.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9C%A8%E7%BA%BF%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Chat-Completion-API"><a href="#1-Chat-Completion-API" class="headerlink" title="1. Chat Completion API"></a>1. Chat Completion API</h1><h2 id="1-1-Chat-Completion-API-优势"><a href="#1-1-Chat-Completion-API-优势" class="headerlink" title="1.1 Chat Completion API 优势"></a>1.1 Chat Completion API 优势</h2><ul><li>Completion API（×）</li><li>Chat Completion API（√）</li></ul><blockquote><p>说明：</p><ul><li>Chat 模型核心能力在于对话交互</li><li>Completion 模型本质上是文本补全模型</li><li>Chat 模型是对 Completion 模型的升级</li><li>同时支持 Function Calling 和 ChatGPT Plugin</li></ul></blockquote><h2 id="1-2-Chat-Completion-API-环境部署"><a href="#1-2-Chat-Completion-API-环境部署" class="headerlink" title="1.2 Chat Completion API 环境部署"></a>1.2 Chat Completion API 环境部署</h2><h3 id="1-2-1-服务器-Anaconda-环境部署"><a href="#1-2-1-服务器-Anaconda-环境部署" class="headerlink" title="1.2.1 服务器 Anaconda 环境部署"></a>1.2.1 服务器 Anaconda 环境部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n AI python=3.9</span><br><span class="line">conda activate AI</span><br><span class="line">pip install openai</span><br></pre></td></tr></table></figure><h3 id="1-2-2-PyCharm-远程连接服务器开发"><a href="#1-2-2-PyCharm-远程连接服务器开发" class="headerlink" title="1.2.2 PyCharm 远程连接服务器开发"></a>1.2.2 PyCharm 远程连接服务器开发</h3><ul><li>使用 PyCharm 配置远程 Python 解释器</li><li>配置 SSH 隧道（若需）</li></ul><h3 id="1-2-3-购买-API-及代理"><a href="#1-2-3-购买-API-及代理" class="headerlink" title="1.2.3 购买 API 及代理"></a>1.2.3 购买 API 及代理</h3><ul><li>淘宝购买 OpenAI API 及相应代理服务</li></ul><h3 id="1-2-4-初始化客户端"><a href="#1-2-4-初始化客户端" class="headerlink" title="1.2.4 初始化客户端"></a>1.2.4 初始化客户端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 OpenAI 客户端</span></span><br><span class="line">openai.api_key = <span class="string">&quot;api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;api_base&quot;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=openai.api_key, base_url=openai.api_base)</span><br></pre></td></tr></table></figure><h2 id="1-3-大模型交互方式"><a href="#1-3-大模型交互方式" class="headerlink" title="1.3 大模型交互方式"></a>1.3 大模型交互方式</h2><h3 id="1-3-1-大模型交互方式1（最常用）"><a href="#1-3-1-大模型交互方式1（最常用）" class="headerlink" title="1.3.1 大模型交互方式1（最常用）"></a>1.3.1 大模型交互方式1（最常用）</h3><p>直接通过 chat 接口进行交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">completion = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好!请介绍一下你自己&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(completion)</span><br><span class="line"><span class="built_in">print</span>(completion.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-3-2-大模型交互方式2（流式响应，适用于实时展示）"><a href="#1-3-2-大模型交互方式2（流式响应，适用于实时展示）" class="headerlink" title="1.3.2 大模型交互方式2（流式响应，适用于实时展示）"></a>1.3.2 大模型交互方式2（流式响应，适用于实时展示）</h3><p>流式打印，每次返回响应的一个小块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stream = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好!请介绍一下你自己&quot;</span>&#125;],</span><br><span class="line">    stream=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> stream:</span><br><span class="line">    <span class="keyword">if</span> chunk.choices[<span class="number">0</span>].delta.content <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(chunk.choices[<span class="number">0</span>].delta.content, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="1-4-Chat-Completion-API-详细参数"><a href="#1-4-Chat-Completion-API-详细参数" class="headerlink" title="1.4 Chat Completion API 详细参数"></a>1.4 Chat Completion API 详细参数</h2><h3 id="1-4-1-参数说明表"><a href="#1-4-1-参数说明表" class="headerlink" title="1.4.1 参数说明表"></a>1.4.1 参数说明表</h3><table><thead><tr><th>参数</th><th>是否必选</th><th>说明</th><th>默认值&#x2F;取值范围</th></tr></thead><tbody><tr><td>model</td><td>必选</td><td>大模型的名称</td><td>—</td></tr><tr><td>messages</td><td>必选</td><td>提示词（可包含角色设定）</td><td>—</td></tr><tr><td>max_tokens</td><td>可选</td><td>返回结果的 token 数量</td><td>—</td></tr><tr><td>temperature</td><td>可选</td><td>采样温度。数值越小生成文本越保守；较高时文本多样</td><td>默认 1，范围 0-2</td></tr><tr><td>top_p</td><td>可选</td><td>控制输出文本的随机性，建议调节 temperature</td><td>默认 1，范围 0-1</td></tr><tr><td>n</td><td>可选</td><td>表示同一提示返回几个 Completion</td><td>默认 1</td></tr><tr><td>stream</td><td>可选</td><td>响应方式。False 一次性返回；True 流式返回</td><td>默认 False</td></tr><tr><td>logprobs</td><td>可选</td><td>返回每个 token 的前 N 个概率及对数概率</td><td>默认 null</td></tr><tr><td>stop</td><td>可选</td><td>指定生成文本的停止信号（一个或多个字符串）</td><td>默认 null</td></tr><tr><td>presence_penalty</td><td>可选</td><td>调整生成新内容的倾向性，较高值更易生成新内容</td><td>默认 0，范围 [-2, 2]</td></tr><tr><td>frequency_penalty</td><td>可选</td><td>调整模型重复自身的倾向性，较高值避免重复</td><td>默认 0，范围 [-2, 2]</td></tr><tr><td>logit_bias</td><td>可选</td><td>调整特定 token 的对数概率偏置</td><td>—</td></tr><tr><td>tools</td><td>可选</td><td>可调用的函数列表</td><td>—</td></tr><tr><td>tool_choice</td><td>可选</td><td>调用函数的策略</td><td>—</td></tr><tr><td>functions</td><td>废弃</td><td>可调用的函数（已废弃）</td><td>—</td></tr><tr><td>function_call</td><td>废弃</td><td>调用函数的策略（已废弃）</td><td>—</td></tr></tbody></table><h3 id="1-4-2-messages-可以包含多条信息"><a href="#1-4-2-messages-可以包含多条信息" class="headerlink" title="1.4.2 messages 可以包含多条信息"></a>1.4.2 messages 可以包含多条信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># messages 可以包含多条信息，但模型只会对最后一条用户信息进行回答</span></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好!请介绍一下你自己&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请问，中国的首都是？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-4-3-message-角色设定"><a href="#1-4-3-message-角色设定" class="headerlink" title="1.4.3 message 角色设定"></a>1.4.3 message 角色设定</h3><p>示例一：单用户信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;假设你是一名资深的AI大模型专家，请帮我回答，什么是AI大模型？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><p>示例二：先设定 system 后用户提问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一名AI大模型资深专家&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请问什么是AI大模型？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><blockquote><p>注意：若 user 消息在前，system 消息将不生效！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请问什么是AI大模型？&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一名幽默的脱口秀演员，回答问题时语言要幽默&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-4-4-message-之-Few-shot-效果演示"><a href="#1-4-4-message-之-Few-shot-效果演示" class="headerlink" title="1.4.4 message 之 Few-shot 效果演示"></a>1.4.4 message 之 Few-shot 效果演示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Q1 = <span class="string">&#x27;小米有6个气球，她又买了3袋，每袋有10个气球，请问她现在总共有多少个气球？&#x27;</span></span><br><span class="line">A1 = <span class="string">&#x27;现在小米总共有36个气球。&#x27;</span></span><br><span class="line">Q2 = <span class="string">&#x27;小明总共有10个苹果，吃了3个苹果，然后又买了5个苹果，请问现在小明总共有多少个苹果？&#x27;</span></span><br><span class="line">A2 = <span class="string">&#x27;现在小明总共有12个苹果。&#x27;</span></span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-4&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: Q1&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: A1&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: Q2&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><p>也可以将提示示例写入 system 信息中作为背景信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;Q: &#x27;</span> + Q1 + <span class="string">&#x27; A: &#x27;</span> + A1&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;Q: &#x27;</span> + Q2 &#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-4-5-message-之-Zero-shot-CoT-效果"><a href="#1-4-5-message-之-Zero-shot-CoT-效果" class="headerlink" title="1.4.5 message 之 Zero-shot-CoT 效果"></a>1.4.5 message 之 Zero-shot-CoT 效果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">prompt_temp_cot = <span class="string">&#x27;请一步步思考并解决问题&#x27;</span></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt_temp_cot&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: Q1&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-4-6-message-之实现简易知识库"><a href="#1-4-6-message-之实现简易知识库" class="headerlink" title="1.4.6 message 之实现简易知识库"></a>1.4.6 message 之实现简易知识库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">text = (<span class="string">&#x27;西瓜老师，男，1988年6月16日出生于云南省大理市\n&#x27;</span></span><br><span class="line">        <span class="string">&#x27;2011年毕业于云南大学计算机专业。\n&#x27;</span></span><br><span class="line">        <span class="string">&#x27;毕业后的西瓜老师在北京的一家著名科技公司工作了12年，专注于人工智能方面的研究。&#x27;</span>)</span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: text&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请问西瓜老师出生于哪儿？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h2 id="1-5-借助本地知识库实现简易版多轮对话机器人"><a href="#1-5-借助本地知识库实现简易版多轮对话机器人" class="headerlink" title="1.5 借助本地知识库实现简易版多轮对话机器人"></a>1.5 借助本地知识库实现简易版多轮对话机器人</h2><h3 id="1-5-1-测试大模型（无知识背景）"><a href="#1-5-1-测试大模型（无知识背景）" class="headerlink" title="1.5.1 测试大模型（无知识背景）"></a>1.5.1 测试大模型（无知识背景）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;null&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你知道陈思诚导演的《消失的她》的电影里角色有哪些吗？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-5-2-读取本地知识库"><a href="#1-5-2-读取本地知识库" class="headerlink" title="1.5.2 读取本地知识库"></a>1.5.2 读取本地知识库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;消失的她.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    chatCompletion_kg = f.read()</span><br></pre></td></tr></table></figure><h3 id="1-5-3-问答测试"><a href="#1-5-3-问答测试" class="headerlink" title="1.5.3 问答测试"></a>1.5.3 问答测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: chatCompletion_kg&#125;,</span><br><span class="line">      &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你知道《消失的她》的电影里角色有哪些吗？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="1-5-4-添加多轮对话效果"><a href="#1-5-4-添加多轮对话效果" class="headerlink" title="1.5.4 添加多轮对话效果"></a>1.5.4 添加多轮对话效果</h3><p>定义一个函数实现多轮对话：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">chat_with_model</span>(<span class="params">messages</span>):</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">        messages=messages</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gpt_chat_with_model</span>():</span><br><span class="line">    <span class="comment"># 初始问候，加入本地知识库作为背景</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: chatCompletion_kg&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好！&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好！我是一个AIGC智能助理，有什么问题我可以帮助你？&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="built_in">print</span>(chat_with_model(messages))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进行对话</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        user_input = <span class="built_in">input</span>(<span class="string">&quot;用户：&quot;</span>)</span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;)</span><br><span class="line">        assistant_response = chat_with_model(messages)</span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: assistant_response&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;助理：&quot;</span> + assistant_response)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断是否结束对话</span></span><br><span class="line">        <span class="keyword">if</span> user_input.lower() == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">gpt_chat_with_model()</span><br></pre></td></tr></table></figure><blockquote><p> 说明：Prompt 模式对比表</p><table><thead><tr><th>Prompt模式</th><th>描述</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>Zero-Shot</td><td>直接给出任务，不提供任何示例或上下文。</td><td>快速、简单，不需要事先准备数据；适合任务明确且模型能力较强时使用。</td><td>性能可能较低，尤其是对于复杂任务；需要模型在少量信息下能推理出答案。</td><td>基本任务，尤其是当任务说明非常清晰时；要求模型能根据任务直接给出答案。</td></tr><tr><td>Few-Shot</td><td>给出任务和少量的示例（通常1-5个例子），让模型学习如何解决任务。</td><td>提供上下文和实例，帮助模型更好地理解任务；提高任务复杂度时更有效。</td><td>需要选择合适的示例，示例选择不当可能影响性能；对任务的多样性要求较高。</td><td>任务明确但具有复杂性，或需要模型在少量示例的帮助下推理。</td></tr><tr><td>COT (Chain of Thought)</td><td>引导模型通过一步步的推理过程来得出答案，通常会增加一系列中间推理步骤。</td><td>提高模型的推理能力，尤其是复杂问题；能够更好地处理需要推理和逻辑的任务。</td><td>生成的推理链可能过于冗长或不清晰；有时可能难以判断推理链的有效性。</td><td>需要复杂推理或逻辑步骤的任务，如数学题解、复杂推理问题等。</td></tr><tr><td>SC (Self-Consistent)</td><td>通过多次生成不同答案并通过投票或比较来确定最一致的答案。</td><td>提高答案的准确性，减少模型单次输出的误差。</td><td>需要更多的计算资源和时间；可能导致重复的输出，增加冗余。</td><td>对准确性要求较高的任务，尤其是在高不确定性或模糊情况下。</td></tr><tr><td>TOT (Task-Oriented Thought)</td><td>在任务过程中，针对特定目标进行思维引导，通常会持续关注任务目标，而不是所有推理步骤。</td><td>提高效率，模型更加关注任务的最终目标；适用于长时间的任务。</td><td>可能忽视其他重要信息，只关注目标；推理过程可能不全面。</td><td>长期任务，或需要明确目标导向的任务，例如文本生成、翻译等。</td></tr><tr><td>Step-Back</td><td>在解答问题的过程中，如果当前步骤失败，回退到前一步重新评估或推理。</td><td>增强模型处理复杂任务时的容错能力；帮助模型在推理过程中纠错。</td><td>回退可能导致更多的计算，增加处理时间；并非所有任务都适合反向推理。</td><td>复杂任务或多步骤问题，特别是在模型可能犯错时。</td></tr></tbody></table></blockquote><h1 id="2-Function-Calling"><a href="#2-Function-Calling" class="headerlink" title="2. Function Calling"></a>2. Function Calling</h1><h2 id="2-1-Function-Calling详细流程剖析"><a href="#2-1-Function-Calling详细流程剖析" class="headerlink" title="2.1 Function Calling详细流程剖析"></a>2.1 Function Calling详细流程剖析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line"></span><br><span class="line">openai.api_base=<span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=openai.api_key ,base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例函数 - 孙悟空算法</span></span><br><span class="line"><span class="comment"># 该函数用于接收一个数据表（字符串形式），对数据进行处理并返回JSON格式结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sunwukong_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    孙悟空算法函数，该函数定义了数据集计算过程</span></span><br><span class="line"><span class="string">    :param data: 必要参数，表示带入计算的数据表，用字符串进行表示</span></span><br><span class="line"><span class="string">    :return: sunwukong_function函数计算后的结果，返回结果为JSON格式的Dataframe类型对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new[<span class="string">&#x27;x1&#x27;</span>] * <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个示例数据集</span></span><br><span class="line"></span><br><span class="line">df_str = pd.DataFrame(&#123;<span class="string">&#x27;x1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;x2&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>]&#125;).to_string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个完整的对话流程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_conversation</span>():</span><br><span class="line">    <span class="comment"># Step 1: 初始化对话，发送数据集和函数信息</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;数据集data：%s，数据集以字符串形式呈现&quot;</span> % df_str&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请在数据集data上执行孙悟空算法&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义工具（函数）</span></span><br><span class="line">    tools = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">            <span class="string">&quot;function&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;sunwukong_function&quot;</span>,</span><br><span class="line">                <span class="string">&quot;description&quot;</span>: <span class="string">&quot;用于执行孙悟空算法函数，定义了一种特殊的数据集计算过程&quot;</span>,</span><br><span class="line">                <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;data&quot;</span>: &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;执行孙悟空算法的数据集&quot;</span>&#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;data&quot;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2: 发送初次请求</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">        messages=messages,</span><br><span class="line">        tools=tools,</span><br><span class="line">        tool_choice=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取模型返回的消息</span></span><br><span class="line">    response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line">    tool_calls = response_message.tool_calls</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3: 判断模型是否要调用函数</span></span><br><span class="line">    <span class="keyword">if</span> tool_calls:</span><br><span class="line">        available_functions = &#123;<span class="string">&quot;sunwukong_function&quot;</span>: sunwukong_function&#125;  <span class="comment"># 这里可以扩展多种函数</span></span><br><span class="line">        messages.append(response_message)  <span class="comment"># 将模型返回结果加入消息列表</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 4: 执行函数，并将返回结果传回模型</span></span><br><span class="line">        <span class="keyword">for</span> tool_call <span class="keyword">in</span> tool_calls:</span><br><span class="line">            function_name = tool_call.function.name</span><br><span class="line">            function_to_call = available_functions[function_name]</span><br><span class="line">            function_args = json.loads(tool_call.function.arguments)</span><br><span class="line">            function_response = function_to_call(**function_args)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将函数结果传回对话上下文</span></span><br><span class="line">            messages.append(&#123;</span><br><span class="line">                <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span>,</span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: function_name,</span><br><span class="line">                <span class="string">&quot;content&quot;</span>: function_response,</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 5: 发送最终请求，获取完整回答</span></span><br><span class="line">        second_response = client.chat.completions.create(</span><br><span class="line">            model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">            messages=messages,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> second_response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行对话流程并输出最终结果</span></span><br><span class="line">result = run_conversation()</span><br><span class="line"><span class="built_in">print</span>(result.choices[<span class="number">0</span>].message.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用StringIO将字符串转换为文件对象</span></span><br><span class="line"></span><br><span class="line">df_str = <span class="string">&#x27;\n    x1\n0  10\n1  20\n.&#x27;</span></span><br><span class="line">data = io.StringIO(df_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用read_csv()函数读取数据，并设置第一列为索引</span></span><br><span class="line"></span><br><span class="line">df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(df_new)</span><br></pre></td></tr></table></figure><blockquote><p>详解：function_response &#x3D; function_to_call(**function_args)</p><ol><li><code>function_to_call</code> 代表某个函数（动态决定调用哪个函数）。</li><li><code>function_args</code> 是一个字典，<code>**</code> 解包它，把键值对作为参数传入函数。</li><li><code>function_response</code> 接收函数返回值。</li></ol></blockquote><h2 id="2-2-Function-Calling函数封装"><a href="#2-2-Function-Calling函数封装" class="headerlink" title="2.2 Function Calling函数封装"></a>2.2 Function Calling函数封装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数：自动生成Chat模型所需的functions参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auto_functions</span>(<span class="params">functions_list</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据输入的函数列表，自动生成符合Chat模型functions参数格式的描述字典</span></span><br><span class="line"><span class="string">    :param functions_list: 包含一个或多个函数对象的列表</span></span><br><span class="line"><span class="string">    :return: 符合Chat模型functions参数要求的functions对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">functions_generate</span>(<span class="params">functions_list</span>):</span><br><span class="line">        functions = []</span><br><span class="line">        <span class="comment"># 遍历每个函数对象</span></span><br><span class="line">        <span class="keyword">for</span> function <span class="keyword">in</span> functions_list:</span><br><span class="line">            <span class="comment"># 获取函数的说明文档和名称</span></span><br><span class="line">            function_description = inspect.getdoc(function)</span><br><span class="line">            function_name = function.__name__</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置提示词，生成符合JSON格式的函数描述</span></span><br><span class="line">            system_prompt = <span class="string">&#x27;以下是某的函数说明：%s&#x27;</span> % function_description</span><br><span class="line">            user_prompt = <span class="string">&#x27;根据这个函数的函数说明，请帮我创建一个JSON格式的字典，这个字典有如下5点要求：\</span></span><br><span class="line"><span class="string">                           1.字典总共有三个键值对；\</span></span><br><span class="line"><span class="string">                           2.第一个键值对的Key是字符串name，value是该函数的名字：%s，也是字符串；\</span></span><br><span class="line"><span class="string">                           3.第二个键值对的Key是字符串description，value是该函数的函数的功能说明，也是字符串；\</span></span><br><span class="line"><span class="string">                           4.第三个键值对的Key是字符串parameters，value是一个JSON Schema对象，用于说明该函数的参数输入规范。\</span></span><br><span class="line"><span class="string">                           5.输出结果必须是一个JSON格式的字典，只输出这个字典即可，前后不需要任何前后修饰或说明的语句&#x27;</span> % function_name</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 调用Chat模型生成函数描述</span></span><br><span class="line">            response = client.chat.completions.create(</span><br><span class="line">                model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">                messages=[</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_prompt&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_prompt&#125;</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解析返回的JSON字符串</span></span><br><span class="line">            json_function_description = json.loads(response.choices[<span class="number">0</span>].message.content.replace(<span class="string">&quot;```&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;json&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">            json_str = &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>, <span class="string">&quot;function&quot;</span>: json_function_description&#125;</span><br><span class="line">            functions.append(json_str)</span><br><span class="line">        <span class="keyword">return</span> functions</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大尝试4次，防止异常</span></span><br><span class="line">    max_attempts = <span class="number">4</span></span><br><span class="line">    attempts = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> attempts &lt; max_attempts:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            functions = functions_generate(functions_list)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            attempts += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;发生错误：&quot;</span>, e)</span><br><span class="line">            <span class="keyword">if</span> attempts == max_attempts:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;已达到最大尝试次数，程序终止。&quot;</span>)</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;正在重新运行...&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> functions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义孙悟空算法函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sunwukong_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    孙悟空算法，给数据集所有数值乘以10</span></span><br><span class="line"><span class="string">    :param data: 输入数据集，字符串形式</span></span><br><span class="line"><span class="string">    :return: 返回处理后的数据集，JSON格式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new * <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义唐僧算法函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tangseng_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    唐僧算法，给数据集所有数值乘以1000000</span></span><br><span class="line"><span class="string">    :param data: 输入数据集，字符串形式</span></span><br><span class="line"><span class="string">    :return: 返回处理后的数据集，JSON格式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new * <span class="number">1000000</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将函数列表传入，生成tools参数</span></span><br><span class="line">functions_list = [sunwukong_function, tangseng_function]</span><br><span class="line">tools = auto_functions(functions_list)</span><br><span class="line"><span class="built_in">print</span>(tools)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据集</span></span><br><span class="line"></span><br><span class="line">df_str = pd.DataFrame(&#123;<span class="string">&#x27;x1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;x2&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>]&#125;).to_string()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义第一组对话，调用孙悟空算法</span></span><br><span class="line">messages = [</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;数据集data：%s，数据集以字符串形式呈现&quot;</span> % df_str&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请在数据集data上执行孙悟空算法&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=messages,</span><br><span class="line">    tools=tools,</span><br><span class="line">    tool_choice=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义第二组对话，调用唐僧算法</span></span><br><span class="line">messages = [</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;数据集data：%s，数据集以字符串形式呈现&quot;</span> % df_str&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请在数据集data上执行唐僧算法函数&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">    messages=messages,</span><br><span class="line">    tools=tools,</span><br><span class="line">    tool_choice=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message)</span><br></pre></td></tr></table></figure><h2 id="2-3-封装调用2轮response的函数-增加多轮对话的效果"><a href="#2-3-封装调用2轮response的函数-增加多轮对话的效果" class="headerlink" title="2.3 封装调用2轮response的函数+增加多轮对话的效果"></a>2.3 封装调用2轮response的函数+增加多轮对话的效果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&quot;your_api_key&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;your_api_base&quot;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=openai.api_key, base_url=openai.api_base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sunwukong_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    孙悟空算法函数，该函数定义了数据集计算过程</span></span><br><span class="line"><span class="string">    :param data: 必要参数，表示带入计算的数据表，用字符串进行表示</span></span><br><span class="line"><span class="string">    :return：sunwukong_function函数计算后的结果，返回结果为表示为JSON格式的Dataframe类型对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new * <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tangseng_function</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    唐僧算法函数，该函数定义了数据集计算过程</span></span><br><span class="line"><span class="string">    :param data: 必要参数，表示带入计算的数据表，用字符串进行表示</span></span><br><span class="line"><span class="string">    :return：tangseng_function函数计算后的结果，返回结果为表示为JSON格式的Dataframe类型对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = io.StringIO(data)</span><br><span class="line">    df_new = pd.read_csv(data, sep=<span class="string">&#x27;\s+&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    res = df_new * <span class="number">1000000</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(res.to_string())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auto_functions</span>(<span class="params">functions_list</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Chat模型的functions参数编写函数</span></span><br><span class="line"><span class="string">    :param functions_list: 包含一个或者多个函数对象的列表；</span></span><br><span class="line"><span class="string">    :return：满足Chat模型functions参数要求的functions对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">functions_generate</span>(<span class="params">functions_list</span>):</span><br><span class="line">        <span class="comment"># 创建空列表，用于保存每个函数的描述字典</span></span><br><span class="line">        functions = []</span><br><span class="line">        <span class="comment"># 对每个外部函数进行循环</span></span><br><span class="line">        <span class="keyword">for</span> function <span class="keyword">in</span> functions_list:</span><br><span class="line">            <span class="comment"># 读取函数对象的函数说明</span></span><br><span class="line">            function_description = inspect.getdoc(function)</span><br><span class="line">            <span class="comment"># 读取函数的函数名字符串</span></span><br><span class="line">            function_name = function.__name__</span><br><span class="line"></span><br><span class="line">            system_prompt = <span class="string">&#x27;以下是某的函数说明：%s&#x27;</span> % function_description</span><br><span class="line">            user_prompt = <span class="string">&#x27;根据这个函数的函数说明，请帮我创建一个JSON格式的字典，这个字典有如下5点要求：\</span></span><br><span class="line"><span class="string">                           1.字典总共有三个键值对；\</span></span><br><span class="line"><span class="string">                           2.第一个键值对的Key是字符串name，value是该函数的名字：%s，也是字符串；\</span></span><br><span class="line"><span class="string">                           3.第二个键值对的Key是字符串description，value是该函数的函数的功能说明，也是字符串；\</span></span><br><span class="line"><span class="string">                           4.第三个键值对的Key是字符串parameters，value是一个JSON Schema对象，用于说明该函数的参数输入规范。\</span></span><br><span class="line"><span class="string">                           5.输出结果必须是一个JSON格式的字典，只输出这个字典即可，前后不需要任何前后修饰或说明的语句&#x27;</span> % function_name</span><br><span class="line"></span><br><span class="line">            response = client.chat.completions.create(</span><br><span class="line">                model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span><br><span class="line">                messages=[</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_prompt&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_prompt&#125;</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line">            json_function_description = json.loads(</span><br><span class="line">                response.choices[<span class="number">0</span>].message.content.replace(<span class="string">&quot;```&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;json&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">            json_str = &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>, <span class="string">&quot;function&quot;</span>: json_function_description&#125;</span><br><span class="line">            functions.append(json_str)</span><br><span class="line">        <span class="keyword">return</span> functions</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 最大可以尝试4次</span></span><br><span class="line">    max_attempts = <span class="number">4</span></span><br><span class="line">    attempts = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> attempts &lt; max_attempts:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            functions = functions_generate(functions_list)</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 如果代码成功执行，跳出循环</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            attempts += <span class="number">1</span>  <span class="comment"># 增加尝试次数</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;发生错误：&quot;</span>, e)</span><br><span class="line">            <span class="keyword">if</span> attempts == max_attempts:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;已达到最大尝试次数，程序终止。&quot;</span>)</span><br><span class="line">                <span class="keyword">raise</span>  <span class="comment"># 重新引发最后一个异常</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;正在重新运行...&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> functions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_conversation</span>(<span class="params">messages, functions_list=<span class="literal">None</span>, model=<span class="string">&quot;gpt-3.5-turbo&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    能够自动执行外部函数调用的对话模型</span></span><br><span class="line"><span class="string">    :param messages: 必要参数，字典类型，输入到Chat模型的messages参数对象</span></span><br><span class="line"><span class="string">    :param functions_list: 可选参数，默认为None，可以设置为包含全部外部函数的列表对象</span></span><br><span class="line"><span class="string">    :param model: Chat模型，可选参数，默认模型为gpt-3.5-turbo</span></span><br><span class="line"><span class="string">    :return：Chat模型输出结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 如果没有外部函数库，则执行普通的对话任务</span></span><br><span class="line">    <span class="keyword">if</span> functions_list == <span class="literal">None</span>:</span><br><span class="line">        response = client.chat.completions.create(</span><br><span class="line">            model=model,</span><br><span class="line">            messages=messages,</span><br><span class="line">        )</span><br><span class="line">        response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line">        final_response = response_message.content</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若存在外部函数库，则需要灵活选取外部函数并进行回答</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 创建functions对象</span></span><br><span class="line">        tools = auto_functions(functions_list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建外部函数库字典</span></span><br><span class="line">        available_functions = &#123;func.__name__: func <span class="keyword">for</span> func <span class="keyword">in</span> functions_list&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第一次调用大模型</span></span><br><span class="line">        response = client.chat.completions.create(</span><br><span class="line">            model=model,</span><br><span class="line">            messages=messages,</span><br><span class="line">            tools=tools,</span><br><span class="line">            tool_choice=<span class="string">&quot;auto&quot;</span>, )</span><br><span class="line">        response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line"></span><br><span class="line">        tool_calls = response_message.tool_calls</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tool_calls:</span><br><span class="line"></span><br><span class="line">            messages.append(response_message)</span><br><span class="line">            <span class="keyword">for</span> tool_call <span class="keyword">in</span> tool_calls:</span><br><span class="line">                function_name = tool_call.function.name</span><br><span class="line">                function_to_call = available_functions[function_name]</span><br><span class="line">                function_args = json.loads(tool_call.function.arguments)</span><br><span class="line">                <span class="comment">## 真正执行外部函数的就是这儿的代码</span></span><br><span class="line">                function_response = function_to_call(**function_args)</span><br><span class="line">                messages.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span>,</span><br><span class="line">                        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;name&quot;</span>: function_name,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span>: function_response,</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">                <span class="comment">## 第二次调用模型</span></span><br><span class="line">            second_response = client.chat.completions.create(</span><br><span class="line">                model=model,</span><br><span class="line">                messages=messages,</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># 获取最终结果</span></span><br><span class="line">            final_response = second_response.choices[<span class="number">0</span>].message.content</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            final_response = response_message.content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> final_response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chat_with_model</span>(<span class="params">functions_list=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                    prompt=<span class="string">&quot;你好&quot;</span>,</span></span><br><span class="line"><span class="params">                    model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,</span></span><br><span class="line"><span class="params">                    system_message=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是小智助手。&quot;</span>&#125;]</span>):</span><br><span class="line">    messages = system_message</span><br><span class="line">    messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        answer = run_conversation(messages=messages,</span><br><span class="line">                                  functions_list=functions_list,</span><br><span class="line">                                  model=model)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;智能助手回答: <span class="subst">&#123;answer&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 询问用户是否还有其他问题</span></span><br><span class="line">        user_input = <span class="built_in">input</span>(<span class="string">&quot;您还有其他问题吗？(输入退出以结束对话): &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_input == <span class="string">&quot;退出&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录用户回答</span></span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">functions_list = [sunwukong_function, tangseng_function]</span><br><span class="line">chat_with_model(functions_list, prompt=<span class="string">&quot;你好&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="3-ChatGPT-Plugin"><a href="#3-ChatGPT-Plugin" class="headerlink" title="3.ChatGPT Plugin"></a>3.ChatGPT Plugin</h1><h2 id="3-1-ChatGPT-Plugin-的核心概念"><a href="#3-1-ChatGPT-Plugin-的核心概念" class="headerlink" title="3.1 ChatGPT Plugin 的核心概念"></a>3.1 ChatGPT Plugin 的核心概念</h2><p>ChatGPT Plugin 的本质是一个 API 服务，让 ChatGPT 能调用你的接口，扩展功能。例如查询数据库、获取实时数据、操作第三方服务等等。</p><ol><li><p>API：提供功能的接口，通常是 RESTful API</p></li><li><p>OpenAPI 规范：描述 API 的功能、参数、返回结果</p></li><li><p>Manifest 文件：定义插件的元数据（比如名称、描述、授权等）</p></li></ol><h2 id="3-2-搭建-API-服务"><a href="#3-2-搭建-API-服务" class="headerlink" title="3.2 搭建 API 服务"></a>3.2 搭建 API 服务</h2><p>创建一个 Web 服务，提供 REST API。你可以用 Flask (Python)、Express (Node.js)、FastAPI 等框架。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_weather&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>():</span><br><span class="line">    city = request.args.get(<span class="string">&#x27;city&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;city&quot;</span>: city, <span class="string">&quot;weather&quot;</span>: <span class="string">&quot;sunny&quot;</span>, <span class="string">&quot;temperature&quot;</span>: <span class="string">&quot;25°C&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><ul><li>定义路由（API 端点）</li><li>处理参数和返回 JSON</li><li>部署到公网可访问服务器</li></ul><h2 id="3-3-创建-OpenAPI-规范文件"><a href="#3-3-创建-OpenAPI-规范文件" class="headerlink" title="3.3 创建 OpenAPI 规范文件"></a>3.3 创建 OpenAPI 规范文件</h2><p>创建一个 <code>openapi.yaml</code> 文件，描述 API。ChatGPT 需要它理解你的插件怎么调用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openapi:</span> <span class="number">3.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Weather</span> <span class="string">Plugin</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">A</span> <span class="string">plugin</span> <span class="string">that</span> <span class="string">provides</span> <span class="string">weather</span> <span class="string">information</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://your-plugin-domain.com</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/get_weather:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">getWeather</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">Get</span> <span class="string">weather</span> <span class="string">information</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">city</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">City</span> <span class="string">name</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&#x27;200&#x27;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Weather</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">                <span class="attr">properties:</span></span><br><span class="line">                  <span class="attr">city:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                  <span class="attr">weather:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                  <span class="attr">temperature:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><h2 id="3-4-创建插件的-Manifest-文件"><a href="#3-4-创建插件的-Manifest-文件" class="headerlink" title="3.4 创建插件的 Manifest 文件"></a>3.4 创建插件的 Manifest 文件</h2><p>创建 <code>ai-plugin.json</code> 文件，提供插件的元数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;schema_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name_for_model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weather_plugin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name_for_human&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Weather Plugin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description_for_model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Provides weather information for a given city.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description_for_human&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Get real-time weather data for any city.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auth&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openapi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://your-plugin-domain.com/openapi.yaml&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;logo_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://your-plugin-domain.com/logo.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;contact_email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;support@yourdomain.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;legal_info_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://yourdomain.com/legal&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>name_for_model</code>: 确保简短且便于 ChatGPT 识别</li><li><code>auth</code>: 支持 <code>none</code>（公开）、<code>oauth</code>（需要登录授权）</li><li><code>api</code>: 指定 OpenAPI 文件地址</li><li><code>logo_url</code>: 让插件界面更专业</li></ul><h2 id="3-5-部署插件服务"><a href="#3-5-部署插件服务" class="headerlink" title="3.5 部署插件服务"></a>3.5 部署插件服务</h2><p>确保你的服务可以被外网访问，可以选择：</p><ol><li><p>Cloudflare Pages &#x2F; Workers（轻量级）</p></li><li><p>Vercel &#x2F; Render（适合前后端一起托管）</p></li><li><p>AWS &#x2F; GCP &#x2F; Azure（大型项目）</p></li></ol><p>确保 API 支持 HTTPS，否则 ChatGPT 无法调用。</p><blockquote><p>Function calling VS ChatGPT Plugin</p><p><img src="/images/3.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9C%A8%E7%BA%BF%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91/image-20250317113459547.png" alt="image-20250317113459547"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Agent实战基础之大模型基础</title>
      <link href="/2025/03/15/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/03/15/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1-transformer"><a href="#1-transformer" class="headerlink" title="1. transformer"></a>1. transformer</h1><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315135636248.png" alt="image-20250315135636248"></p><h2 id="1-1-输入部分"><a href="#1-1-输入部分" class="headerlink" title="1.1 输入部分"></a>1.1 输入部分</h2><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315135837941.png" alt="image-20250315135837941"></p><h3 id="1-1-1-框架"><a href="#1-1-1-框架" class="headerlink" title="1.1.1 框架"></a>1.1.1 框架</h3><ol><li>源文本：嵌入层以及位置编码器</li><li>目标文本：嵌入层以及位置编码器</li></ol><h3 id="1-1-2-组件"><a href="#1-1-2-组件" class="headerlink" title="1.1.2 组件"></a>1.1.2 组件</h3><h4 id="1-1-2-1-文本嵌入层-Embedding"><a href="#1-1-2-1-文本嵌入层-Embedding" class="headerlink" title="1.1.2.1 文本嵌入层 (Embedding)"></a>1.1.2.1 文本嵌入层 (Embedding)</h4><ul><li><p>概念：<br>文本嵌入层用于将离散的词或符号转化为连续的向量表示，使得每个词都拥有一个固定长度的语义表示。</p></li><li><p>作用：  </p><ul><li>将词汇转换为低维向量，便于后续的计算处理。  </li><li>捕获词与词之间的语义关系，为模型理解文本提供基础信息。</li></ul></li></ul><h4 id="1-1-2-2-位置编码器-Positional-Encoding"><a href="#1-1-2-2-位置编码器-Positional-Encoding" class="headerlink" title="1.1.2.2 位置编码器 (Positional Encoding)"></a>1.1.2.2 位置编码器 (Positional Encoding)</h4><ul><li><p>概念：<br>位置编码器为嵌入向量添加位置信息，由于嵌入层本身不包含词序信息，位置编码器弥补了这一不足。</p></li><li><p>作用：  </p><ul><li>注入序列中各词的相对或绝对位置信息，帮助模型识别词序。  </li><li>保持语法结构，确保模型理解句子内部的依赖关系。</li></ul></li></ul><h2 id="1-2-输出部分"><a href="#1-2-输出部分" class="headerlink" title="1.2 输出部分"></a>1.2 输出部分</h2><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315140112908.png" alt="image-20250315140112908"></p><h3 id="1-2-1-框架"><a href="#1-2-1-框架" class="headerlink" title="1.2.1 框架"></a>1.2.1 框架</h3><ol><li>线性层  </li><li>softmax 处理器</li></ol><h2 id="1-3-解码器部分"><a href="#1-3-解码器部分" class="headerlink" title="1.3 解码器部分"></a>1.3 解码器部分</h2><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315140122384.png" alt="image-20250315140122384"></p><h3 id="1-3-1-框架"><a href="#1-3-1-框架" class="headerlink" title="1.3.1 框架"></a>1.3.1 框架</h3><ol><li>由 N 个编码器堆叠  </li><li>每个编码器包含两个子层：<ul><li>第一个子层：多头自注意力子层 + 规范化层 + 残差连接  </li><li>第二个子层：前馈全连接子层 + 规范化层 + 残差连接</li></ul></li></ol><h3 id="1-3-2-组件"><a href="#1-3-2-组件" class="headerlink" title="1.3.2 组件"></a>1.3.2 组件</h3><h4 id="1-3-2-1-掩码张量-mask"><a href="#1-3-2-1-掩码张量-mask" class="headerlink" title="1.3.2.1 掩码张量 (mask)"></a>1.3.2.1 掩码张量 (mask)</h4><ul><li><p>概念：<br>掩码张量用于屏蔽掉不应参与计算的信息，例如填充符号或在生成任务中需要屏蔽未来的信息。</p></li><li><p>作用：  </p><ul><li>防止模型在计算注意力分数时考虑到无关或不允许访问的信息。  </li><li>确保训练过程中的因果关系（例如在自回归生成模型中屏蔽未来时刻）。</li></ul></li></ul><h4 id="1-3-2-2-自注意力机制"><a href="#1-3-2-2-自注意力机制" class="headerlink" title="1.3.2.2 自注意力机制"></a>1.3.2.2 自注意力机制</h4><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315143826474.png" alt="image-20250315143826474"></p><p>$$<br>\text{Attention}(Q, K, V) &#x3D; \text{softmax} \left( \frac{QK^T}{\sqrt{d_k}} \right) V<br>$$</p><ul><li><p>概念：<br>自注意力机制允许模型在计算当前词的表示时，同时考虑序列中所有其他位置的词，从而捕捉全局依赖关系。</p></li><li><p>作用：  </p><ul><li>动态调整每个词在整体语义表示中的权重。  </li><li>提升模型对长距离依赖关系的捕捉能力。</li></ul></li></ul><blockquote><p>说明： 输入的 Q、K、V 通常中，K 与 V 是相同的，而 Q 可以不同；特殊情况下 Q&#x3D;K&#x3D;V 则称为标准的自注意力机制。</p></blockquote><h4 id="1-3-2-3-多头注意力机制"><a href="#1-3-2-3-多头注意力机制" class="headerlink" title="1.3.2.3 多头注意力机制"></a>1.3.2.3 多头注意力机制</h4><p><img src="/images/2.Agent%E5%AE%9E%E6%88%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/image-20250315144535063.png" alt="image-20250315144535063"></p><ul><li><p>概念：<br>多头注意力机制通过将输入的特征向量划分为多个子空间（head），在每个子空间上分别计算注意力，然后将结果合并，获得更丰富的表示。</p></li><li><p>作用：  </p><ul><li>使模型能在不同的子空间中捕捉多种语义信息。  </li><li>增强模型的表达能力和稳定性，避免单一注意力头的局限性。</li></ul></li></ul><h2 id="2-Open-GPT不同版本对比"><a href="#2-Open-GPT不同版本对比" class="headerlink" title="2. Open GPT不同版本对比"></a>2. Open GPT不同版本对比</h2><h3 id="2-1-不同模型对比"><a href="#2-1-不同模型对比" class="headerlink" title="2.1 不同模型对比"></a>2.1 不同模型对比</h3><table><thead><tr><th>模型</th><th>结构</th><th>位置编码</th><th>激活函数</th><th>Layer Norm方法</th></tr></thead><tbody><tr><td>原生</td><td>Encoder-Decoder</td><td>Sinusoidal编码</td><td>ReLU</td><td>Post Layer Norm</td></tr><tr><td>Transformer</td><td>Encoder-Decoder</td><td>Sinusoidal编码</td><td>ReLU</td><td>Post Layer Norm</td></tr><tr><td>BERT</td><td>Encoder</td><td>绝对位置编码</td><td>GeLU</td><td>Post Layer Norm</td></tr><tr><td>LLaMA</td><td>Casual Decoder</td><td>RoPE</td><td>SwiGLU</td><td>Pre RMS Norm</td></tr><tr><td>ChatGLM-6B</td><td>Prefix Decoder</td><td>RoPE</td><td>GeGLU</td><td>Post Deep Norm</td></tr><tr><td>Bloom</td><td>Casual Decoder</td><td>ALiBi</td><td>GeLU</td><td>Pre Layer Norm</td></tr></tbody></table><h3 id="2-2-GPT不同版本对比"><a href="#2-2-GPT不同版本对比" class="headerlink" title="2.2 GPT不同版本对比"></a>2.2 GPT不同版本对比</h3><table><thead><tr><th>对比维度</th><th>GPT1</th><th>GPT2</th><th>GPT3</th><th>GPT3.5</th><th>GPT4.0</th></tr></thead><tbody><tr><td>模型规模</td><td>117M</td><td>1.5B</td><td>175B</td><td>175B</td><td>万亿级别</td></tr><tr><td>Transformer层数</td><td>12</td><td>48</td><td>96</td><td>96</td><td>120</td></tr><tr><td>主要贡献</td><td>多任务学习</td><td>prompt engineering</td><td>少样本学习</td><td>ChatGPT发布</td><td>规模与性能提升</td></tr><tr><td>发布日期</td><td>2018年</td><td>2019年</td><td>2020年</td><td>2022年</td><td>2023年</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.AI大模型应用开发工程师课程导读</title>
      <link href="/2025/03/14/1.AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%AF%BE%E7%A8%8B%E5%AF%BC%E8%AF%BB/"/>
      <url>/2025/03/14/1.AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%AF%BE%E7%A8%8B%E5%AF%BC%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="🎯-第一阶段：打好基础"><a href="#🎯-第一阶段：打好基础" class="headerlink" title="🎯 第一阶段：打好基础"></a>🎯 <strong>第一阶段：打好基础</strong></h1><p><strong>目标</strong>：理解大模型基础知识，掌握Agent开发核心概念和工具<br> 📌 <strong>课程模块</strong>：</p><ol><li>AI大模型应用开发工程师课程导读</li><li>Agent实战基础之大模型基础</li><li>Agent实战基础之在线大模型开发</li><li>Agent实战基础之提示词工程和Function进阶实战</li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>熟悉大模型概念、原理和开发环境</li><li>掌握提示词工程、Function调用，提高模型交互能力</li></ul><h1 id="🚀-第二阶段：强化多模态与Agent架构实战"><a href="#🚀-第二阶段：强化多模态与Agent架构实战" class="headerlink" title="🚀 第二阶段：强化多模态与Agent架构实战"></a>🚀 <strong>第二阶段：强化多模态与Agent架构实战</strong></h1><p><strong>目标</strong>：掌握多模态大模型开发，熟悉Agent架构与落地方案<br> 📌 <strong>课程模块</strong>： </p><ol start="5"><li><p>Agent实战基础之多模态大模型实战</p></li><li><p>Agent实战基础之Agent架构与落地方案</p></li><li><p>Agent实战基础之ReAct架构实战</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>理解多模态大模型（图像、文本、语音）融合开发</li><li>熟悉Agent架构（传统+ReAct思路），掌握多场景落地实现</li></ul><h1 id="🔧-第三阶段：进阶开发技能强化"><a href="#🔧-第三阶段：进阶开发技能强化" class="headerlink" title="🔧 第三阶段：进阶开发技能强化"></a>🔧 <strong>第三阶段：进阶开发技能强化</strong></h1><p><strong>目标</strong>：熟练掌握核心工具链，提升开发效率和应用能力<br> 📌 <strong>课程模块</strong>： </p><ol start="8"><li><p>Agent实战技能之Dify智能应用开发</p></li><li><p>Agent实战技能之Assistants API</p></li><li><p>Agent实战技能之LangChain全面剖析</p></li><li><p>Agent实战技能之LangGraph深度实战</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>上手Dify等智能应用开发平台</li><li>深入掌握LangChain、LangGraph，实现复杂业务逻辑编排</li></ul><h1 id="🏗️-第四阶段：大型项目实战演练"><a href="#🏗️-第四阶段：大型项目实战演练" class="headerlink" title="🏗️ 第四阶段：大型项目实战演练"></a>🏗️ <strong>第四阶段：大型项目实战演练</strong></h1><p><strong>目标</strong>：完成从0到1的大型商业项目开发，积累实战经验<br> 📌 <strong>课程模块</strong>： </p><ol start="12"><li><p>Agent大型项目实战1:百亿级智能数据分析平台</p></li><li><p>Agent大型项目实战2:多模态Agent商业平台</p></li><li><p>Agent大型项目实战3:ChatBI即席查询平台</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>具备大规模数据分析平台搭建能力</li><li>熟悉多模态Agent在商业场景落地开发</li><li>掌握ChatBI查询平台的完整设计与实现</li></ul><h1 id="🧠-第五阶段：RAG架构与性能优化突破"><a href="#🧠-第五阶段：RAG架构与性能优化突破" class="headerlink" title="🧠 第五阶段：RAG架构与性能优化突破"></a>🧠 <strong>第五阶段：RAG架构与性能优化突破</strong></h1><p><strong>目标</strong>：掌握RAG（检索增强生成）技术，解决大模型知识瓶颈<br> 📌 <strong>课程模块</strong>： </p><ol start="15"><li><p>RAG实战基础之RAG架构演进之路</p></li><li><p>RAG实战基础之RAG技术选型</p></li><li><p>RAG实战基础之性能优化</p></li><li><p>RAG实战进阶之GraphRAG实战</p></li><li><p>RAG项目实战:高性能RAG商业项目</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>理解RAG原理与架构演进</li><li>掌握RAG系统搭建与性能优化策略</li><li>上手GraphRAG进阶玩法，落地高性能RAG项目</li></ul><h1 id="🔥-第六阶段：DeepSeek专题深度研习"><a href="#🔥-第六阶段：DeepSeek专题深度研习" class="headerlink" title="🔥 第六阶段：DeepSeek专题深度研习"></a>🔥 <strong>第六阶段：DeepSeek专题深度研习</strong></h1><p><strong>目标</strong>：深入探索大模型领域最新技术趋势，完成企业级项目交付<br> 📌 <strong>课程模块</strong>： </p><ol start="20"><li><p>DeepSeek专题之大模型API实战</p></li><li><p>DeepSeek专题之统一多模态模型</p></li><li><p>DeepSeek专题之微调行业大模型</p></li><li><p>DeepSeek专题之蒸馏专属大模型</p></li><li><p>DeepSeek专题之企业级智能体客服项目</p></li></ol><p>✅ <strong>学习成果</strong>：</p><ul><li>掌握DeepSeek API与多模态模型开发</li><li>理解大模型微调、蒸馏与专属模型打造</li><li>完成企业级智能体客服系统落地</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI大模型开发工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
